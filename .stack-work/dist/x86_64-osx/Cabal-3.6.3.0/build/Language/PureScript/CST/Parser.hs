{-# OPTIONS_GHC -w #-}
{-# OPTIONS -XMagicHash -XBangPatterns -XTypeSynonymInstances -XFlexibleInstances -cpp #-}
#if __GLASGOW_HASKELL__ >= 710
{-# OPTIONS_GHC -XPartialTypeSignatures #-}
#endif
module Language.PureScript.CST.Parser
  ( parseType
  , parseExpr
  , parseDecl
  , parseIdent
  , parseOperator
  , parseModule
  , parseImportDeclP
  , parseDeclP
  , parseExprP
  , parseTypeP
  , parseModuleNameP
  , parseQualIdentP
  , parse
  , PartialResult(..)
  ) where

import Prelude hiding (lex)

import Control.Monad ((<=<), when)
import Data.Bifunctor (second)
import Data.Foldable (foldl', for_, toList)
import qualified Data.List.NonEmpty as NE
import Data.Text (Text)
import Data.Traversable (for, sequence)
import Language.PureScript.CST.Errors
import Language.PureScript.CST.Flatten (flattenType)
import Language.PureScript.CST.Lexer
import Language.PureScript.CST.Monad
import Language.PureScript.CST.Positions
import Language.PureScript.CST.Types
import Language.PureScript.CST.Utils
import qualified Language.PureScript.Names as N
import qualified Language.PureScript.Roles as R
import Language.PureScript.PSString (PSString)
import qualified Data.Array as Happy_Data_Array
import qualified Data.Bits as Bits
import qualified GHC.Exts as Happy_GHC_Exts
import Control.Applicative(Applicative(..))
import Control.Monad (ap)

-- parser produced by Happy Version 1.20.0

newtype HappyAbsSyn  = HappyAbsSyn HappyAny
#if __GLASGOW_HASKELL__ >= 607
type HappyAny = Happy_GHC_Exts.Any
#else
type HappyAny = forall a . a
#endif
newtype HappyWrap26 = HappyWrap26 (Name N.ModuleName)
happyIn26 :: (Name N.ModuleName) -> (HappyAbsSyn )
happyIn26 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap26 x)
{-# INLINE happyIn26 #-}
happyOut26 :: (HappyAbsSyn ) -> HappyWrap26
happyOut26 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut26 #-}
newtype HappyWrap27 = HappyWrap27 (QualifiedProperName)
happyIn27 :: (QualifiedProperName) -> (HappyAbsSyn )
happyIn27 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap27 x)
{-# INLINE happyIn27 #-}
happyOut27 :: (HappyAbsSyn ) -> HappyWrap27
happyOut27 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut27 #-}
newtype HappyWrap28 = HappyWrap28 (ProperName)
happyIn28 :: (ProperName) -> (HappyAbsSyn )
happyIn28 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap28 x)
{-# INLINE happyIn28 #-}
happyOut28 :: (HappyAbsSyn ) -> HappyWrap28
happyOut28 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut28 #-}
newtype HappyWrap29 = HappyWrap29 (QualifiedName Ident)
happyIn29 :: (QualifiedName Ident) -> (HappyAbsSyn )
happyIn29 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap29 x)
{-# INLINE happyIn29 #-}
happyOut29 :: (HappyAbsSyn ) -> HappyWrap29
happyOut29 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut29 #-}
newtype HappyWrap30 = HappyWrap30 (Name Ident)
happyIn30 :: (Name Ident) -> (HappyAbsSyn )
happyIn30 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap30 x)
{-# INLINE happyIn30 #-}
happyOut30 :: (HappyAbsSyn ) -> HappyWrap30
happyOut30 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut30 #-}
newtype HappyWrap31 = HappyWrap31 (QualifiedOpName)
happyIn31 :: (QualifiedOpName) -> (HappyAbsSyn )
happyIn31 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap31 x)
{-# INLINE happyIn31 #-}
happyOut31 :: (HappyAbsSyn ) -> HappyWrap31
happyOut31 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut31 #-}
newtype HappyWrap32 = HappyWrap32 (OpName)
happyIn32 :: (OpName) -> (HappyAbsSyn )
happyIn32 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap32 x)
{-# INLINE happyIn32 #-}
happyOut32 :: (HappyAbsSyn ) -> HappyWrap32
happyOut32 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut32 #-}
newtype HappyWrap33 = HappyWrap33 (QualifiedOpName)
happyIn33 :: (QualifiedOpName) -> (HappyAbsSyn )
happyIn33 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap33 x)
{-# INLINE happyIn33 #-}
happyOut33 :: (HappyAbsSyn ) -> HappyWrap33
happyOut33 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut33 #-}
newtype HappyWrap34 = HappyWrap34 (OpName)
happyIn34 :: (OpName) -> (HappyAbsSyn )
happyIn34 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap34 x)
{-# INLINE happyIn34 #-}
happyOut34 :: (HappyAbsSyn ) -> HappyWrap34
happyOut34 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut34 #-}
newtype HappyWrap35 = HappyWrap35 (Label)
happyIn35 :: (Label) -> (HappyAbsSyn )
happyIn35 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap35 x)
{-# INLINE happyIn35 #-}
happyOut35 :: (HappyAbsSyn ) -> HappyWrap35
happyOut35 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut35 #-}
newtype HappyWrap36 = HappyWrap36 (Name Ident)
happyIn36 :: (Name Ident) -> (HappyAbsSyn )
happyIn36 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap36 x)
{-# INLINE happyIn36 #-}
happyOut36 :: (HappyAbsSyn ) -> HappyWrap36
happyOut36 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut36 #-}
newtype HappyWrap37 = HappyWrap37 ((SourceToken, PSString))
happyIn37 :: ((SourceToken, PSString)) -> (HappyAbsSyn )
happyIn37 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap37 x)
{-# INLINE happyIn37 #-}
happyOut37 :: (HappyAbsSyn ) -> HappyWrap37
happyOut37 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut37 #-}
newtype HappyWrap38 = HappyWrap38 ((SourceToken, Char))
happyIn38 :: ((SourceToken, Char)) -> (HappyAbsSyn )
happyIn38 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap38 x)
{-# INLINE happyIn38 #-}
happyOut38 :: (HappyAbsSyn ) -> HappyWrap38
happyOut38 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut38 #-}
newtype HappyWrap39 = HappyWrap39 ((SourceToken, Either Integer Double))
happyIn39 :: ((SourceToken, Either Integer Double)) -> (HappyAbsSyn )
happyIn39 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap39 x)
{-# INLINE happyIn39 #-}
happyOut39 :: (HappyAbsSyn ) -> HappyWrap39
happyOut39 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut39 #-}
newtype HappyWrap40 = HappyWrap40 ((SourceToken, Integer))
happyIn40 :: ((SourceToken, Integer)) -> (HappyAbsSyn )
happyIn40 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap40 x)
{-# INLINE happyIn40 #-}
happyOut40 :: (HappyAbsSyn ) -> HappyWrap40
happyOut40 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut40 #-}
newtype HappyWrap41 = HappyWrap41 ((SourceToken, Bool))
happyIn41 :: ((SourceToken, Bool)) -> (HappyAbsSyn )
happyIn41 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap41 x)
{-# INLINE happyIn41 #-}
happyOut41 :: (HappyAbsSyn ) -> HappyWrap41
happyOut41 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut41 #-}
newtype HappyWrap42 = HappyWrap42 (Type ())
happyIn42 :: (Type ()) -> (HappyAbsSyn )
happyIn42 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap42 x)
{-# INLINE happyIn42 #-}
happyOut42 :: (HappyAbsSyn ) -> HappyWrap42
happyOut42 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut42 #-}
newtype HappyWrap43 = HappyWrap43 (Type ())
happyIn43 :: (Type ()) -> (HappyAbsSyn )
happyIn43 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap43 x)
{-# INLINE happyIn43 #-}
happyOut43 :: (HappyAbsSyn ) -> HappyWrap43
happyOut43 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut43 #-}
newtype HappyWrap44 = HappyWrap44 (Type ())
happyIn44 :: (Type ()) -> (HappyAbsSyn )
happyIn44 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap44 x)
{-# INLINE happyIn44 #-}
happyOut44 :: (HappyAbsSyn ) -> HappyWrap44
happyOut44 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut44 #-}
newtype HappyWrap45 = HappyWrap45 (Type ())
happyIn45 :: (Type ()) -> (HappyAbsSyn )
happyIn45 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap45 x)
{-# INLINE happyIn45 #-}
happyOut45 :: (HappyAbsSyn ) -> HappyWrap45
happyOut45 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut45 #-}
newtype HappyWrap46 = HappyWrap46 (Type ())
happyIn46 :: (Type ()) -> (HappyAbsSyn )
happyIn46 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap46 x)
{-# INLINE happyIn46 #-}
happyOut46 :: (HappyAbsSyn ) -> HappyWrap46
happyOut46 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut46 #-}
newtype HappyWrap47 = HappyWrap47 (Type ())
happyIn47 :: (Type ()) -> (HappyAbsSyn )
happyIn47 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap47 x)
{-# INLINE happyIn47 #-}
happyOut47 :: (HappyAbsSyn ) -> HappyWrap47
happyOut47 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut47 #-}
newtype HappyWrap48 = HappyWrap48 (Type ())
happyIn48 :: (Type ()) -> (HappyAbsSyn )
happyIn48 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap48 x)
{-# INLINE happyIn48 #-}
happyOut48 :: (HappyAbsSyn ) -> HappyWrap48
happyOut48 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut48 #-}
newtype HappyWrap49 = HappyWrap49 (Type ())
happyIn49 :: (Type ()) -> (HappyAbsSyn )
happyIn49 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap49 x)
{-# INLINE happyIn49 #-}
happyOut49 :: (HappyAbsSyn ) -> HappyWrap49
happyOut49 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut49 #-}
newtype HappyWrap50 = HappyWrap50 (Row ())
happyIn50 :: (Row ()) -> (HappyAbsSyn )
happyIn50 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap50 x)
{-# INLINE happyIn50 #-}
happyOut50 :: (HappyAbsSyn ) -> HappyWrap50
happyOut50 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut50 #-}
newtype HappyWrap51 = HappyWrap51 (Labeled Label (Type ()))
happyIn51 :: (Labeled Label (Type ())) -> (HappyAbsSyn )
happyIn51 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap51 x)
{-# INLINE happyIn51 #-}
happyOut51 :: (HappyAbsSyn ) -> HappyWrap51
happyOut51 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut51 #-}
newtype HappyWrap52 = HappyWrap52 (TypeVarBinding ())
happyIn52 :: (TypeVarBinding ()) -> (HappyAbsSyn )
happyIn52 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap52 x)
{-# INLINE happyIn52 #-}
happyOut52 :: (HappyAbsSyn ) -> HappyWrap52
happyOut52 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut52 #-}
newtype HappyWrap53 = HappyWrap53 (TypeVarBinding ())
happyIn53 :: (TypeVarBinding ()) -> (HappyAbsSyn )
happyIn53 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap53 x)
{-# INLINE happyIn53 #-}
happyOut53 :: (HappyAbsSyn ) -> HappyWrap53
happyOut53 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut53 #-}
newtype HappyWrap54 = HappyWrap54 (SourceToken)
happyIn54 :: (SourceToken) -> (HappyAbsSyn )
happyIn54 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap54 x)
{-# INLINE happyIn54 #-}
happyOut54 :: (HappyAbsSyn ) -> HappyWrap54
happyOut54 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut54 #-}
newtype HappyWrap55 = HappyWrap55 (Where ())
happyIn55 :: (Where ()) -> (HappyAbsSyn )
happyIn55 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap55 x)
{-# INLINE happyIn55 #-}
happyOut55 :: (HappyAbsSyn ) -> HappyWrap55
happyOut55 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut55 #-}
newtype HappyWrap56 = HappyWrap56 (Expr ())
happyIn56 :: (Expr ()) -> (HappyAbsSyn )
happyIn56 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap56 x)
{-# INLINE happyIn56 #-}
happyOut56 :: (HappyAbsSyn ) -> HappyWrap56
happyOut56 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut56 #-}
newtype HappyWrap57 = HappyWrap57 (Expr ())
happyIn57 :: (Expr ()) -> (HappyAbsSyn )
happyIn57 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap57 x)
{-# INLINE happyIn57 #-}
happyOut57 :: (HappyAbsSyn ) -> HappyWrap57
happyOut57 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut57 #-}
newtype HappyWrap58 = HappyWrap58 (Expr ())
happyIn58 :: (Expr ()) -> (HappyAbsSyn )
happyIn58 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap58 x)
{-# INLINE happyIn58 #-}
happyOut58 :: (HappyAbsSyn ) -> HappyWrap58
happyOut58 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut58 #-}
newtype HappyWrap59 = HappyWrap59 (Expr ())
happyIn59 :: (Expr ()) -> (HappyAbsSyn )
happyIn59 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap59 x)
{-# INLINE happyIn59 #-}
happyOut59 :: (HappyAbsSyn ) -> HappyWrap59
happyOut59 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut59 #-}
newtype HappyWrap60 = HappyWrap60 (Expr ())
happyIn60 :: (Expr ()) -> (HappyAbsSyn )
happyIn60 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap60 x)
{-# INLINE happyIn60 #-}
happyOut60 :: (HappyAbsSyn ) -> HappyWrap60
happyOut60 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut60 #-}
newtype HappyWrap61 = HappyWrap61 (Expr ())
happyIn61 :: (Expr ()) -> (HappyAbsSyn )
happyIn61 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap61 x)
{-# INLINE happyIn61 #-}
happyOut61 :: (HappyAbsSyn ) -> HappyWrap61
happyOut61 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut61 #-}
newtype HappyWrap62 = HappyWrap62 (Expr ())
happyIn62 :: (Expr ()) -> (HappyAbsSyn )
happyIn62 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap62 x)
{-# INLINE happyIn62 #-}
happyOut62 :: (HappyAbsSyn ) -> HappyWrap62
happyOut62 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut62 #-}
newtype HappyWrap63 = HappyWrap63 (Expr ())
happyIn63 :: (Expr ()) -> (HappyAbsSyn )
happyIn63 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap63 x)
{-# INLINE happyIn63 #-}
happyOut63 :: (HappyAbsSyn ) -> HappyWrap63
happyOut63 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut63 #-}
newtype HappyWrap64 = HappyWrap64 (Expr ())
happyIn64 :: (Expr ()) -> (HappyAbsSyn )
happyIn64 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap64 x)
{-# INLINE happyIn64 #-}
happyOut64 :: (HappyAbsSyn ) -> HappyWrap64
happyOut64 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut64 #-}
newtype HappyWrap65 = HappyWrap65 (Expr ())
happyIn65 :: (Expr ()) -> (HappyAbsSyn )
happyIn65 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap65 x)
{-# INLINE happyIn65 #-}
happyOut65 :: (HappyAbsSyn ) -> HappyWrap65
happyOut65 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut65 #-}
newtype HappyWrap66 = HappyWrap66 (RecordLabeled (Expr ()))
happyIn66 :: (RecordLabeled (Expr ())) -> (HappyAbsSyn )
happyIn66 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap66 x)
{-# INLINE happyIn66 #-}
happyOut66 :: (HappyAbsSyn ) -> HappyWrap66
happyOut66 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut66 #-}
newtype HappyWrap67 = HappyWrap67 (Either (RecordLabeled (Expr ())) (RecordUpdate ()))
happyIn67 :: (Either (RecordLabeled (Expr ())) (RecordUpdate ())) -> (HappyAbsSyn )
happyIn67 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap67 x)
{-# INLINE happyIn67 #-}
happyOut67 :: (HappyAbsSyn ) -> HappyWrap67
happyOut67 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut67 #-}
newtype HappyWrap68 = HappyWrap68 (RecordUpdate ())
happyIn68 :: (RecordUpdate ()) -> (HappyAbsSyn )
happyIn68 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap68 x)
{-# INLINE happyIn68 #-}
happyOut68 :: (HappyAbsSyn ) -> HappyWrap68
happyOut68 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut68 #-}
newtype HappyWrap69 = HappyWrap69 (LetBinding ())
happyIn69 :: (LetBinding ()) -> (HappyAbsSyn )
happyIn69 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap69 x)
{-# INLINE happyIn69 #-}
happyOut69 :: (HappyAbsSyn ) -> HappyWrap69
happyOut69 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut69 #-}
newtype HappyWrap70 = HappyWrap70 ((Separated (Binder ()), Guarded ()))
happyIn70 :: ((Separated (Binder ()), Guarded ())) -> (HappyAbsSyn )
happyIn70 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap70 x)
{-# INLINE happyIn70 #-}
happyOut70 :: (HappyAbsSyn ) -> HappyWrap70
happyOut70 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut70 #-}
newtype HappyWrap71 = HappyWrap71 (Guarded ())
happyIn71 :: (Guarded ()) -> (HappyAbsSyn )
happyIn71 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap71 x)
{-# INLINE happyIn71 #-}
happyOut71 :: (HappyAbsSyn ) -> HappyWrap71
happyOut71 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut71 #-}
newtype HappyWrap72 = HappyWrap72 (GuardedExpr ())
happyIn72 :: (GuardedExpr ()) -> (HappyAbsSyn )
happyIn72 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap72 x)
{-# INLINE happyIn72 #-}
happyOut72 :: (HappyAbsSyn ) -> HappyWrap72
happyOut72 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut72 #-}
newtype HappyWrap73 = HappyWrap73 (Guarded ())
happyIn73 :: (Guarded ()) -> (HappyAbsSyn )
happyIn73 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap73 x)
{-# INLINE happyIn73 #-}
happyOut73 :: (HappyAbsSyn ) -> HappyWrap73
happyOut73 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut73 #-}
newtype HappyWrap74 = HappyWrap74 (GuardedExpr ())
happyIn74 :: (GuardedExpr ()) -> (HappyAbsSyn )
happyIn74 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap74 x)
{-# INLINE happyIn74 #-}
happyOut74 :: (HappyAbsSyn ) -> HappyWrap74
happyOut74 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut74 #-}
newtype HappyWrap75 = HappyWrap75 (DoBlock ())
happyIn75 :: (DoBlock ()) -> (HappyAbsSyn )
happyIn75 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap75 x)
{-# INLINE happyIn75 #-}
happyOut75 :: (HappyAbsSyn ) -> HappyWrap75
happyOut75 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut75 #-}
newtype HappyWrap76 = HappyWrap76 ((SourceToken, [DoStatement ()]))
happyIn76 :: ((SourceToken, [DoStatement ()])) -> (HappyAbsSyn )
happyIn76 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap76 x)
{-# INLINE happyIn76 #-}
happyOut76 :: (HappyAbsSyn ) -> HappyWrap76
happyOut76 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut76 #-}
newtype HappyWrap77 = HappyWrap77 ([DoStatement ()])
happyIn77 :: ([DoStatement ()]) -> (HappyAbsSyn )
happyIn77 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap77 x)
{-# INLINE happyIn77 #-}
happyOut77 :: (HappyAbsSyn ) -> HappyWrap77
happyOut77 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut77 #-}
newtype HappyWrap78 = HappyWrap78 (Expr ())
happyIn78 :: (Expr ()) -> (HappyAbsSyn )
happyIn78 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap78 x)
{-# INLINE happyIn78 #-}
happyOut78 :: (HappyAbsSyn ) -> HappyWrap78
happyOut78 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut78 #-}
newtype HappyWrap79 = HappyWrap79 ([DoStatement ()])
happyIn79 :: ([DoStatement ()]) -> (HappyAbsSyn )
happyIn79 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap79 x)
{-# INLINE happyIn79 #-}
happyOut79 :: (HappyAbsSyn ) -> HappyWrap79
happyOut79 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut79 #-}
newtype HappyWrap80 = HappyWrap80 ((SourceToken, Separated (PatternGuard ())))
happyIn80 :: ((SourceToken, Separated (PatternGuard ()))) -> (HappyAbsSyn )
happyIn80 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap80 x)
{-# INLINE happyIn80 #-}
happyOut80 :: (HappyAbsSyn ) -> HappyWrap80
happyOut80 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut80 #-}
newtype HappyWrap81 = HappyWrap81 ((PatternGuard (), [(SourceToken, PatternGuard ())]))
happyIn81 :: ((PatternGuard (), [(SourceToken, PatternGuard ())])) -> (HappyAbsSyn )
happyIn81 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap81 x)
{-# INLINE happyIn81 #-}
happyOut81 :: (HappyAbsSyn ) -> HappyWrap81
happyOut81 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut81 #-}
newtype HappyWrap82 = HappyWrap82 (Expr())
happyIn82 :: (Expr()) -> (HappyAbsSyn )
happyIn82 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap82 x)
{-# INLINE happyIn82 #-}
happyOut82 :: (HappyAbsSyn ) -> HappyWrap82
happyOut82 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut82 #-}
newtype HappyWrap83 = HappyWrap83 ([(SourceToken, PatternGuard ())])
happyIn83 :: ([(SourceToken, PatternGuard ())]) -> (HappyAbsSyn )
happyIn83 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap83 x)
{-# INLINE happyIn83 #-}
happyOut83 :: (HappyAbsSyn ) -> HappyWrap83
happyOut83 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut83 #-}
newtype HappyWrap84 = HappyWrap84 ((Binder (), SourceToken))
happyIn84 :: ((Binder (), SourceToken)) -> (HappyAbsSyn )
happyIn84 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap84 x)
{-# INLINE happyIn84 #-}
happyOut84 :: (HappyAbsSyn ) -> HappyWrap84
happyOut84 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut84 #-}
newtype HappyWrap85 = HappyWrap85 (Binder ())
happyIn85 :: (Binder ()) -> (HappyAbsSyn )
happyIn85 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap85 x)
{-# INLINE happyIn85 #-}
happyOut85 :: (HappyAbsSyn ) -> HappyWrap85
happyOut85 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut85 #-}
newtype HappyWrap86 = HappyWrap86 (Binder ())
happyIn86 :: (Binder ()) -> (HappyAbsSyn )
happyIn86 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap86 x)
{-# INLINE happyIn86 #-}
happyOut86 :: (HappyAbsSyn ) -> HappyWrap86
happyOut86 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut86 #-}
newtype HappyWrap87 = HappyWrap87 (Binder ())
happyIn87 :: (Binder ()) -> (HappyAbsSyn )
happyIn87 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap87 x)
{-# INLINE happyIn87 #-}
happyOut87 :: (HappyAbsSyn ) -> HappyWrap87
happyOut87 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut87 #-}
newtype HappyWrap88 = HappyWrap88 (Binder ())
happyIn88 :: (Binder ()) -> (HappyAbsSyn )
happyIn88 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap88 x)
{-# INLINE happyIn88 #-}
happyOut88 :: (HappyAbsSyn ) -> HappyWrap88
happyOut88 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut88 #-}
newtype HappyWrap89 = HappyWrap89 (RecordLabeled (Binder ()))
happyIn89 :: (RecordLabeled (Binder ())) -> (HappyAbsSyn )
happyIn89 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap89 x)
{-# INLINE happyIn89 #-}
happyOut89 :: (HappyAbsSyn ) -> HappyWrap89
happyOut89 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut89 #-}
newtype HappyWrap90 = HappyWrap90 (Module ())
happyIn90 :: (Module ()) -> (HappyAbsSyn )
happyIn90 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap90 x)
{-# INLINE happyIn90 #-}
happyOut90 :: (HappyAbsSyn ) -> HappyWrap90
happyOut90 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut90 #-}
newtype HappyWrap91 = HappyWrap91 (([Declaration ()], [Comment LineFeed]))
happyIn91 :: (([Declaration ()], [Comment LineFeed])) -> (HappyAbsSyn )
happyIn91 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap91 x)
{-# INLINE happyIn91 #-}
happyOut91 :: (HappyAbsSyn ) -> HappyWrap91
happyOut91 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut91 #-}
newtype HappyWrap92 = HappyWrap92 ([ImportDecl ()])
happyIn92 :: ([ImportDecl ()]) -> (HappyAbsSyn )
happyIn92 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap92 x)
{-# INLINE happyIn92 #-}
happyOut92 :: (HappyAbsSyn ) -> HappyWrap92
happyOut92 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut92 #-}
newtype HappyWrap93 = HappyWrap93 ([ImportDecl ()])
happyIn93 :: ([ImportDecl ()]) -> (HappyAbsSyn )
happyIn93 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap93 x)
{-# INLINE happyIn93 #-}
happyOut93 :: (HappyAbsSyn ) -> HappyWrap93
happyOut93 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut93 #-}
newtype HappyWrap94 = HappyWrap94 (([ImportDecl ()], [Declaration ()]))
happyIn94 :: (([ImportDecl ()], [Declaration ()])) -> (HappyAbsSyn )
happyIn94 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap94 x)
{-# INLINE happyIn94 #-}
happyOut94 :: (HappyAbsSyn ) -> HappyWrap94
happyOut94 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut94 #-}
newtype HappyWrap95 = HappyWrap95 (TmpModuleDecl ())
happyIn95 :: (TmpModuleDecl ()) -> (HappyAbsSyn )
happyIn95 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap95 x)
{-# INLINE happyIn95 #-}
happyOut95 :: (HappyAbsSyn ) -> HappyWrap95
happyOut95 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut95 #-}
newtype HappyWrap96 = HappyWrap96 (SourceToken)
happyIn96 :: (SourceToken) -> (HappyAbsSyn )
happyIn96 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap96 x)
{-# INLINE happyIn96 #-}
happyOut96 :: (HappyAbsSyn ) -> HappyWrap96
happyOut96 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut96 #-}
newtype HappyWrap97 = HappyWrap97 (Maybe (DelimitedNonEmpty (Export ())))
happyIn97 :: (Maybe (DelimitedNonEmpty (Export ()))) -> (HappyAbsSyn )
happyIn97 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap97 x)
{-# INLINE happyIn97 #-}
happyOut97 :: (HappyAbsSyn ) -> HappyWrap97
happyOut97 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut97 #-}
newtype HappyWrap98 = HappyWrap98 (Export ())
happyIn98 :: (Export ()) -> (HappyAbsSyn )
happyIn98 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap98 x)
{-# INLINE happyIn98 #-}
happyOut98 :: (HappyAbsSyn ) -> HappyWrap98
happyOut98 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut98 #-}
newtype HappyWrap99 = HappyWrap99 ((DataMembers ()))
happyIn99 :: ((DataMembers ())) -> (HappyAbsSyn )
happyIn99 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap99 x)
{-# INLINE happyIn99 #-}
happyOut99 :: (HappyAbsSyn ) -> HappyWrap99
happyOut99 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut99 #-}
newtype HappyWrap100 = HappyWrap100 (ImportDecl ())
happyIn100 :: (ImportDecl ()) -> (HappyAbsSyn )
happyIn100 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap100 x)
{-# INLINE happyIn100 #-}
happyOut100 :: (HappyAbsSyn ) -> HappyWrap100
happyOut100 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut100 #-}
newtype HappyWrap101 = HappyWrap101 (Maybe (Maybe SourceToken, DelimitedNonEmpty (Import ())))
happyIn101 :: (Maybe (Maybe SourceToken, DelimitedNonEmpty (Import ()))) -> (HappyAbsSyn )
happyIn101 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap101 x)
{-# INLINE happyIn101 #-}
happyOut101 :: (HappyAbsSyn ) -> HappyWrap101
happyOut101 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut101 #-}
newtype HappyWrap102 = HappyWrap102 (Import ())
happyIn102 :: (Import ()) -> (HappyAbsSyn )
happyIn102 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap102 x)
{-# INLINE happyIn102 #-}
happyOut102 :: (HappyAbsSyn ) -> HappyWrap102
happyOut102 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut102 #-}
newtype HappyWrap103 = HappyWrap103 (Declaration ())
happyIn103 :: (Declaration ()) -> (HappyAbsSyn )
happyIn103 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap103 x)
{-# INLINE happyIn103 #-}
happyOut103 :: (HappyAbsSyn ) -> HappyWrap103
happyOut103 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut103 #-}
newtype HappyWrap104 = HappyWrap104 (DataHead ())
happyIn104 :: (DataHead ()) -> (HappyAbsSyn )
happyIn104 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap104 x)
{-# INLINE happyIn104 #-}
happyOut104 :: (HappyAbsSyn ) -> HappyWrap104
happyOut104 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut104 #-}
newtype HappyWrap105 = HappyWrap105 (DataHead ())
happyIn105 :: (DataHead ()) -> (HappyAbsSyn )
happyIn105 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap105 x)
{-# INLINE happyIn105 #-}
happyOut105 :: (HappyAbsSyn ) -> HappyWrap105
happyOut105 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut105 #-}
newtype HappyWrap106 = HappyWrap106 (DataHead ())
happyIn106 :: (DataHead ()) -> (HappyAbsSyn )
happyIn106 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap106 x)
{-# INLINE happyIn106 #-}
happyOut106 :: (HappyAbsSyn ) -> HappyWrap106
happyOut106 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut106 #-}
newtype HappyWrap107 = HappyWrap107 (DataCtor ())
happyIn107 :: (DataCtor ()) -> (HappyAbsSyn )
happyIn107 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap107 x)
{-# INLINE happyIn107 #-}
happyOut107 :: (HappyAbsSyn ) -> HappyWrap107
happyOut107 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut107 #-}
newtype HappyWrap108 = HappyWrap108 (Either (Declaration ()) (ClassHead ()))
happyIn108 :: (Either (Declaration ()) (ClassHead ())) -> (HappyAbsSyn )
happyIn108 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap108 x)
{-# INLINE happyIn108 #-}
happyOut108 :: (HappyAbsSyn ) -> HappyWrap108
happyOut108 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut108 #-}
newtype HappyWrap109 = HappyWrap109 (Labeled (Name (N.ProperName 'N.TypeName)) (Type ()))
happyIn109 :: (Labeled (Name (N.ProperName 'N.TypeName)) (Type ())) -> (HappyAbsSyn )
happyIn109 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap109 x)
{-# INLINE happyIn109 #-}
happyOut109 :: (HappyAbsSyn ) -> HappyWrap109
happyOut109 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut109 #-}
newtype HappyWrap110 = HappyWrap110 ((OneOrDelimited (Constraint ()), SourceToken))
happyIn110 :: ((OneOrDelimited (Constraint ()), SourceToken)) -> (HappyAbsSyn )
happyIn110 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap110 x)
{-# INLINE happyIn110 #-}
happyOut110 :: (HappyAbsSyn ) -> HappyWrap110
happyOut110 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut110 #-}
newtype HappyWrap111 = HappyWrap111 ((Name (N.ProperName 'N.ClassName), [TypeVarBinding ()], Maybe (SourceToken, Separated ClassFundep)))
happyIn111 :: ((Name (N.ProperName 'N.ClassName), [TypeVarBinding ()], Maybe (SourceToken, Separated ClassFundep))) -> (HappyAbsSyn )
happyIn111 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap111 x)
{-# INLINE happyIn111 #-}
happyOut111 :: (HappyAbsSyn ) -> HappyWrap111
happyOut111 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut111 #-}
newtype HappyWrap112 = HappyWrap112 (Maybe (SourceToken, Separated ClassFundep))
happyIn112 :: (Maybe (SourceToken, Separated ClassFundep)) -> (HappyAbsSyn )
happyIn112 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap112 x)
{-# INLINE happyIn112 #-}
happyOut112 :: (HappyAbsSyn ) -> HappyWrap112
happyOut112 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut112 #-}
newtype HappyWrap113 = HappyWrap113 (ClassFundep)
happyIn113 :: (ClassFundep) -> (HappyAbsSyn )
happyIn113 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap113 x)
{-# INLINE happyIn113 #-}
happyOut113 :: (HappyAbsSyn ) -> HappyWrap113
happyOut113 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut113 #-}
newtype HappyWrap114 = HappyWrap114 (Labeled (Name Ident) (Type ()))
happyIn114 :: (Labeled (Name Ident) (Type ())) -> (HappyAbsSyn )
happyIn114 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap114 x)
{-# INLINE happyIn114 #-}
happyOut114 :: (HappyAbsSyn ) -> HappyWrap114
happyOut114 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut114 #-}
newtype HappyWrap115 = HappyWrap115 (InstanceHead ())
happyIn115 :: (InstanceHead ()) -> (HappyAbsSyn )
happyIn115 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap115 x)
{-# INLINE happyIn115 #-}
happyOut115 :: (HappyAbsSyn ) -> HappyWrap115
happyOut115 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut115 #-}
newtype HappyWrap116 = HappyWrap116 (OneOrDelimited (Constraint ()))
happyIn116 :: (OneOrDelimited (Constraint ())) -> (HappyAbsSyn )
happyIn116 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap116 x)
{-# INLINE happyIn116 #-}
happyOut116 :: (HappyAbsSyn ) -> HappyWrap116
happyOut116 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut116 #-}
newtype HappyWrap117 = HappyWrap117 (Constraint ())
happyIn117 :: (Constraint ()) -> (HappyAbsSyn )
happyIn117 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap117 x)
{-# INLINE happyIn117 #-}
happyOut117 :: (HappyAbsSyn ) -> HappyWrap117
happyOut117 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut117 #-}
newtype HappyWrap118 = HappyWrap118 (InstanceBinding ())
happyIn118 :: (InstanceBinding ()) -> (HappyAbsSyn )
happyIn118 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap118 x)
{-# INLINE happyIn118 #-}
happyOut118 :: (HappyAbsSyn ) -> HappyWrap118
happyOut118 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut118 #-}
newtype HappyWrap119 = HappyWrap119 (FixityFields)
happyIn119 :: (FixityFields) -> (HappyAbsSyn )
happyIn119 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap119 x)
{-# INLINE happyIn119 #-}
happyOut119 :: (HappyAbsSyn ) -> HappyWrap119
happyOut119 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut119 #-}
newtype HappyWrap120 = HappyWrap120 ((SourceToken, Fixity))
happyIn120 :: ((SourceToken, Fixity)) -> (HappyAbsSyn )
happyIn120 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap120 x)
{-# INLINE happyIn120 #-}
happyOut120 :: (HappyAbsSyn ) -> HappyWrap120
happyOut120 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut120 #-}
newtype HappyWrap121 = HappyWrap121 (Role)
happyIn121 :: (Role) -> (HappyAbsSyn )
happyIn121 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap121 x)
{-# INLINE happyIn121 #-}
happyOut121 :: (HappyAbsSyn ) -> HappyWrap121
happyOut121 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut121 #-}
newtype HappyWrap122 = HappyWrap122 (ImportDecl ())
happyIn122 :: (ImportDecl ()) -> (HappyAbsSyn )
happyIn122 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap122 x)
{-# INLINE happyIn122 #-}
happyOut122 :: (HappyAbsSyn ) -> HappyWrap122
happyOut122 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut122 #-}
newtype HappyWrap123 = HappyWrap123 (Declaration ())
happyIn123 :: (Declaration ()) -> (HappyAbsSyn )
happyIn123 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap123 x)
{-# INLINE happyIn123 #-}
happyOut123 :: (HappyAbsSyn ) -> HappyWrap123
happyOut123 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut123 #-}
newtype HappyWrap124 = HappyWrap124 (Expr ())
happyIn124 :: (Expr ()) -> (HappyAbsSyn )
happyIn124 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap124 x)
{-# INLINE happyIn124 #-}
happyOut124 :: (HappyAbsSyn ) -> HappyWrap124
happyOut124 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut124 #-}
newtype HappyWrap125 = HappyWrap125 (Type ())
happyIn125 :: (Type ()) -> (HappyAbsSyn )
happyIn125 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap125 x)
{-# INLINE happyIn125 #-}
happyOut125 :: (HappyAbsSyn ) -> HappyWrap125
happyOut125 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut125 #-}
newtype HappyWrap126 = HappyWrap126 (Name N.ModuleName)
happyIn126 :: (Name N.ModuleName) -> (HappyAbsSyn )
happyIn126 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap126 x)
{-# INLINE happyIn126 #-}
happyOut126 :: (HappyAbsSyn ) -> HappyWrap126
happyOut126 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut126 #-}
newtype HappyWrap127 = HappyWrap127 (QualifiedName Ident)
happyIn127 :: (QualifiedName Ident) -> (HappyAbsSyn )
happyIn127 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap127 x)
{-# INLINE happyIn127 #-}
happyOut127 :: (HappyAbsSyn ) -> HappyWrap127
happyOut127 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut127 #-}
newtype HappyWrap128 = HappyWrap128 (Delimited (Binder ()))
happyIn128 :: (Delimited (Binder ())) -> (HappyAbsSyn )
happyIn128 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap128 x)
{-# INLINE happyIn128 #-}
happyOut128 :: (HappyAbsSyn ) -> HappyWrap128
happyOut128 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut128 #-}
newtype HappyWrap129 = HappyWrap129 (Delimited (Expr ()))
happyIn129 :: (Delimited (Expr ())) -> (HappyAbsSyn )
happyIn129 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap129 x)
{-# INLINE happyIn129 #-}
happyOut129 :: (HappyAbsSyn ) -> HappyWrap129
happyOut129 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut129 #-}
newtype HappyWrap130 = HappyWrap130 (Delimited (RecordLabeled (Binder ())))
happyIn130 :: (Delimited (RecordLabeled (Binder ()))) -> (HappyAbsSyn )
happyIn130 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap130 x)
{-# INLINE happyIn130 #-}
happyOut130 :: (HappyAbsSyn ) -> HappyWrap130
happyOut130 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut130 #-}
newtype HappyWrap131 = HappyWrap131 (Delimited (RecordLabeled (Expr ())))
happyIn131 :: (Delimited (RecordLabeled (Expr ()))) -> (HappyAbsSyn )
happyIn131 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap131 x)
{-# INLINE happyIn131 #-}
happyOut131 :: (HappyAbsSyn ) -> HappyWrap131
happyOut131 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut131 #-}
newtype HappyWrap132 = HappyWrap132 (NE.NonEmpty (Binder ()))
happyIn132 :: (NE.NonEmpty (Binder ())) -> (HappyAbsSyn )
happyIn132 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap132 x)
{-# INLINE happyIn132 #-}
happyOut132 :: (HappyAbsSyn ) -> HappyWrap132
happyOut132 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut132 #-}
newtype HappyWrap133 = HappyWrap133 (NE.NonEmpty (GuardedExpr ()))
happyIn133 :: (NE.NonEmpty (GuardedExpr ())) -> (HappyAbsSyn )
happyIn133 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap133 x)
{-# INLINE happyIn133 #-}
happyOut133 :: (HappyAbsSyn ) -> HappyWrap133
happyOut133 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut133 #-}
newtype HappyWrap134 = HappyWrap134 (NE.NonEmpty (GuardedExpr ()))
happyIn134 :: (NE.NonEmpty (GuardedExpr ())) -> (HappyAbsSyn )
happyIn134 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap134 x)
{-# INLINE happyIn134 #-}
happyOut134 :: (HappyAbsSyn ) -> HappyWrap134
happyOut134 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut134 #-}
newtype HappyWrap135 = HappyWrap135 (NE.NonEmpty (Name Ident))
happyIn135 :: (NE.NonEmpty (Name Ident)) -> (HappyAbsSyn )
happyIn135 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap135 x)
{-# INLINE happyIn135 #-}
happyOut135 :: (HappyAbsSyn ) -> HappyWrap135
happyOut135 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut135 #-}
newtype HappyWrap136 = HappyWrap136 (NE.NonEmpty (Role))
happyIn136 :: (NE.NonEmpty (Role)) -> (HappyAbsSyn )
happyIn136 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap136 x)
{-# INLINE happyIn136 #-}
happyOut136 :: (HappyAbsSyn ) -> HappyWrap136
happyOut136 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut136 #-}
newtype HappyWrap137 = HappyWrap137 (NE.NonEmpty (TypeVarBinding ()))
happyIn137 :: (NE.NonEmpty (TypeVarBinding ())) -> (HappyAbsSyn )
happyIn137 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap137 x)
{-# INLINE happyIn137 #-}
happyOut137 :: (HappyAbsSyn ) -> HappyWrap137
happyOut137 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut137 #-}
newtype HappyWrap138 = HappyWrap138 ([(Binder ())])
happyIn138 :: ([(Binder ())]) -> (HappyAbsSyn )
happyIn138 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap138 x)
{-# INLINE happyIn138 #-}
happyOut138 :: (HappyAbsSyn ) -> HappyWrap138
happyOut138 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut138 #-}
newtype HappyWrap139 = HappyWrap139 ([(Type ())])
happyIn139 :: ([(Type ())]) -> (HappyAbsSyn )
happyIn139 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap139 x)
{-# INLINE happyIn139 #-}
happyOut139 :: (HappyAbsSyn ) -> HappyWrap139
happyOut139 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut139 #-}
newtype HappyWrap140 = HappyWrap140 ([(TypeVarBinding ())])
happyIn140 :: ([(TypeVarBinding ())]) -> (HappyAbsSyn )
happyIn140 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap140 x)
{-# INLINE happyIn140 #-}
happyOut140 :: (HappyAbsSyn ) -> HappyWrap140
happyOut140 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut140 #-}
newtype HappyWrap141 = HappyWrap141 ([(TypeVarBinding ())])
happyIn141 :: ([(TypeVarBinding ())]) -> (HappyAbsSyn )
happyIn141 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap141 x)
{-# INLINE happyIn141 #-}
happyOut141 :: (HappyAbsSyn ) -> HappyWrap141
happyOut141 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut141 #-}
newtype HappyWrap142 = HappyWrap142 (NE.NonEmpty ((Separated (Binder ()), Guarded ())))
happyIn142 :: (NE.NonEmpty ((Separated (Binder ()), Guarded ()))) -> (HappyAbsSyn )
happyIn142 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap142 x)
{-# INLINE happyIn142 #-}
happyOut142 :: (HappyAbsSyn ) -> HappyWrap142
happyOut142 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut142 #-}
newtype HappyWrap143 = HappyWrap143 (NE.NonEmpty (Labeled (Name Ident) (Type ())))
happyIn143 :: (NE.NonEmpty (Labeled (Name Ident) (Type ()))) -> (HappyAbsSyn )
happyIn143 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap143 x)
{-# INLINE happyIn143 #-}
happyOut143 :: (HappyAbsSyn ) -> HappyWrap143
happyOut143 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut143 #-}
newtype HappyWrap144 = HappyWrap144 (NE.NonEmpty (InstanceBinding ()))
happyIn144 :: (NE.NonEmpty (InstanceBinding ())) -> (HappyAbsSyn )
happyIn144 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap144 x)
{-# INLINE happyIn144 #-}
happyOut144 :: (HappyAbsSyn ) -> HappyWrap144
happyOut144 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut144 #-}
newtype HappyWrap145 = HappyWrap145 (NE.NonEmpty (LetBinding ()))
happyIn145 :: (NE.NonEmpty (LetBinding ())) -> (HappyAbsSyn )
happyIn145 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap145 x)
{-# INLINE happyIn145 #-}
happyOut145 :: (HappyAbsSyn ) -> HappyWrap145
happyOut145 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut145 #-}
newtype HappyWrap146 = HappyWrap146 (NE.NonEmpty (TmpModuleDecl ()))
happyIn146 :: (NE.NonEmpty (TmpModuleDecl ())) -> (HappyAbsSyn )
happyIn146 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap146 x)
{-# INLINE happyIn146 #-}
happyOut146 :: (HappyAbsSyn ) -> HappyWrap146
happyOut146 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut146 #-}
newtype HappyWrap147 = HappyWrap147 (Separated (Binder ()))
happyIn147 :: (Separated (Binder ())) -> (HappyAbsSyn )
happyIn147 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap147 x)
{-# INLINE happyIn147 #-}
happyOut147 :: (HappyAbsSyn ) -> HappyWrap147
happyOut147 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut147 #-}
newtype HappyWrap148 = HappyWrap148 (Separated (Constraint ()))
happyIn148 :: (Separated (Constraint ())) -> (HappyAbsSyn )
happyIn148 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap148 x)
{-# INLINE happyIn148 #-}
happyOut148 :: (HappyAbsSyn ) -> HappyWrap148
happyOut148 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut148 #-}
newtype HappyWrap149 = HappyWrap149 (Separated (DataCtor ()))
happyIn149 :: (Separated (DataCtor ())) -> (HappyAbsSyn )
happyIn149 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap149 x)
{-# INLINE happyIn149 #-}
happyOut149 :: (HappyAbsSyn ) -> HappyWrap149
happyOut149 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut149 #-}
newtype HappyWrap150 = HappyWrap150 (Separated (Declaration ()))
happyIn150 :: (Separated (Declaration ())) -> (HappyAbsSyn )
happyIn150 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap150 x)
{-# INLINE happyIn150 #-}
happyOut150 :: (HappyAbsSyn ) -> HappyWrap150
happyOut150 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut150 #-}
newtype HappyWrap151 = HappyWrap151 (Separated (Export ()))
happyIn151 :: (Separated (Export ())) -> (HappyAbsSyn )
happyIn151 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap151 x)
{-# INLINE happyIn151 #-}
happyOut151 :: (HappyAbsSyn ) -> HappyWrap151
happyOut151 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut151 #-}
newtype HappyWrap152 = HappyWrap152 (Separated (Expr ()))
happyIn152 :: (Separated (Expr ())) -> (HappyAbsSyn )
happyIn152 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap152 x)
{-# INLINE happyIn152 #-}
happyOut152 :: (HappyAbsSyn ) -> HappyWrap152
happyOut152 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut152 #-}
newtype HappyWrap153 = HappyWrap153 (Separated (ClassFundep))
happyIn153 :: (Separated (ClassFundep)) -> (HappyAbsSyn )
happyIn153 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap153 x)
{-# INLINE happyIn153 #-}
happyOut153 :: (HappyAbsSyn ) -> HappyWrap153
happyOut153 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut153 #-}
newtype HappyWrap154 = HappyWrap154 (Separated (Import ()))
happyIn154 :: (Separated (Import ())) -> (HappyAbsSyn )
happyIn154 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap154 x)
{-# INLINE happyIn154 #-}
happyOut154 :: (HappyAbsSyn ) -> HappyWrap154
happyOut154 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut154 #-}
newtype HappyWrap155 = HappyWrap155 (Separated (Label))
happyIn155 :: (Separated (Label)) -> (HappyAbsSyn )
happyIn155 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap155 x)
{-# INLINE happyIn155 #-}
happyOut155 :: (HappyAbsSyn ) -> HappyWrap155
happyOut155 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut155 #-}
newtype HappyWrap156 = HappyWrap156 (Separated (ProperName))
happyIn156 :: (Separated (ProperName)) -> (HappyAbsSyn )
happyIn156 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap156 x)
{-# INLINE happyIn156 #-}
happyOut156 :: (HappyAbsSyn ) -> HappyWrap156
happyOut156 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut156 #-}
newtype HappyWrap157 = HappyWrap157 (Separated (RecordUpdate ()))
happyIn157 :: (Separated (RecordUpdate ())) -> (HappyAbsSyn )
happyIn157 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap157 x)
{-# INLINE happyIn157 #-}
happyOut157 :: (HappyAbsSyn ) -> HappyWrap157
happyOut157 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut157 #-}
newtype HappyWrap158 = HappyWrap158 (Separated (Either (RecordLabeled (Expr ())) (RecordUpdate ())))
happyIn158 :: (Separated (Either (RecordLabeled (Expr ())) (RecordUpdate ()))) -> (HappyAbsSyn )
happyIn158 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap158 x)
{-# INLINE happyIn158 #-}
happyOut158 :: (HappyAbsSyn ) -> HappyWrap158
happyOut158 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut158 #-}
newtype HappyWrap159 = HappyWrap159 (Separated (Labeled Label (Type ())))
happyIn159 :: (Separated (Labeled Label (Type ()))) -> (HappyAbsSyn )
happyIn159 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap159 x)
{-# INLINE happyIn159 #-}
happyOut159 :: (HappyAbsSyn ) -> HappyWrap159
happyOut159 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut159 #-}
newtype HappyWrap160 = HappyWrap160 (NE.NonEmpty (Type ()))
happyIn160 :: (NE.NonEmpty (Type ())) -> (HappyAbsSyn )
happyIn160 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap160 x)
{-# INLINE happyIn160 #-}
happyOut160 :: (HappyAbsSyn ) -> HappyWrap160
happyOut160 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut160 #-}
newtype HappyWrap161 = HappyWrap161 (NE.NonEmpty (TypeVarBinding ()))
happyIn161 :: (NE.NonEmpty (TypeVarBinding ())) -> (HappyAbsSyn )
happyIn161 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap161 x)
{-# INLINE happyIn161 #-}
happyOut161 :: (HappyAbsSyn ) -> HappyWrap161
happyOut161 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut161 #-}
newtype HappyWrap162 = HappyWrap162 (NE.NonEmpty (Binder ()))
happyIn162 :: (NE.NonEmpty (Binder ())) -> (HappyAbsSyn )
happyIn162 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap162 x)
{-# INLINE happyIn162 #-}
happyOut162 :: (HappyAbsSyn ) -> HappyWrap162
happyOut162 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut162 #-}
newtype HappyWrap163 = HappyWrap163 (NE.NonEmpty (GuardedExpr ()))
happyIn163 :: (NE.NonEmpty (GuardedExpr ())) -> (HappyAbsSyn )
happyIn163 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap163 x)
{-# INLINE happyIn163 #-}
happyOut163 :: (HappyAbsSyn ) -> HappyWrap163
happyOut163 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut163 #-}
newtype HappyWrap164 = HappyWrap164 (NE.NonEmpty (GuardedExpr ()))
happyIn164 :: (NE.NonEmpty (GuardedExpr ())) -> (HappyAbsSyn )
happyIn164 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap164 x)
{-# INLINE happyIn164 #-}
happyOut164 :: (HappyAbsSyn ) -> HappyWrap164
happyOut164 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut164 #-}
newtype HappyWrap165 = HappyWrap165 (NE.NonEmpty (Name Ident))
happyIn165 :: (NE.NonEmpty (Name Ident)) -> (HappyAbsSyn )
happyIn165 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap165 x)
{-# INLINE happyIn165 #-}
happyOut165 :: (HappyAbsSyn ) -> HappyWrap165
happyOut165 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut165 #-}
newtype HappyWrap166 = HappyWrap166 (NE.NonEmpty (Role))
happyIn166 :: (NE.NonEmpty (Role)) -> (HappyAbsSyn )
happyIn166 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap166 x)
{-# INLINE happyIn166 #-}
happyOut166 :: (HappyAbsSyn ) -> HappyWrap166
happyOut166 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut166 #-}
newtype HappyWrap167 = HappyWrap167 (NE.NonEmpty (TypeVarBinding ()))
happyIn167 :: (NE.NonEmpty (TypeVarBinding ())) -> (HappyAbsSyn )
happyIn167 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap167 x)
{-# INLINE happyIn167 #-}
happyOut167 :: (HappyAbsSyn ) -> HappyWrap167
happyOut167 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut167 #-}
newtype HappyWrap168 = HappyWrap168 (NE.NonEmpty ((Separated (Binder ()), Guarded ())))
happyIn168 :: (NE.NonEmpty ((Separated (Binder ()), Guarded ()))) -> (HappyAbsSyn )
happyIn168 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap168 x)
{-# INLINE happyIn168 #-}
happyOut168 :: (HappyAbsSyn ) -> HappyWrap168
happyOut168 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut168 #-}
newtype HappyWrap169 = HappyWrap169 (NE.NonEmpty (Labeled (Name Ident) (Type ())))
happyIn169 :: (NE.NonEmpty (Labeled (Name Ident) (Type ()))) -> (HappyAbsSyn )
happyIn169 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap169 x)
{-# INLINE happyIn169 #-}
happyOut169 :: (HappyAbsSyn ) -> HappyWrap169
happyOut169 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut169 #-}
newtype HappyWrap170 = HappyWrap170 (NE.NonEmpty (InstanceBinding ()))
happyIn170 :: (NE.NonEmpty (InstanceBinding ())) -> (HappyAbsSyn )
happyIn170 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap170 x)
{-# INLINE happyIn170 #-}
happyOut170 :: (HappyAbsSyn ) -> HappyWrap170
happyOut170 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut170 #-}
newtype HappyWrap171 = HappyWrap171 (NE.NonEmpty (LetBinding ()))
happyIn171 :: (NE.NonEmpty (LetBinding ())) -> (HappyAbsSyn )
happyIn171 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap171 x)
{-# INLINE happyIn171 #-}
happyOut171 :: (HappyAbsSyn ) -> HappyWrap171
happyOut171 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut171 #-}
newtype HappyWrap172 = HappyWrap172 (NE.NonEmpty (TmpModuleDecl ()))
happyIn172 :: (NE.NonEmpty (TmpModuleDecl ())) -> (HappyAbsSyn )
happyIn172 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap172 x)
{-# INLINE happyIn172 #-}
happyOut172 :: (HappyAbsSyn ) -> HappyWrap172
happyOut172 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut172 #-}
newtype HappyWrap173 = HappyWrap173 (Separated (Binder ()))
happyIn173 :: (Separated (Binder ())) -> (HappyAbsSyn )
happyIn173 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap173 x)
{-# INLINE happyIn173 #-}
happyOut173 :: (HappyAbsSyn ) -> HappyWrap173
happyOut173 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut173 #-}
newtype HappyWrap174 = HappyWrap174 (Separated (RecordLabeled (Binder ())))
happyIn174 :: (Separated (RecordLabeled (Binder ()))) -> (HappyAbsSyn )
happyIn174 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap174 x)
{-# INLINE happyIn174 #-}
happyOut174 :: (HappyAbsSyn ) -> HappyWrap174
happyOut174 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut174 #-}
newtype HappyWrap175 = HappyWrap175 (Separated (RecordLabeled (Expr ())))
happyIn175 :: (Separated (RecordLabeled (Expr ()))) -> (HappyAbsSyn )
happyIn175 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap175 x)
{-# INLINE happyIn175 #-}
happyOut175 :: (HappyAbsSyn ) -> HappyWrap175
happyOut175 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut175 #-}
newtype HappyWrap176 = HappyWrap176 ([(SourceToken, (Binder ()))])
happyIn176 :: ([(SourceToken, (Binder ()))]) -> (HappyAbsSyn )
happyIn176 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap176 x)
{-# INLINE happyIn176 #-}
happyOut176 :: (HappyAbsSyn ) -> HappyWrap176
happyOut176 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut176 #-}
newtype HappyWrap177 = HappyWrap177 ([(SourceToken, (Constraint ()))])
happyIn177 :: ([(SourceToken, (Constraint ()))]) -> (HappyAbsSyn )
happyIn177 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap177 x)
{-# INLINE happyIn177 #-}
happyOut177 :: (HappyAbsSyn ) -> HappyWrap177
happyOut177 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut177 #-}
newtype HappyWrap178 = HappyWrap178 ([(SourceToken, (DataCtor ()))])
happyIn178 :: ([(SourceToken, (DataCtor ()))]) -> (HappyAbsSyn )
happyIn178 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap178 x)
{-# INLINE happyIn178 #-}
happyOut178 :: (HappyAbsSyn ) -> HappyWrap178
happyOut178 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut178 #-}
newtype HappyWrap179 = HappyWrap179 ([(SourceToken, (Declaration ()))])
happyIn179 :: ([(SourceToken, (Declaration ()))]) -> (HappyAbsSyn )
happyIn179 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap179 x)
{-# INLINE happyIn179 #-}
happyOut179 :: (HappyAbsSyn ) -> HappyWrap179
happyOut179 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut179 #-}
newtype HappyWrap180 = HappyWrap180 ([(SourceToken, (Export ()))])
happyIn180 :: ([(SourceToken, (Export ()))]) -> (HappyAbsSyn )
happyIn180 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap180 x)
{-# INLINE happyIn180 #-}
happyOut180 :: (HappyAbsSyn ) -> HappyWrap180
happyOut180 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut180 #-}
newtype HappyWrap181 = HappyWrap181 ([(SourceToken, (Expr ()))])
happyIn181 :: ([(SourceToken, (Expr ()))]) -> (HappyAbsSyn )
happyIn181 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap181 x)
{-# INLINE happyIn181 #-}
happyOut181 :: (HappyAbsSyn ) -> HappyWrap181
happyOut181 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut181 #-}
newtype HappyWrap182 = HappyWrap182 ([(SourceToken, (ClassFundep))])
happyIn182 :: ([(SourceToken, (ClassFundep))]) -> (HappyAbsSyn )
happyIn182 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap182 x)
{-# INLINE happyIn182 #-}
happyOut182 :: (HappyAbsSyn ) -> HappyWrap182
happyOut182 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut182 #-}
newtype HappyWrap183 = HappyWrap183 ([(SourceToken, (Import ()))])
happyIn183 :: ([(SourceToken, (Import ()))]) -> (HappyAbsSyn )
happyIn183 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap183 x)
{-# INLINE happyIn183 #-}
happyOut183 :: (HappyAbsSyn ) -> HappyWrap183
happyOut183 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut183 #-}
newtype HappyWrap184 = HappyWrap184 ([(SourceToken, (Label))])
happyIn184 :: ([(SourceToken, (Label))]) -> (HappyAbsSyn )
happyIn184 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap184 x)
{-# INLINE happyIn184 #-}
happyOut184 :: (HappyAbsSyn ) -> HappyWrap184
happyOut184 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut184 #-}
newtype HappyWrap185 = HappyWrap185 ([(SourceToken, (ProperName))])
happyIn185 :: ([(SourceToken, (ProperName))]) -> (HappyAbsSyn )
happyIn185 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap185 x)
{-# INLINE happyIn185 #-}
happyOut185 :: (HappyAbsSyn ) -> HappyWrap185
happyOut185 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut185 #-}
newtype HappyWrap186 = HappyWrap186 ([(SourceToken, (RecordUpdate ()))])
happyIn186 :: ([(SourceToken, (RecordUpdate ()))]) -> (HappyAbsSyn )
happyIn186 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap186 x)
{-# INLINE happyIn186 #-}
happyOut186 :: (HappyAbsSyn ) -> HappyWrap186
happyOut186 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut186 #-}
newtype HappyWrap187 = HappyWrap187 ([(SourceToken, (Either (RecordLabeled (Expr ())) (RecordUpdate ())))])
happyIn187 :: ([(SourceToken, (Either (RecordLabeled (Expr ())) (RecordUpdate ())))]) -> (HappyAbsSyn )
happyIn187 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap187 x)
{-# INLINE happyIn187 #-}
happyOut187 :: (HappyAbsSyn ) -> HappyWrap187
happyOut187 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut187 #-}
newtype HappyWrap188 = HappyWrap188 ([(SourceToken, (Labeled Label (Type ())))])
happyIn188 :: ([(SourceToken, (Labeled Label (Type ())))]) -> (HappyAbsSyn )
happyIn188 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap188 x)
{-# INLINE happyIn188 #-}
happyOut188 :: (HappyAbsSyn ) -> HappyWrap188
happyOut188 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut188 #-}
newtype HappyWrap189 = HappyWrap189 (NE.NonEmpty (Type ()))
happyIn189 :: (NE.NonEmpty (Type ())) -> (HappyAbsSyn )
happyIn189 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap189 x)
{-# INLINE happyIn189 #-}
happyOut189 :: (HappyAbsSyn ) -> HappyWrap189
happyOut189 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut189 #-}
newtype HappyWrap190 = HappyWrap190 (NE.NonEmpty (TypeVarBinding ()))
happyIn190 :: (NE.NonEmpty (TypeVarBinding ())) -> (HappyAbsSyn )
happyIn190 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap190 x)
{-# INLINE happyIn190 #-}
happyOut190 :: (HappyAbsSyn ) -> HappyWrap190
happyOut190 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut190 #-}
newtype HappyWrap191 = HappyWrap191 ([(SourceToken, (Binder ()))])
happyIn191 :: ([(SourceToken, (Binder ()))]) -> (HappyAbsSyn )
happyIn191 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap191 x)
{-# INLINE happyIn191 #-}
happyOut191 :: (HappyAbsSyn ) -> HappyWrap191
happyOut191 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut191 #-}
newtype HappyWrap192 = HappyWrap192 ([(SourceToken, (RecordLabeled (Binder ())))])
happyIn192 :: ([(SourceToken, (RecordLabeled (Binder ())))]) -> (HappyAbsSyn )
happyIn192 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap192 x)
{-# INLINE happyIn192 #-}
happyOut192 :: (HappyAbsSyn ) -> HappyWrap192
happyOut192 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut192 #-}
newtype HappyWrap193 = HappyWrap193 ([(SourceToken, (RecordLabeled (Expr ())))])
happyIn193 :: ([(SourceToken, (RecordLabeled (Expr ())))]) -> (HappyAbsSyn )
happyIn193 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap193 x)
{-# INLINE happyIn193 #-}
happyOut193 :: (HappyAbsSyn ) -> HappyWrap193
happyOut193 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut193 #-}
happyInTok :: (SourceToken) -> (HappyAbsSyn )
happyInTok x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyInTok #-}
happyOutTok :: (HappyAbsSyn ) -> (SourceToken)
happyOutTok x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOutTok #-}


happyExpList :: HappyAddr
happyExpList = HappyA# "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0a\x00\xa0\x04\x2c\x00\x1b\xee\xe9\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa8\x00\x80\x3b\x8a\x82\x6c\xf1\xe7\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x02\xb0\x81\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x20\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x74\x70\x9e\x9b\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd0\xc1\x78\x6e\x22\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1d\x8c\xe7\x26\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2a\x00\xe0\x8e\xa2\x20\x5b\xfc\xf9\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x28\x00\x80\x12\xb0\x00\x6c\xb8\xa7\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x08\xc0\x06\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa0\x02\x00\xee\x28\x0a\xb2\xc5\x9f\x1f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2a\x00\xe0\x8e\xa2\x20\x5b\xfc\xf9\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x60\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa0\x02\x00\x4a\x20\x02\xb0\x85\x06\x1f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x03\x02\x00\x00\x00\x00\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x0a\x00\x08\x81\x08\xc0\x16\x1a\x7c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2a\x00\xa0\x04\x22\x00\x5b\x68\xf0\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\xf8\xdf\xff\xff\x27\x80\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa0\x06\x00\x4a\x20\x02\xb0\x85\x06\x1f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x14\x80\x00\x6c\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0a\x00\x20\x04\x20\x00\x1b\xee\xe9\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x60\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x08\x00\x00\x00\x00\x60\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa8\x00\x80\x3d\x8a\x82\x6c\xf1\xe7\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x0a\x00\xb8\xa3\x28\xc8\x16\x7f\x7e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\xfe\xf7\xff\xff\x09\x60\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa8\x01\x80\x3b\x8a\x82\x6c\xf1\xe7\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x0a\x00\x08\x81\x08\xc0\x16\x1a\x7c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2a\x00\xe0\x8e\xa2\x20\x5b\xfc\xf9\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x0a\x00\xb8\xa3\x28\xc8\x16\x7f\x7e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa0\x02\x00\xee\x28\x0a\xb2\xc5\x9f\x1f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0d\x08\x00\x00\x00\x00\x60\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x07\x08\x00\x00\x00\x00\x60\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0a\x00\x20\x04\x20\x00\x1b\xee\xe9\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x50\x00\x02\xb0\x81\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0a\x00\xa2\xfe\xff\xff\xff\xef\xe9\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\xf8\xdf\xff\xff\x27\x80\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa0\x02\x08\x42\x20\x02\xb0\x85\x06\x1f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x09\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x01\x08\xc0\x06\x1a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x60\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1d\x8c\xe7\x26\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd0\xc1\x79\x6e\x22\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x80\x00\x04\x20\x00\x1b\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x08\x40\x00\x02\xb0\x81\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x02\x00\x08\x01\x08\xc0\x86\x7b\x3a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x02\x02\xb0\x81\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x02\x10\x80\x00\x6c\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x02\xb0\x89\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa0\x00\x00\x4a\xc0\x02\xb0\xe1\x9e\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa0\x00\x00\x4a\xc0\x02\xb0\xe1\x9e\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x28\x00\x80\x12\xb0\x00\x6c\xb8\xa7\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x02\x80\xa8\xff\xff\xff\xff\x7b\x3a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\xfe\xf7\xff\xff\x09\x60\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x40\x01\x08\xc0\x06\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x20\x00\x1b\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x80\x00\x6c\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x02\x00\x28\x01\x08\xc0\x86\x7b\x3a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0a\x00\xa0\x04\x2c\x00\x1b\xee\xe9\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa0\x00\x00\x4a\xc0\x02\xb0\xe1\x9e\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x02\x00\x28\x01\x0b\xc0\x86\x7b\x3a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa8\x00\x80\x12\x88\x00\x6c\xa1\xc1\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa0\x02\x00\xee\x28\x0a\xb2\xc5\x9f\x1f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x02\x00\x28\x01\x0b\xc0\x86\x7b\x3a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2a\x00\xa0\x04\x22\x00\x5b\x68\xf0\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x50\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa8\x00\x80\x3b\x8a\x82\x6c\xf1\xe7\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\x7f\xff\xff\x9f\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x80\xff\xfd\xff\x7f\x02\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x28\x00\x80\x10\x80\x00\x6c\xb8\xa7\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa0\x02\x00\xee\x28\x0a\xb2\xc5\x9f\x1f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x02\x00\x28\x01\x0b\xc0\x86\x7b\x3a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0a\x00\x20\x04\x20\x00\x1b\xee\xe9\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x0a\x00\x28\x81\x08\xc0\x16\x1a\x7c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0a\x00\xa0\x04\x2c\x00\x1b\xee\xe9\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa0\x02\x00\x42\x20\x02\xb0\x85\x06\x1f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\xff\xfd\xff\x7f\x02\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa8\x00\x80\x12\x88\x00\x6c\xa1\xc1\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa0\x02\x00\x4a\x20\x02\xb0\x85\x06\x1f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x0a\x00\x28\x81\x08\xc0\x16\x1a\x7c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x40\x00\x02\xb0\x81\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x80\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x11\x02\x00\x00\x00\x00\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x40\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\x7f\xff\xff\x9f\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2a\x00\xe0\x8e\xa2\x20\x5b\xfc\xf9\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa8\x00\x80\x3b\x8a\x82\x6c\xf1\xe7\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x0a\x00\xb8\xa3\x28\xc8\x16\x7f\x7e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa8\x00\x80\x3b\x8a\x82\x6c\xf1\xe7\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x0a\x00\xb8\xa3\x28\xc8\x16\x7f\x7e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2a\x80\x23\x05\x22\x00\x5b\x68\xf0\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x15\x08\x00\x00\x00\x00\x60\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x50\x80\x00\x6d\xb2\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x20\x00\x1b\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa0\x00\x00\x4a\xc0\x02\xb0\xe1\x9e\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0a\x00\xa0\x04\x2c\x00\x1b\xee\xe9\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\xff\xfd\xff\x7f\x02\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0a\x00\xa0\x04\x2c\x00\x1b\xee\xe9\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa0\x00\x00\x4a\xc0\x02\xb0\xe1\x9e\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa8\x00\x80\x3b\x8a\x82\x6c\xf1\xe7\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x02\x00\x08\x01\x08\xc0\x86\x7b\x3a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0a\x00\x20\x04\x20\x00\x1b\xee\xe9\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x80\x00\x6c\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x02\xb0\x81\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x40\x00\x02\xb0\x81\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x08\xc0\x06\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0a\x00\xa0\x04\x2c\x00\x1b\xee\xe9\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x60\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x80\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0a\x00\xa0\x04\x2c\x00\x1b\xee\xe9\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x02\x00\x28\x01\x0b\xc0\x86\x7b\x3a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x50\x80\x00\x6c\xb2\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x01\x02\xb0\xc9\x0a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa0\x00\x00\x42\x00\x02\xb0\xe1\x9e\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0a\x00\x20\x04\x20\x00\x1b\xee\xe9\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa0\x00\x00\x4a\xc0\x02\xb0\xe1\x9e\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x20\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x50\x80\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa8\x00\x82\x10\x88\x00\x6c\xa1\xc1\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x0a\x00\xb8\xa3\x28\xc8\x16\x7f\x7e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x28\x00\x80\x12\xb0\x00\x6c\xb8\xa7\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa0\x00\x00\x4a\xc0\x02\xb0\xe1\x9e\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x21\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa0\x02\x00\x4a\x20\x02\xb0\x85\x06\x1f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2a\x00\xe0\x8e\xa2\x20\x5b\xfc\xf9\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x30\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x02\x00\x28\x01\x0b\xc0\x86\x7b\x3a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa8\x00\x80\x12\x88\x00\x6c\xa1\xc1\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\xff\xfd\xff\x7f\x02\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfe\xf7\xff\xff\x09\x60\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\x7f\xff\xff\x9f\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x0a\x00\xb8\xa3\x28\xc8\x16\x7f\x7e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2a\x00\xe0\x8e\xa2\x20\x5b\xfc\xf9\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa8\x00\x80\x3b\x8a\x82\x6c\xf1\xe7\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa0\x02\x00\xee\x28\x0a\xb2\xc5\x9f\x1f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x20\x00\x1b\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x02\xb0\x81\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x04\x20\x00\x1b\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x02\xb0\x81\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x08\x00\x00\x00\x00\x60\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x09\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x0a\x00\xb8\xa3\x28\xc8\x16\x7f\x7e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x0a\x00\xb8\xa3\x28\xc8\x16\x7f\x7e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x50\x80\x00\x6d\xb2\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x02\x00\x28\x01\x0b\xc0\x86\x7b\x3a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x80\x00\x6c\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x02\x00\x28\x01\x0b\xc0\x86\x7b\x3a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x20\x00\x1b\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x30\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x02\x00\x28\x01\x0b\xc0\x86\x7b\x3a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x08\x00\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x02\x00\x28\x01\x0b\xc0\x86\x7b\x3a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x28\x00\x80\x12\xb0\x00\x6c\xb8\xa7\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x50\x80\x00\x6c\xb2\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x02\x00\x08\x01\x08\xc0\x86\x7b\x3a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2a\x00\xa0\x04\x22\x00\x5b\x68\xf0\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa8\x00\x80\x12\x88\x00\x6c\xa1\xc1\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa0\x02\x00\x4a\x20\x02\xb0\x85\x06\x1f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa8\x04\x80\x3b\x8a\x82\x6c\xf1\xe7\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\xff\xfd\xff\x7f\x02\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf8\xdf\xff\xff\x27\x80\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa0\x02\x00\xee\x28\x0a\xb2\xc5\x9f\x1f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa8\x00\x80\x3b\x8a\x82\x6c\xf1\xe7\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x0a\x00\xb8\xa3\x28\xc8\x16\x7f\x7e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa8\x00\x80\x3b\x8a\x82\x6c\xf1\xe7\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x82\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x50\x80\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"#

{-# NOINLINE happyExpListPerState #-}
happyExpListPerState st =
    token_strs_expected
  where token_strs = ["error","%dummy","%start_parseType","%start_parseExpr","%start_parseIdent","%start_parseOperator","%start_parseModuleBody","%start_parseDecl","%start_parseImportDeclP","%start_parseDeclP","%start_parseExprP","%start_parseTypeP","%start_parseModuleNameP","%start_parseQualIdentP","%start_parseModuleHeader","%start_parseDoStatement","%start_parseDoExpr","%start_parseDoNext","%start_parseGuardExpr","%start_parseGuardNext","%start_parseGuardStatement","%start_parseClassSignature","%start_parseClassSuper","%start_parseClassNameAndFundeps","%start_parseBinderAndArrow","moduleName","qualProperName","properName","qualIdent","ident","qualOp","op","qualSymbol","symbol","label","hole","string","char","number","int","boolean","type","type1","type2","type3","type4","type5","typeAtom","typeKindedAtom","row","rowLabel","typeVarBinding","typeVarBindingPlain","forall","exprWhere","expr","expr1","expr2","exprBacktick","expr3","expr4","expr5","expr6","expr7","exprAtom","recordLabel","recordUpdateOrLabel","recordUpdate","letBinding","caseBranch","guardedDecl","guardedDeclExpr","guardedCase","guardedCaseExpr","doBlock","adoBlock","doStatement","doExpr","doNext","guard","guardStatement","guardExpr","guardNext","binderAndArrow","binder","binder1","binder2","binderAtom","recordBinder","moduleHeader","moduleBody","moduleImports","importDecls","moduleDecls","moduleDecl","declElse","exports","export","dataMembers","importDecl","imports","import","decl","dataHead","typeHead","newtypeHead","dataCtor","classHead","classSignature","classSuper","classNameAndFundeps","fundeps","fundep","classMember","instHead","constraints","constraint","instBinding","fixity","infix","role","importDeclP","declP","exprP","typeP","moduleNameP","qualIdentP","delim__'['__binder__','__']'__","delim__'['__expr__','__']'__","delim__'{'__recordBinder__','__'}'__","delim__'{'__recordLabel__','__'}'__","many__binderAtom__","many__guardedCaseExpr__","many__guardedDeclExpr__","many__ident__","many__role__","many__typeVarBinding__","manyOrEmpty__binderAtom__","manyOrEmpty__typeAtom__","manyOrEmpty__typeVarBinding__","manyOrEmpty__typeVarBindingPlain__","manySep__caseBranch__'\\;'__","manySep__classMember__'\\;'__","manySep__instBinding__'\\;'__","manySep__letBinding__'\\;'__","manySep__moduleDecl__'\\;'__","sep__binder1__','__","sep__constraint__','__","sep__dataCtor__'|'__","sep__decl__declElse__","sep__export__','__","sep__expr__','__","sep__fundep__','__","sep__import__','__","sep__label__'.'__","sep__properName__','__","sep__recordUpdate__','__","sep__recordUpdateOrLabel__','__","sep__rowLabel__','__","many__typeAtom__","many__typeVarBindingPlain__","many1__binderAtom__","many1__guardedCaseExpr__","many1__guardedDeclExpr__","many1__ident__","many1__role__","many1__typeVarBinding__","manySep1__caseBranch__'\\;'__","manySep1__classMember__'\\;'__","manySep1__instBinding__'\\;'__","manySep1__letBinding__'\\;'__","manySep1__moduleDecl__'\\;'__","sep__binder__','__","sep__recordBinder__','__","sep__recordLabel__','__","sep1__binder1__','__","sep1__constraint__','__","sep1__dataCtor__'|'__","sep1__decl__declElse__","sep1__export__','__","sep1__expr__','__","sep1__fundep__','__","sep1__import__','__","sep1__label__'.'__","sep1__properName__','__","sep1__recordUpdate__','__","sep1__recordUpdateOrLabel__','__","sep1__rowLabel__','__","many1__typeAtom__","many1__typeVarBindingPlain__","sep1__binder__','__","sep1__recordBinder__','__","sep1__recordLabel__','__","'('","')'","'{'","'}'","'['","']'","'\\{'","'\\}'","'\\;'","'<-'","'->'","'<='","'=>'","':'","'::'","'='","'|'","'`'","'.'","','","'_'","'\\\\'","'-'","'@'","'ado'","'as'","'case'","'class'","'data'","'derive'","'do'","'else'","'false'","'forall'","'forallu'","'foreign'","'hiding'","'import'","'if'","'in'","'infix'","'infixl'","'infixr'","'instance'","'let'","'module'","'newtype'","'nominal'","'phantom'","'of'","'representational'","'role'","'then'","'true'","'type'","'where'","'(->)'","'(..)'","LOWER","QUAL_LOWER","UPPER","QUAL_UPPER","SYMBOL","QUAL_SYMBOL","OPERATOR","QUAL_OPERATOR","LIT_HOLE","LIT_CHAR","LIT_STRING","LIT_RAW_STRING","LIT_INT","LIT_NUMBER","%eof"]
        bit_start = st Prelude.* 266
        bit_end = (st Prelude.+ 1) Prelude.* 266
        read_bit = readArrayBit happyExpList
        bits = Prelude.map read_bit [bit_start..bit_end Prelude.- 1]
        bits_indexed = Prelude.zip bits [0..265]
        token_strs_expected = Prelude.concatMap f bits_indexed
        f (Prelude.False, _) = []
        f (Prelude.True, nr) = [token_strs Prelude.!! nr]

happyActOffsets :: HappyAddr
happyActOffsets = HappyA# "\x29\x10\xfb\x0d\xd2\x0e\x77\x01\xda\x11\xf6\x11\x4f\x00\xf6\x11\xfb\x0d\x29\x10\xad\x00\x3e\x0d\x8a\x00\x0a\x01\xfb\x0d\x8c\x01\xfb\x0d\x27\x01\x00\x00\x1b\x01\xd9\x00\x1b\x01\xab\x0e\xa5\x01\x00\x00\x00\x00\x03\x0d\x00\x00\x00\x00\x00\x00\x00\x00\xc9\x01\xc5\x01\xe1\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4b\x0d\xab\x0e\xab\x10\x77\x0e\x00\x00\xb3\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x9a\x0c\xee\x01\x00\x00\x7a\x10\xee\x01\xe9\x01\x00\x00\xff\x00\xf9\x01\x11\x02\x11\x02\x11\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xb7\x02\x77\x0a\x00\x00\xc1\x0a\x00\x00\x00\x00\x0b\x0b\x13\x02\x00\x00\x00\x02\x2a\x02\x00\x00\x00\x00\xfb\x0d\xe0\x10\x7f\x0d\x00\x00\xaf\x0f\xfb\x0d\x2d\x02\x00\x00\xfb\x0d\x34\x02\x00\x00\xfb\x0d\x39\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x51\x02\x00\x00\x00\x00\x00\x00\x55\x0b\x51\x02\x51\x02\x53\x02\x71\x02\xcf\x01\x00\x00\x71\x02\x00\x00\x71\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe3\x09\x00\x00\x05\x09\x4f\x09\xbb\x08\x00\x00\x9a\x0c\x71\x02\xe8\x0f\x71\x11\x00\x00\x31\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x84\x02\xdf\x0e\x00\x00\x77\x02\x78\x02\x7d\x02\x58\x02\x5c\x02\x00\x00\x50\x02\x9c\x02\x00\x00\x63\x02\xa2\x00\x88\x02\x00\x00\x00\x00\x00\x00\x5b\x02\x66\x02\xd3\x01\x00\x00\xaa\x02\xcf\x01\x67\x02\x67\x02\xa9\x02\x00\x00\x00\x00\x94\x01\x00\x00\x00\x00\xac\x02\x92\x02\x6b\x02\x00\x00\x00\x00\x00\x00\x00\x00\x6b\x02\x6b\x02\x6b\x02\xf6\x11\xb0\x02\xda\x11\x00\x00\xae\x00\xa8\x05\x7e\x02\x45\x10\x7a\x10\xae\x02\xb1\x02\x8a\x05\x00\x00\x94\x02\x4d\x11\xbe\x11\xba\x02\xbb\x02\x89\x02\x29\x10\x89\x02\x00\x00\x2e\x02\x29\x10\x00\x00\xc2\x02\xc6\x02\x62\x02\xc7\x02\xc8\x02\x29\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xcf\x02\xd2\x02\xd3\x02\xd6\x02\xeb\x02\xe0\x02\xf0\x02\xe8\x0f\x71\x11\xe2\x02\xe7\x02\xee\x02\xf1\x02\xf3\x02\xf6\x02\xf7\x02\x07\x03\x09\x03\x0a\x03\x14\x03\x00\x00\x00\x00\x11\x03\x9e\x0e\x04\x04\xd2\x0e\x00\x00\x5d\x10\x29\x10\x00\x00\x29\x10\x00\x00\x00\x00\x00\x00\x00\x00\x29\x10\x24\x03\x13\x0f\xfb\x0d\x29\x10\x13\x0f\xf2\x02\x00\x00\x5b\x01\xf4\x02\x15\x03\x20\x03\x00\x00\x25\x03\x2b\x03\x00\x00\x1c\x00\x9b\x01\x31\x03\x23\x03\x00\x00\x3a\x03\xfb\x0d\x9f\x11\x15\x11\x00\x00\x7a\x10\xfb\x0d\x29\x10\x12\x01\x3c\x03\x2f\x03\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7d\x0c\x00\x00\x33\x03\x00\x00\x4b\x01\x40\x03\x34\x03\x00\x00\x68\x01\xaf\x01\x3e\x03\x36\x03\x00\x00\x49\x03\x00\x00\x13\x0f\x29\x10\x00\x00\xaf\x0f\x00\x00\x00\x00\x00\x00\x00\x00\x9f\x11\x00\x00\x13\x0f\x13\x0f\x13\x0f\x00\x00\x00\x00\xba\x0c\x00\x00\x4a\x03\xff\x00\x00\x00\x00\x00\x00\x00\x78\x03\x00\x00\x00\x00\x1b\x02\xd2\x01\x4e\x03\x39\x03\x00\x00\x2d\x0a\x00\x00\x3b\x03\x00\x00\x00\x00\x9f\x11\x00\x00\xfb\x0d\xfb\x0d\x00\x00\xfb\x0d\x00\x00\xfb\x0d\x4c\x03\xfb\x0d\x43\x0e\x00\x00\x57\x01\x52\x03\x4b\x03\x00\x00\x9f\x0b\x54\x03\x26\x03\x32\x0e\x00\x00\x00\x00\x00\x00\x99\x09\x00\x00\x50\x03\xd2\x0e\x00\x00\x29\x10\x59\x03\x5e\x03\x5b\x03\x5f\x03\x00\x00\x29\x10\x00\x00\x00\x00\x9f\x11\x29\x10\x00\x00\x29\x10\x00\x00\x00\x00\x00\x00\x62\x03\x00\x00\x1c\x02\xfb\x0d\x00\x00\x7a\x10\xbf\x02\x00\x00\x5d\x03\x00\x00\x7a\x10\xd2\x0e\xd2\x0e\x5a\x03\x5c\x03\x06\x02\x00\x00\x00\x00\x00\x00\x00\x00\xc7\x0c\xd2\x0e\x29\x10\x00\x00\x6b\x03\x3f\x03\x06\x02\x11\x01\x71\x03\x00\x00\x29\x10\x6e\x02\x00\x00\x29\x10\x68\x03\x39\x11\x84\x03\x00\x00\x00\x00\x00\x00\x39\x11\x8e\x00\x00\x00\x00\x00\x60\x01\x85\x03\x75\x03\x4f\x03\x92\x01\x00\x00\x00\x00\x0c\x02\x00\x00\x00\x00\x00\x00\xc4\x02\x00\x00\x00\x00\x00\x00\x00\x00\x7a\x10\x7b\x03\x7a\x10\x7e\x03\x29\x10\x00\x00\x7f\x03\x00\x00\x76\x03\x77\x01\x77\x01\x47\x0f\x00\x00\x89\x03\x8a\x03\x88\x03\x00\x00\x97\x03\x91\x03\x00\x00\x63\x03\x00\x00\x00\x00\xe9\x0b\x00\x00\xfb\x0d\x00\x00\x00\x00\x00\x00\xa6\x03\x9a\x03\x29\x10\x9b\x03\x9e\x03\x00\x00\xa0\x03\x29\x10\x8e\x00\x00\x00\x00\x00\xbc\x01\xae\x03\x9f\x03\x81\x03\x0c\x02\x92\x01\xb4\x03\x00\x00\x7b\x0f\x94\x03\xfb\x0d\x00\x00\x48\x02\x29\x10\xa4\x03\x7b\x0f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x9f\x11\x9f\x11\x00\x00\x9f\x11\xfb\x0d\xfb\x0d\xfb\x0d\xfb\x0d\x00\x00\x00\x00\xcc\x00\xbd\x03\x00\x00\x92\x03\xb5\x03\xd2\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xba\x0c\x00\x00\xd2\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x5a\x00\xd6\x01\xc7\x03\xbb\x03\x00\x00\x00\x00\x00\x00\x98\x0c\xc8\x03\x07\x02\xc9\x03\xbf\x03\xfb\x0d\x00\x00\x00\x00\x00\x00\xfb\x0d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x32\x0e\x00\x00\x00\x00\x7e\x00\x00\x00\xcf\x03\x29\x10\xd2\x03\x00\x00\x00\x00\xce\x03\x00\x00\xd2\x0e\x00\x00\x29\x10\xd2\x0e\x00\x00\x48\x02\x29\x10\x00\x00\x00\x00\x77\x01\x29\x10\x00\x00\x29\x10\x00\x00\x23\x02\xca\x03\x00\x00\x00\x00\x00\x00\x00\x00\x39\x11\x00\x00\x00\x00\xd6\x03\x00\x00\x00\x00\x7a\x10\x00\x00\xd7\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7b\x0f\xcc\x03\xdb\x03\x00\x00\xcb\x01\xde\x03\xcd\x03\x00\x00\x00\x00\x00\x00\xbc\x03\x00\x00\x00\x00\x7b\x0f\x7b\x0f\x00\x00\x00\x00\xd8\x03\x00\x00\x33\x0c\x51\x00\xc7\x0d\x00\x00\x9f\x11\x00\x00\x9f\x11\xfb\x0d\x00\x00\x00\x00\x00\x00\xe1\x03\x00\x00\x00\x00\xfb\x0d\x00\x00\xfb\x0d\x00\x00\xfb\x0d\x00\x00\x51\x00\xb7\x02\x7a\x02\xab\x03\x00\x00\x00\x00\xdf\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"#

happyGotoOffsets :: HappyAddr
happyGotoOffsets = HappyA# "\x2b\x12\x65\x05\xe5\x03\xeb\x03\x6d\x01\x05\x02\x0d\x00\x32\x01\xe3\x03\x87\x08\x0f\x00\x03\x00\xb3\x03\xb8\x03\x0c\x04\xc0\x03\x8e\x05\xbe\x03\xc1\x03\x39\x00\x63\x00\x57\x00\x99\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xef\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x96\x01\xab\x02\xfa\xff\x01\x00\x00\x00\xe9\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xb8\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf4\x03\x00\x00\x00\x00\x7a\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc8\x05\xfb\xff\x0e\x01\x00\x00\x74\x03\x17\x08\x00\x00\x00\x00\x37\x01\x00\x00\x00\x00\xf1\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf4\x03\x00\x00\x00\x00\x00\x00\x00\x00\xfa\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf6\x03\x00\x00\xaa\x03\x00\x00\x54\x00\x00\x00\xdb\x00\x0c\x00\x00\x00\xf1\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2e\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfd\x03\x00\x00\x00\x00\xfb\x03\xb7\x03\x00\x00\x00\x00\x00\x00\x00\x00\x7b\x00\x02\x04\x0a\x04\x00\x00\x00\x00\x0e\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xcb\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2c\x02\x00\x00\x8e\x01\x00\x00\xd4\x03\xfd\xff\x10\x04\x04\x00\x12\x00\x00\x00\x00\x00\x16\x04\x00\x00\xc4\x03\x06\x00\x86\x01\x00\x00\x00\x00\x1e\x04\x41\x12\x86\x00\x00\x00\x1a\x01\x57\x12\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x6d\x12\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf4\x00\x3c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x6b\x00\x1d\x04\x1f\x04\x00\x00\x15\x0d\x25\x14\x00\x00\x3b\x14\x00\x00\x00\x00\x00\x00\x00\x00\x83\x12\xdd\x03\xf5\x01\xdd\x07\x99\x12\x0a\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1a\x06\x26\x00\x29\x00\x00\x00\x5d\x0d\x06\x08\xaf\x12\x00\x00\x00\x00\x00\x00\x11\x00\x00\x00\x00\x00\x00\x00\x00\x00\xcd\x0d\x00\x00\xd0\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x64\x03\xc5\x12\x00\x00\x98\x03\x00\x00\x00\x00\x00\x00\x00\x00\x95\x00\x00\x00\xce\x02\xdf\x02\xef\x02\x00\x00\x00\x00\x07\x00\x00\x00\x00\x00\x75\x00\x00\x00\x00\x00\x00\x00\x20\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x88\x01\x00\x00\x43\x06\x6c\x06\x00\x00\x95\x06\x00\x00\xbe\x06\x00\x00\xe7\x06\x41\x02\x00\x00\x22\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x91\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x24\x04\x00\x00\x51\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xdb\x12\x00\x00\x00\x00\xdb\x01\xf1\x12\x00\x00\x07\x13\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0b\x02\x46\x04\x00\x00\x2a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x8c\x0e\x25\x00\xc3\x00\x00\x00\x00\x00\x21\x04\x00\x00\x00\x00\x00\x00\x00\x00\x56\x00\x29\x04\x1d\x13\x00\x00\x00\x00\x34\x04\x38\x04\x65\x00\x00\x00\x00\x00\x33\x13\xc1\x00\x00\x00\x49\x13\x00\x00\x5d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x76\x00\xf2\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x3a\x04\x32\x04\x00\x00\x00\x00\x41\x04\x00\x00\x00\x00\x00\x00\xe4\x03\x00\x00\x00\x00\x00\x00\x00\x00\x2c\x00\x00\x00\x40\x00\x00\x00\x5f\x13\x00\x00\x00\x00\x00\x00\x00\x00\x3c\x04\x3e\x04\x57\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x46\x00\x00\x00\x00\x00\x00\x00\x00\x00\x6f\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x75\x13\x00\x00\x00\x00\x00\x00\x00\x00\x8b\x13\xff\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x44\x04\x4b\x04\x47\x04\x00\x00\x00\x00\x03\x03\x00\x00\x98\x04\x00\x00\x1c\x01\xa1\x13\x00\x00\x6f\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x45\x04\xf3\x00\x00\x00\x19\x00\x10\x07\x39\x07\x40\x08\x51\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x50\x04\x00\x00\x4d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x6e\x00\x00\x00\x5c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x51\x04\x00\x00\x3c\x01\x00\x00\x00\x00\x62\x07\x00\x00\x00\x00\x00\x00\x8b\x07\x00\x00\x28\x02\x00\x00\x00\x00\x00\x00\x62\x01\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\xb7\x13\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x23\x00\x00\x00\xcd\x13\x49\x00\x00\x00\x1e\x01\xe3\x13\x00\x00\x00\x00\x52\x04\xf9\x13\x00\x00\x0f\x14\x00\x00\x56\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x21\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x45\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2b\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x04\x00\x00\x00\x00\x13\x03\xb5\x01\x00\x00\x00\x00\x00\x00\x00\x00\xf2\x00\x98\x01\xc1\x04\x00\x00\xfa\x00\x00\x00\x81\x00\xb4\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x04\x00\x00\x13\x05\x00\x00\x3c\x05\x00\x00\xe4\x01\x55\x04\x00\x00\x59\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"#

happyAdjustOffset :: Happy_GHC_Exts.Int# -> Happy_GHC_Exts.Int#
happyAdjustOffset off = off

happyDefActions :: HappyAddr
happyDefActions = HappyA# "\x00\x00\x00\x00\x00\x00\x00\x00\x06\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2b\xff\x00\x00\x00\x00\x00\x00\x23\xff\x26\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe8\xff\x18\xff\x1a\xff\x15\xff\x16\xff\x14\xff\x17\xff\x00\x00\x00\x00\x21\xff\x1f\xff\x87\xfe\x13\xff\x12\xff\x1d\xff\xa9\xfe\x00\x00\x00\x00\x00\x00\x1b\xff\x00\x00\xda\xff\x9c\xff\xd9\xff\xd7\xff\xd5\xff\xd6\xff\xd8\xff\x9d\xff\xdb\xff\xe6\xff\xe5\xff\xa1\xff\xa3\xff\xa2\xff\xa0\xff\x9f\xff\x9f\xfe\x00\x00\xe4\xff\xa1\xfe\x00\x00\x00\x00\xc6\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x24\xff\x4c\xff\x4d\xff\x4b\xff\x4e\xff\x48\xff\x49\xff\x47\xff\x4a\xff\x25\xff\x68\xff\x66\xff\x62\xff\x60\xff\x5d\xff\x54\xff\x51\xff\x5b\xff\x00\x00\x00\x00\x46\xff\x45\xff\x00\x00\x00\x00\x00\x00\x4f\xff\x00\x00\x00\x00\x00\x00\xe1\xff\x00\x00\x00\x00\xe0\xff\x00\x00\x00\x00\xde\xff\xdc\xff\xdd\xff\xdf\xff\xc9\xff\xe3\xff\xe2\xff\xcb\xff\xca\xff\xa4\xff\x00\x00\x28\xff\x29\xff\x2a\xff\x6a\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xb2\xfe\x00\x00\xb3\xfe\x00\x00\xe7\xff\x8c\xff\x8d\xff\x8b\xff\x88\xff\x8a\xff\x89\xff\xb4\xfe\x9b\xff\x99\xff\x97\xff\x94\xff\x92\xff\x90\xff\x00\x00\x00\x00\x79\xff\x79\xff\x8e\xff\x00\x00\x6e\xff\x6d\xff\x87\xff\x9e\xff\xb5\xfe\x00\x00\xa3\xfe\xb6\xfe\xea\xfe\x00\x00\x00\x00\xe6\xfe\xe4\xfe\xdb\xfe\x00\x00\x00\x00\xd3\xfe\x00\x00\x00\x00\x00\x00\xbd\xfe\xbc\xfe\xbb\xfe\x00\x00\x00\x00\x00\x00\xb7\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x73\xfe\x05\xff\x68\xfe\x07\xff\x04\xff\x97\xfe\x93\xfe\x00\x00\xce\xff\xcc\xff\xcd\xff\xcf\xff\x00\x00\x00\x00\x00\x00\x00\x00\x03\xff\x00\x00\x0c\xff\xf3\xfe\x9d\xfe\x00\x00\x9d\xfe\xa1\xfe\x00\x00\x00\x00\x00\x00\xdf\xfe\x00\x00\x9d\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa2\xfe\x00\x00\x00\x00\x91\xff\x00\x00\x00\x00\x56\xfe\x77\xff\x8a\xfe\x00\x00\xc3\xff\xc2\xff\xc1\xff\xc0\xff\xbf\xff\xbe\xff\xbd\xff\xbc\xff\xbb\xff\xba\xff\xb9\xff\xb8\xff\xb7\xff\xb6\xff\xb5\xff\xb4\xff\xb3\xff\xb2\xff\xb1\xff\xb0\xff\xaf\xff\xae\xff\xad\xff\xab\xff\xac\xff\xaa\xff\xa9\xff\xa8\xff\xa7\xff\xa6\xff\xa5\xff\xc6\xff\xc5\xff\xc4\xff\x8c\xff\x8b\xff\x88\xff\x89\xff\x00\x00\x00\x00\x00\x00\x79\xff\x79\xff\x8e\xff\xda\xff\x6e\xff\xd9\xff\xd7\xff\xd5\xff\xd6\xff\xd8\xff\xdb\xff\xa3\xff\xa2\xff\x74\xff\x7d\xfe\x00\x00\xa4\xfe\x00\x00\x00\x00\x8f\xff\x00\x00\x00\x00\xd2\xff\x00\x00\xd0\xff\xd1\xff\xd4\xff\xd3\xff\x00\x00\x01\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2f\xff\x64\xfe\x00\x00\x91\xfe\x2d\xff\x61\xff\x00\x00\x00\x00\xaf\xfe\x43\xff\x4c\xfe\x00\x00\x6f\xfe\xab\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x5f\xff\x00\x00\x00\x00\x00\x00\x6c\xfe\x00\x00\x95\xfe\x00\x00\xd1\xfe\x54\xfe\xc4\xfe\xa0\xfe\x89\xfe\x9e\xfe\xcf\xfe\x1c\xff\x50\xfe\x00\x00\x71\xfe\xb1\xfe\x10\xff\x4e\xfe\x00\x00\x70\xfe\xad\xfe\x00\x00\x86\xfe\x00\x00\x00\x00\x22\xff\x00\x00\x19\xff\x20\xff\x1e\xff\x11\xff\x00\x00\xac\xfe\x00\x00\x00\x00\x00\x00\xb0\xfe\xd0\xfe\x00\x00\x53\xfe\x00\x00\x00\x00\xc5\xfe\xc3\xfe\xd2\xfe\x00\x00\x64\xff\x5e\xff\x3f\xff\x58\xfe\x00\x00\x8b\xfe\x53\xff\x5e\xfe\x50\xff\x8e\xfe\x5a\xff\x44\xff\x00\x00\xaa\xfe\x00\x00\x00\x00\xae\xfe\x00\x00\x2e\xff\x00\x00\x00\x00\x00\x00\x1a\xff\x75\xfe\x00\x00\x00\x00\x98\xfe\x69\xff\x67\xff\x00\x00\x00\x00\x00\x00\x9a\xff\x95\xff\x96\xff\x93\xff\x73\xff\x00\x00\x00\x00\x7c\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x85\xff\x00\x00\x84\xff\x78\xff\x00\x00\x00\x00\x86\xff\x00\x00\xdd\xfe\xdc\xfe\x83\xfe\x00\x00\x34\xff\xa7\xfe\x00\x00\x27\xff\xa1\xfe\x6a\xfe\xe9\xfe\x94\xfe\xe8\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x70\xff\x52\xfe\xd7\xfe\x9c\xfe\x88\xfe\x00\x00\x00\x00\xde\xfe\x00\x00\x00\x00\x00\x00\x00\x00\xc9\xfe\xd5\xfe\x00\x00\x00\x00\xd6\xfe\x00\x00\xf5\xfe\x00\x00\x00\x00\x72\xfe\x02\xff\x67\xfe\x00\x00\xee\xfe\xf0\xfe\xef\xfe\x60\xfe\x00\x00\x8f\xfe\x00\x00\x00\x00\xc7\xff\xc8\xff\x00\x00\xe0\xfe\x7f\xfe\xd8\xfe\xa5\xfe\xba\xfe\xb8\xfe\xb9\xfe\xe1\xfe\xa1\xfe\x00\x00\xa1\xfe\x00\x00\x00\x00\xe2\xfe\x00\x00\x51\xfe\x00\x00\x00\x00\x00\x00\xa3\xfe\x77\xfe\x00\x00\x99\xfe\x00\x00\x79\xfe\x00\x00\x9a\xfe\xe7\xfe\x00\x00\xd4\xfe\x35\xff\x6c\xff\x82\xfe\x00\x00\x75\xff\x76\xff\x55\xfe\x00\x00\x85\xff\x00\x00\x84\xff\x86\xff\x98\xff\x00\x00\x00\x00\xfd\xfe\xff\xfe\xfe\xfe\x66\xfe\x00\x00\x92\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x2c\xff\x00\x00\x00\x00\x00\x00\x39\xff\x00\x00\x00\x00\x00\x00\x00\x00\x63\xfe\x59\xff\x42\xff\x41\xff\x4b\xfe\x00\x00\x00\x00\x52\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x6b\xfe\x81\xfe\x62\xfe\x00\x00\xce\xfe\xa6\xfe\x90\xfe\x00\x00\x4f\xfe\x0f\xff\x0e\xff\x4d\xfe\xcd\xfe\x00\x00\x80\xfe\x00\x00\x65\xff\x63\xff\x3e\xff\x40\xff\x00\x00\x5a\xfe\x00\x00\x8c\xfe\x57\xfe\x5d\xfe\x7b\xfe\x6e\xfe\x00\x00\x00\x00\x9b\xfe\x96\xfe\x00\x00\x3a\xff\x38\xff\x37\xff\x00\x00\x74\xfe\x08\xff\xfb\xfe\xf9\xfe\xfa\xfe\x00\x00\x00\xff\xfc\xfe\x00\x00\xf8\xfe\x00\x00\x00\x00\x00\x00\x83\xff\x33\xff\x00\x00\x69\xfe\x00\x00\xe5\xfe\x00\x00\x00\x00\xe3\xfe\x00\x00\x00\x00\xbf\xfe\xc0\xfe\x00\x00\x00\x00\xda\xfe\x00\x00\xca\xfe\x00\x00\xc7\xfe\x7e\xfe\xf4\xfe\xec\xfe\xeb\xfe\x00\x00\xf2\xfe\xed\xfe\x00\x00\xf1\xfe\x5f\xfe\xa1\xfe\xd9\xfe\x00\x00\xbe\xfe\xc2\xfe\xc1\xfe\x76\xfe\xcb\xfe\x78\xfe\x00\x00\x83\xff\x00\x00\x72\xff\x5c\xfe\x00\x00\x8d\xfe\xf7\xfe\x65\xfe\x0d\xff\x0a\xff\x58\xff\x5c\xff\x00\x00\x00\x00\x36\xff\x85\xfe\x00\x00\x31\xff\xa8\xfe\x00\x00\x00\x00\x57\xff\x00\x00\x3d\xff\x00\x00\x00\x00\xcc\xfe\x61\xfe\x3c\xff\x00\x00\x59\xfe\x32\xff\x00\x00\x55\xff\x00\x00\x84\xfe\x00\x00\x7a\xfe\x00\x00\x6d\xfe\x00\x00\x00\x00\xf6\xfe\x71\xff\x00\x00\x6f\xff\xc8\xfe\x6b\xff\x5b\xfe\x0b\xff\x09\xff\x30\xff\x56\xff\x3b\xff"#

happyCheck :: HappyAddr
happyCheck = HappyA# "\xff\xff\x04\x00\x01\x00\x09\x00\x09\x00\x04\x00\x03\x00\x02\x00\x04\x00\x01\x00\x04\x00\x04\x00\x0b\x00\x0c\x00\x0d\x00\x00\x00\x0f\x00\x01\x00\x01\x00\x01\x00\x04\x00\x09\x00\x04\x00\x07\x00\x1b\x00\x07\x00\x0a\x00\x0b\x00\x0a\x00\x0b\x00\x0e\x00\x1b\x00\x0e\x00\x1b\x00\x09\x00\x28\x00\x18\x00\x19\x00\x16\x00\x04\x00\x16\x00\x04\x00\x0e\x00\x01\x00\x10\x00\x01\x00\x04\x00\x09\x00\x04\x00\x07\x00\x09\x00\x07\x00\x0a\x00\x0b\x00\x0a\x00\x0b\x00\x0e\x00\x3f\x00\x0e\x00\x02\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x16\x00\x01\x00\x16\x00\x2a\x00\x04\x00\x09\x00\x01\x00\x07\x00\x02\x00\x04\x00\x0a\x00\x0b\x00\x07\x00\x04\x00\x0e\x00\x0a\x00\x0b\x00\x04\x00\x29\x00\x0e\x00\x18\x00\x19\x00\x16\x00\x4a\x00\x04\x00\x02\x00\x04\x00\x16\x00\x0b\x00\x03\x00\x57\x00\x02\x00\x04\x00\x04\x00\x11\x00\x5b\x00\x01\x00\x08\x00\x01\x00\x66\x00\x65\x00\x68\x00\x10\x00\x6a\x00\x5b\x00\x60\x00\x1a\x00\x04\x00\x73\x00\x1b\x00\x04\x00\x64\x00\x6d\x00\x26\x00\x01\x00\x73\x00\x02\x00\x73\x00\x04\x00\x58\x00\x01\x00\x58\x00\x08\x00\x04\x00\x02\x00\x71\x00\x7a\x00\x71\x00\x87\x00\x1a\x00\x7f\x00\x82\x00\x02\x00\x88\x00\x09\x00\x87\x00\x53\x00\x87\x00\x94\x00\x01\x00\x95\x00\x85\x00\x8b\x00\x02\x00\x93\x00\x04\x00\x86\x00\x51\x00\x86\x00\x08\x00\x75\x00\x71\x00\x83\x00\x71\x00\x09\x00\x97\x00\xa6\x00\xa4\x00\xa7\x00\x9c\x00\x9f\x00\x5c\x00\xa5\x00\x81\x00\xa4\x00\x4c\x00\xa4\x00\x2a\x00\x55\x00\x84\x00\xa2\x00\x01\x00\x86\x00\x71\x00\x86\x00\xa3\x00\x8f\x00\xa3\x00\x71\x00\x54\x00\x2e\x00\xa0\x00\x6d\x00\x3d\x00\x04\x00\x5a\x00\x5b\x00\x5a\x00\x5b\x00\x85\x00\x4c\x00\x6f\x00\x9e\x00\x57\x00\x86\x00\x04\x00\x3a\x00\x6d\x00\xa1\x00\x86\x00\x00\x00\xa3\x00\x2c\x00\xa3\x00\x5b\x00\x2f\x00\x1a\x00\x25\x00\x3f\x00\x5a\x00\x5b\x00\x51\x00\x8b\x00\x48\x00\x01\x00\x6d\x00\x01\x00\x80\x00\xa2\x00\x04\x00\x14\x00\x8d\x00\x07\x00\xa3\x00\x09\x00\x0a\x00\x0b\x00\x8b\x00\xa3\x00\x0e\x00\x3d\x00\x3e\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x01\x00\x80\x00\x1c\x00\x04\x00\x8b\x00\x9d\x00\x07\x00\x09\x00\x09\x00\x0a\x00\x0b\x00\x01\x00\x7b\x00\x0e\x00\x09\x00\x83\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x7d\x00\x01\x00\x1c\x00\x03\x00\x01\x00\x9d\x00\x02\x00\x07\x00\x3d\x00\x3e\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\x29\x00\x0f\x00\x98\x00\x5c\x00\x5f\x00\xa0\x00\x30\x00\x02\x00\x2a\x00\x04\x00\x14\x00\x6f\x00\x36\x00\x08\x00\x72\x00\x9a\x00\x1e\x00\x1f\x00\x20\x00\x6e\x00\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x04\x00\x2d\x00\x01\x00\x76\x00\x03\x00\x14\x00\x3d\x00\x3e\x00\x07\x00\x31\x00\x32\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\x8d\x00\x0f\x00\x2d\x00\x2e\x00\x2d\x00\x2e\x00\x2d\x00\x2e\x00\x8c\x00\x3d\x00\x3e\x00\x36\x00\x06\x00\x36\x00\x90\x00\x36\x00\x1e\x00\x1f\x00\x20\x00\x3d\x00\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x14\x00\x85\x00\x06\x00\x02\x00\x0c\x00\x02\x00\x0e\x00\x04\x00\x10\x00\x31\x00\x32\x00\x08\x00\x2f\x00\x30\x00\x4c\x00\x17\x00\x14\x00\x01\x00\x04\x00\x36\x00\x04\x00\x14\x00\x67\x00\x0e\x00\x69\x00\x10\x00\x85\x00\x0b\x00\x0c\x00\x0d\x00\xa2\x00\x0f\x00\x4d\x00\x4e\x00\x4f\x00\x50\x00\x0c\x00\x52\x00\x0e\x00\x6c\x00\x01\x00\x6c\x00\x03\x00\x6c\x00\x59\x00\x7e\x00\x32\x00\x17\x00\x5d\x00\x5e\x00\x09\x00\x04\x00\x61\x00\x08\x00\x09\x00\xa2\x00\x01\x00\x41\x00\x42\x00\x04\x00\x2c\x00\x08\x00\x09\x00\x67\x00\x04\x00\x69\x00\x0b\x00\x0c\x00\x0d\x00\x8a\x00\x0f\x00\x8a\x00\x6b\x00\x8a\x00\x9b\x00\x48\x00\x3c\x00\x3d\x00\x3e\x00\x41\x00\x14\x00\x28\x00\x44\x00\x45\x00\x04\x00\x20\x00\x7e\x00\x01\x00\x4a\x00\x41\x00\x04\x00\x4d\x00\x4e\x00\x4f\x00\x50\x00\x02\x00\x52\x00\x0b\x00\x0c\x00\x0d\x00\x14\x00\x0f\x00\x89\x00\x59\x00\x2f\x00\x30\x00\x00\x00\x5d\x00\x5e\x00\x3a\x00\x02\x00\x36\x00\x0a\x00\x14\x00\x3f\x00\x9b\x00\x45\x00\x3e\x00\x66\x00\x04\x00\x68\x00\x4a\x00\x6a\x00\x04\x00\x4d\x00\x4e\x00\x4f\x00\x50\x00\x14\x00\x52\x00\x2c\x00\x3d\x00\x74\x00\x09\x00\x78\x00\x14\x00\x59\x00\x79\x00\x7c\x00\x14\x00\x5d\x00\x5e\x00\x0c\x00\x00\x00\x0e\x00\x0f\x00\x3c\x00\x3d\x00\x3e\x00\x19\x00\x0c\x00\x01\x00\x88\x00\x17\x00\x04\x00\x47\x00\x48\x00\x66\x00\x8e\x00\x68\x00\x92\x00\x0b\x00\x0c\x00\x0d\x00\x6b\x00\x0f\x00\x96\x00\x99\x00\x34\x00\x0f\x00\x04\x00\x7c\x00\x01\x00\x3d\x00\x3e\x00\x04\x00\x08\x00\x3d\x00\x00\x00\x0b\x00\x2f\x00\x30\x00\x0b\x00\x0c\x00\x0d\x00\x11\x00\x0f\x00\x36\x00\x66\x00\x00\x00\x68\x00\x03\x00\x6a\x00\x2b\x00\x89\x00\x41\x00\x42\x00\x08\x00\x09\x00\x13\x00\x99\x00\x28\x00\x0e\x00\x00\x00\x10\x00\x01\x00\x11\x00\x79\x00\x04\x00\x04\x00\x3c\x00\x3d\x00\x3e\x00\x07\x00\x2b\x00\x0b\x00\x0c\x00\x0d\x00\x2e\x00\x0f\x00\x07\x00\x20\x00\x88\x00\x10\x00\x11\x00\x07\x00\x36\x00\x01\x00\x3d\x00\x3e\x00\x04\x00\x3c\x00\x3d\x00\x3e\x00\x3d\x00\x3e\x00\x96\x00\x0b\x00\x0c\x00\x0d\x00\x6b\x00\x0f\x00\x00\x00\x4d\x00\x4e\x00\x4f\x00\x50\x00\x2b\x00\x52\x00\x10\x00\x11\x00\x07\x00\x66\x00\x01\x00\x68\x00\x59\x00\x6a\x00\x3d\x00\x3e\x00\x5d\x00\x5e\x00\x02\x00\x49\x00\x04\x00\x3c\x00\x3d\x00\x3e\x00\x42\x00\x43\x00\x77\x00\x89\x00\x2d\x00\x2e\x00\x66\x00\x00\x00\x68\x00\x11\x00\x6a\x00\x1a\x00\x14\x00\x36\x00\x47\x00\x4d\x00\x4e\x00\x4f\x00\x50\x00\x88\x00\x52\x00\x3e\x00\x25\x00\x77\x00\x08\x00\x09\x00\x00\x00\x59\x00\x91\x00\x10\x00\x10\x00\x5d\x00\x5e\x00\x30\x00\x31\x00\x10\x00\x33\x00\x34\x00\x38\x00\x66\x00\x88\x00\x68\x00\x38\x00\x6a\x00\x3b\x00\x47\x00\x3d\x00\x3e\x00\x01\x00\x91\x00\x00\x00\x04\x00\x30\x00\x31\x00\x3d\x00\x33\x00\x77\x00\x3d\x00\x0b\x00\x0c\x00\x0d\x00\x66\x00\x0f\x00\x68\x00\x00\x00\x6a\x00\x01\x00\x6c\x00\x26\x00\x04\x00\x49\x00\x08\x00\x20\x00\x88\x00\x49\x00\x09\x00\x0b\x00\x0c\x00\x0d\x00\x09\x00\x0f\x00\x3d\x00\x91\x00\x0f\x00\x0d\x00\x00\x00\x2c\x00\x07\x00\x07\x00\x0c\x00\x00\x00\x0e\x00\x3d\x00\x08\x00\x09\x00\x88\x00\x04\x00\x8a\x00\x08\x00\x09\x00\x17\x00\x01\x00\x11\x00\x0f\x00\x04\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x11\x00\x0b\x00\x0c\x00\x0d\x00\x14\x00\x0f\x00\x0f\x00\x20\x00\x01\x00\x0f\x00\x0f\x00\x04\x00\x20\x00\x0f\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x0b\x00\x0c\x00\x0d\x00\x02\x00\x0f\x00\x0f\x00\x01\x00\x0f\x00\x02\x00\x04\x00\x30\x00\x31\x00\x0f\x00\x33\x00\x41\x00\x42\x00\x0b\x00\x0c\x00\x0d\x00\x0f\x00\x0f\x00\x66\x00\x0f\x00\x68\x00\x0f\x00\x6a\x00\x01\x00\x0f\x00\x0f\x00\x04\x00\x49\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x49\x00\x0b\x00\x0c\x00\x0d\x00\x66\x00\x0f\x00\x68\x00\x01\x00\x6a\x00\x0f\x00\x04\x00\x0f\x00\x0f\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x0b\x00\x0c\x00\x0d\x00\x88\x00\x0f\x00\x0f\x00\x13\x00\x01\x00\x32\x00\x35\x00\x08\x00\x14\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x2b\x00\x01\x00\x0b\x00\x06\x00\x04\x00\x88\x00\x66\x00\x04\x00\x68\x00\x14\x00\x6a\x00\x0b\x00\x0c\x00\x0d\x00\x02\x00\x0f\x00\x02\x00\x3c\x00\x3d\x00\x3e\x00\x04\x00\x14\x00\x11\x00\x66\x00\x06\x00\x68\x00\x14\x00\x6a\x00\x14\x00\x02\x00\x02\x00\x14\x00\x13\x00\x3c\x00\x3d\x00\x3e\x00\x04\x00\x07\x00\x09\x00\x66\x00\x88\x00\x68\x00\x01\x00\x6a\x00\x08\x00\x04\x00\x08\x00\x04\x00\x38\x00\x0f\x00\x02\x00\x02\x00\x0b\x00\x0c\x00\x0d\x00\x01\x00\x0f\x00\x88\x00\x04\x00\x66\x00\x0f\x00\x68\x00\x3e\x00\x6a\x00\x11\x00\x0b\x00\x0c\x00\x0d\x00\x10\x00\x0f\x00\x1a\x00\x01\x00\x1a\x00\x88\x00\x04\x00\x66\x00\x0f\x00\x68\x00\x3d\x00\x6a\x00\x0d\x00\x0b\x00\x0c\x00\x0d\x00\x1a\x00\x0f\x00\x0c\x00\x01\x00\x0e\x00\x02\x00\x0d\x00\x14\x00\x12\x00\x88\x00\x3d\x00\x0f\x00\x0f\x00\x17\x00\x1a\x00\x08\x00\x00\x00\x09\x00\x66\x00\x3e\x00\x68\x00\x0f\x00\x6a\x00\x01\x00\x09\x00\x88\x00\x04\x00\x0b\x00\x70\x00\x08\x00\x3d\x00\x3d\x00\x3e\x00\x0b\x00\x0c\x00\x0d\x00\x14\x00\x0f\x00\x02\x00\x0f\x00\x0f\x00\x01\x00\x1a\x00\x0f\x00\x04\x00\x0f\x00\x02\x00\x07\x00\x3e\x00\x14\x00\x0a\x00\x0b\x00\x88\x00\x25\x00\x0e\x00\x41\x00\x42\x00\x07\x00\x28\x00\x66\x00\x3d\x00\x68\x00\x16\x00\x6a\x00\x30\x00\x31\x00\x20\x00\x33\x00\x34\x00\x70\x00\x0b\x00\x14\x00\x66\x00\x04\x00\x68\x00\x3b\x00\x6a\x00\x14\x00\x08\x00\x02\x00\x09\x00\x14\x00\x02\x00\x07\x00\x3e\x00\x0d\x00\x02\x00\x02\x00\x66\x00\x0f\x00\x68\x00\x02\x00\x6a\x00\x88\x00\x02\x00\x14\x00\x26\x00\x0b\x00\x01\x00\x04\x00\x03\x00\x08\x00\x3d\x00\x04\x00\x07\x00\x33\x00\x88\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\x06\x00\x0f\x00\x40\x00\x05\x00\x35\x00\x0d\x00\x39\x00\x37\x00\x05\x00\x00\x00\x05\x00\x88\x00\x02\x00\x66\x00\x0e\x00\x68\x00\x1e\x00\x1f\x00\x20\x00\x02\x00\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x0e\x00\x02\x00\x01\x00\x00\x00\x03\x00\x59\x00\x46\x00\x02\x00\x07\x00\x31\x00\x32\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\x04\x00\x0f\x00\x18\x00\x59\x00\x1a\x00\x4b\x00\x02\x00\x04\x00\x01\x00\x04\x00\x47\x00\x05\x00\x56\x00\x05\x00\x04\x00\x25\x00\x1e\x00\x1f\x00\x20\x00\x04\x00\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x30\x00\x31\x00\x02\x00\x33\x00\x34\x00\x01\x00\x08\x00\x49\x00\x02\x00\x31\x00\x32\x00\x3b\x00\x34\x00\x00\x00\x06\x00\x5f\x00\x06\x00\x62\x00\x02\x00\x01\x00\x49\x00\x03\x00\x67\x00\x00\x00\x69\x00\x07\x00\x09\x00\x08\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\x04\x00\x0f\x00\x05\x00\x01\x00\x06\x00\x4a\x00\x05\x00\x02\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1d\x00\x1e\x00\x1f\x00\x20\x00\xff\xff\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\xff\xff\xff\xff\x01\x00\xff\xff\x03\x00\x67\x00\xff\xff\x69\x00\x07\x00\x31\x00\x32\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\xff\xff\x0f\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1d\x00\x1e\x00\x1f\x00\x20\x00\xff\xff\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\xff\xff\xff\xff\x01\x00\xff\xff\x03\x00\xff\xff\xff\xff\xff\xff\x07\x00\x31\x00\x32\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\xff\xff\x0f\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x67\x00\xff\xff\x69\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1d\x00\x1e\x00\x1f\x00\x20\x00\xff\xff\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\xff\xff\xff\xff\x01\x00\xff\xff\x03\x00\xff\xff\xff\xff\xff\xff\x07\x00\x31\x00\x32\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\xff\xff\x0f\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x67\x00\xff\xff\x69\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1d\x00\x1e\x00\x1f\x00\x20\x00\xff\xff\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\xff\xff\xff\xff\x01\x00\xff\xff\x03\x00\xff\xff\xff\xff\xff\xff\x07\x00\x31\x00\x32\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\xff\xff\x0f\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x67\x00\xff\xff\x69\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1d\x00\x1e\x00\x1f\x00\x20\x00\xff\xff\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\xff\xff\xff\xff\x01\x00\xff\xff\x03\x00\xff\xff\xff\xff\xff\xff\x07\x00\x31\x00\x32\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\xff\xff\x0f\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x67\x00\xff\xff\x69\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1d\x00\x1e\x00\x1f\x00\x20\x00\xff\xff\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\xff\xff\xff\xff\x01\x00\xff\xff\x03\x00\xff\xff\xff\xff\xff\xff\x07\x00\x31\x00\x32\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\xff\xff\x0f\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x67\x00\xff\xff\x69\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1d\x00\x1e\x00\x1f\x00\x20\x00\xff\xff\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\xff\xff\xff\xff\x01\x00\xff\xff\x03\x00\xff\xff\xff\xff\xff\xff\x07\x00\x31\x00\x32\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\xff\xff\x0f\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x67\x00\xff\xff\x69\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1e\x00\x1f\x00\x20\x00\xff\xff\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\xff\xff\xff\xff\x01\x00\xff\xff\x03\x00\xff\xff\xff\xff\xff\xff\x07\x00\x31\x00\x32\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\xff\xff\x0f\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x67\x00\x1a\x00\x69\x00\xff\xff\x1d\x00\xff\xff\x01\x00\xff\xff\xff\xff\xff\xff\x1f\x00\x20\x00\x25\x00\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\xff\xff\x0f\x00\xff\xff\xff\xff\x30\x00\x31\x00\xff\xff\x33\x00\x34\x00\x31\x00\x32\x00\xff\xff\x1a\x00\xff\xff\xff\xff\x3b\x00\x38\x00\xff\xff\xff\xff\x01\x00\xff\xff\x03\x00\x67\x00\x25\x00\x69\x00\x07\x00\xff\xff\xff\xff\x0a\x00\x0b\x00\x0c\x00\x0d\x00\xff\xff\x0f\x00\x30\x00\x31\x00\xff\xff\x33\x00\x34\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x3b\x00\xff\xff\xff\xff\x1e\x00\x1f\x00\x20\x00\xff\xff\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\xff\xff\xff\xff\x01\x00\xff\xff\x03\x00\x67\x00\xff\xff\x69\x00\x07\x00\x31\x00\x32\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\xff\xff\x0f\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1e\x00\x1f\x00\x20\x00\xff\xff\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\xff\xff\xff\xff\x01\x00\xff\xff\x03\x00\xff\xff\xff\xff\xff\xff\x07\x00\x31\x00\x32\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\xff\xff\x0f\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x67\x00\xff\xff\x69\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1e\x00\x1f\x00\x20\x00\xff\xff\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\xff\xff\xff\xff\x01\x00\xff\xff\x03\x00\xff\xff\xff\xff\xff\xff\x07\x00\x31\x00\x32\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\xff\xff\x0f\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x67\x00\xff\xff\x69\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1e\x00\x1f\x00\x20\x00\xff\xff\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\xff\xff\xff\xff\x01\x00\xff\xff\x03\x00\xff\xff\xff\xff\xff\xff\x07\x00\x31\x00\x32\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\xff\xff\x0f\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x67\x00\xff\xff\x69\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1e\x00\x1f\x00\x20\x00\xff\xff\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\xff\xff\xff\xff\x01\x00\xff\xff\x03\x00\xff\xff\xff\xff\xff\xff\x07\x00\x31\x00\x32\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\xff\xff\x0f\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x67\x00\xff\xff\x69\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1e\x00\x1f\x00\x20\x00\xff\xff\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\xff\xff\xff\xff\x01\x00\xff\xff\x03\x00\xff\xff\xff\xff\xff\xff\x07\x00\x31\x00\x32\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\xff\xff\x0f\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x67\x00\xff\xff\x69\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1e\x00\x1f\x00\x20\x00\xff\xff\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\xff\xff\xff\xff\x01\x00\xff\xff\x03\x00\xff\xff\xff\xff\xff\xff\x07\x00\x31\x00\x32\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\xff\xff\x0f\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x67\x00\xff\xff\x69\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1e\x00\x1f\x00\x20\x00\xff\xff\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\xff\xff\xff\xff\x01\x00\xff\xff\x03\x00\xff\xff\xff\xff\xff\xff\x07\x00\x31\x00\x32\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\xff\xff\x0f\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x67\x00\xff\xff\x69\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1e\x00\x1f\x00\x20\x00\xff\xff\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\xff\xff\xff\xff\x01\x00\xff\xff\x03\x00\xff\xff\xff\xff\xff\xff\x07\x00\x31\x00\x32\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\xff\xff\x0f\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x67\x00\xff\xff\x69\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1e\x00\x1f\x00\x20\x00\xff\xff\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\xff\xff\xff\xff\x01\x00\xff\xff\x03\x00\xff\xff\xff\xff\xff\xff\x07\x00\x31\x00\x32\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\xff\xff\x0f\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x67\x00\xff\xff\x69\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1e\x00\x1f\x00\x20\x00\xff\xff\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\xff\xff\xff\xff\x01\x00\xff\xff\x03\x00\xff\xff\xff\xff\xff\xff\x07\x00\x31\x00\x32\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\xff\xff\x0f\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x67\x00\xff\xff\x69\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1e\x00\x1f\x00\x20\x00\xff\xff\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\xff\xff\xff\xff\x01\x00\xff\xff\x03\x00\xff\xff\xff\xff\xff\xff\x07\x00\x31\x00\x32\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\xff\xff\x0f\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x67\x00\xff\xff\x69\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1e\x00\x1f\x00\x20\x00\xff\xff\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\xff\xff\xff\xff\x01\x00\xff\xff\x03\x00\xff\xff\xff\xff\xff\xff\x07\x00\x31\x00\x32\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\xff\xff\x0f\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x67\x00\xff\xff\x69\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x20\x00\xff\xff\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\xff\xff\xff\xff\x01\x00\xff\xff\x03\x00\xff\xff\xff\xff\xff\xff\x07\x00\x31\x00\x32\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\xff\xff\x0f\x00\xff\xff\xff\xff\x01\x00\xff\xff\x03\x00\x67\x00\xff\xff\x69\x00\x07\x00\xff\xff\xff\xff\x0a\x00\x0b\x00\x0c\x00\x0d\x00\xff\xff\x0f\x00\x21\x00\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x31\x00\x32\x00\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\xff\xff\xff\xff\x01\x00\xff\xff\x03\x00\x67\x00\xff\xff\x69\x00\x07\x00\x31\x00\x32\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\xff\xff\x0f\x00\xff\xff\xff\xff\x01\x00\xff\xff\x03\x00\xff\xff\xff\xff\xff\xff\x07\x00\xff\xff\xff\xff\x0a\x00\x0b\x00\x0c\x00\x0d\x00\xff\xff\x0f\x00\xff\xff\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x67\x00\xff\xff\x69\x00\xff\xff\x31\x00\x32\x00\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\xff\xff\xff\xff\x01\x00\xff\xff\x03\x00\x67\x00\xff\xff\x69\x00\x07\x00\x31\x00\x32\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\x01\x00\x0f\x00\xff\xff\x04\x00\xff\xff\xff\xff\x07\x00\xff\xff\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\x0e\x00\xff\xff\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x24\x00\x25\x00\x26\x00\x27\x00\xff\xff\x1c\x00\xff\xff\xff\xff\xff\xff\x67\x00\xff\xff\x69\x00\xff\xff\x31\x00\x32\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x67\x00\xff\xff\x69\x00\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\xff\xff\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\x0e\x00\x0f\x00\xff\xff\x11\x00\x12\x00\xff\xff\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\xff\xff\xff\xff\xff\xff\x1f\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\x25\x00\x67\x00\x27\x00\x69\x00\xff\xff\xff\xff\xff\xff\xff\xff\x2d\x00\xff\xff\x63\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x38\x00\x39\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x42\x00\x43\x00\x44\x00\x45\x00\x46\x00\x47\x00\x48\x00\x49\x00\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\xff\xff\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\x0e\x00\x0f\x00\xff\xff\x11\x00\x12\x00\xff\xff\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\xff\xff\xff\xff\xff\xff\x1f\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\x25\x00\xff\xff\x27\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x2d\x00\xff\xff\xff\xff\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x38\x00\xff\xff\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x42\x00\x43\x00\x44\x00\x45\x00\x46\x00\x47\x00\x48\x00\x49\x00\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\xff\xff\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\x0e\x00\x0f\x00\xff\xff\x11\x00\x12\x00\xff\xff\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\xff\xff\xff\xff\xff\xff\x1f\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\x25\x00\xff\xff\x27\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x2d\x00\xff\xff\xff\xff\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x38\x00\xff\xff\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x42\x00\x43\x00\x44\x00\x45\x00\x46\x00\x47\x00\x48\x00\x49\x00\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\xff\xff\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\x0e\x00\x0f\x00\xff\xff\x11\x00\x12\x00\xff\xff\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\xff\xff\xff\xff\xff\xff\x1f\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\x25\x00\xff\xff\x27\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x2d\x00\xff\xff\xff\xff\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x38\x00\xff\xff\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x42\x00\x43\x00\x44\x00\x45\x00\x46\x00\x47\x00\x48\x00\x49\x00\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\xff\xff\x08\x00\x09\x00\x0a\x00\xff\xff\x0c\x00\xff\xff\x0e\x00\x0f\x00\xff\xff\x11\x00\x12\x00\xff\xff\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\xff\xff\xff\xff\xff\xff\x1f\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\x25\x00\xff\xff\x27\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x2d\x00\xff\xff\xff\xff\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x38\x00\xff\xff\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x42\x00\x43\x00\x44\x00\x45\x00\x46\x00\x47\x00\x48\x00\x49\x00\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\xff\xff\x08\x00\x09\x00\xff\xff\xff\xff\x0c\x00\xff\xff\x0e\x00\x0f\x00\xff\xff\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\xff\xff\xff\xff\xff\xff\x1f\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\x25\x00\xff\xff\x27\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x2d\x00\xff\xff\xff\xff\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x38\x00\xff\xff\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x42\x00\x43\x00\x44\x00\x45\x00\x46\x00\x47\x00\x48\x00\x49\x00\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\xff\xff\x08\x00\x09\x00\xff\xff\xff\xff\x0c\x00\xff\xff\x0e\x00\x0f\x00\xff\xff\x11\x00\x12\x00\xff\xff\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\xff\xff\xff\xff\xff\xff\x1f\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\x25\x00\xff\xff\x27\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x2d\x00\xff\xff\xff\xff\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x38\x00\xff\xff\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x42\x00\x43\x00\x44\x00\x45\x00\x46\x00\x47\x00\x48\x00\x49\x00\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\xff\xff\x08\x00\x09\x00\xff\xff\xff\xff\x0c\x00\xff\xff\x0e\x00\x0f\x00\xff\xff\x11\x00\x12\x00\xff\xff\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\xff\xff\xff\xff\xff\xff\x1f\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\x25\x00\xff\xff\x27\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x2d\x00\xff\xff\xff\xff\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x38\x00\xff\xff\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x42\x00\x43\x00\x44\x00\x45\x00\x46\x00\x47\x00\x48\x00\x49\x00\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\xff\xff\x08\x00\x09\x00\xff\xff\xff\xff\x0c\x00\xff\xff\x0e\x00\x0f\x00\xff\xff\x11\x00\x12\x00\xff\xff\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\xff\xff\xff\xff\xff\xff\x1f\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\x25\x00\xff\xff\x27\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x2d\x00\xff\xff\xff\xff\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x38\x00\xff\xff\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x42\x00\x43\x00\x44\x00\x45\x00\x46\x00\x47\x00\x48\x00\x49\x00\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\xff\xff\x08\x00\x09\x00\xff\xff\xff\xff\x0c\x00\xff\xff\x0e\x00\x0f\x00\xff\xff\x11\x00\x12\x00\xff\xff\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\xff\xff\xff\xff\xff\xff\x1f\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\x25\x00\xff\xff\x27\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x2d\x00\xff\xff\xff\xff\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x38\x00\xff\xff\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x42\x00\x43\x00\x44\x00\x45\x00\x46\x00\x47\x00\x48\x00\x49\x00\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\xff\xff\x08\x00\x09\x00\xff\xff\xff\xff\x0c\x00\xff\xff\x0e\x00\x0f\x00\xff\xff\x11\x00\x12\x00\xff\xff\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\xff\xff\xff\xff\xff\xff\x1f\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\x25\x00\xff\xff\x27\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x2d\x00\xff\xff\xff\xff\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x38\x00\xff\xff\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x42\x00\x43\x00\x44\x00\x45\x00\x46\x00\x47\x00\x48\x00\x49\x00\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\xff\xff\x08\x00\x09\x00\xff\xff\xff\xff\x0c\x00\xff\xff\x0e\x00\x0f\x00\xff\xff\x11\x00\x12\x00\xff\xff\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\xff\xff\xff\xff\xff\xff\x1f\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\x25\x00\xff\xff\x27\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x2d\x00\xff\xff\xff\xff\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x38\x00\xff\xff\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x42\x00\x43\x00\x44\x00\x45\x00\x46\x00\x47\x00\x48\x00\x49\x00\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\xff\xff\x08\x00\x09\x00\xff\xff\xff\xff\x0c\x00\xff\xff\x0e\x00\x0f\x00\xff\xff\x11\x00\x12\x00\xff\xff\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\xff\xff\xff\xff\xff\xff\x1f\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\x25\x00\xff\xff\x27\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x2d\x00\xff\xff\xff\xff\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\xff\xff\x38\x00\xff\xff\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x42\x00\x43\x00\x44\x00\x45\x00\x46\x00\x47\x00\x48\x00\x49\x00\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\xff\xff\xff\xff\xff\xff\x08\x00\x09\x00\xff\xff\xff\xff\x0c\x00\x0d\x00\xff\xff\xff\xff\xff\xff\x11\x00\xff\xff\xff\xff\x14\x00\x15\x00\xff\xff\xff\xff\xff\xff\xff\xff\x1a\x00\xff\xff\xff\xff\xff\xff\x01\x00\xff\xff\x20\x00\xff\xff\xff\xff\x08\x00\xff\xff\x25\x00\x0b\x00\x0c\x00\xff\xff\x0e\x00\xff\xff\xff\xff\x11\x00\xff\xff\xff\xff\x14\x00\x30\x00\x31\x00\x17\x00\x33\x00\x34\x00\x18\x00\xff\xff\x1a\x00\x38\x00\x39\x00\x3a\x00\x3b\x00\xff\xff\x3d\x00\x3e\x00\x3f\x00\x40\x00\xff\xff\x25\x00\x43\x00\xff\xff\x45\x00\x46\x00\x47\x00\x0b\x00\x49\x00\x00\x00\x01\x00\xff\xff\x30\x00\x31\x00\xff\xff\x33\x00\x34\x00\x08\x00\x09\x00\xff\xff\xff\xff\xff\xff\x1a\x00\x3b\x00\xff\xff\x10\x00\xff\xff\x41\x00\x42\x00\xff\xff\xff\xff\xff\xff\xff\xff\x25\x00\xff\xff\x1a\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x20\x00\xff\xff\xff\xff\x30\x00\x31\x00\x25\x00\x33\x00\x34\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x3b\x00\xff\xff\x30\x00\x31\x00\xff\xff\x33\x00\x34\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x3b\x00\xff\xff\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\xff\xff\x08\x00\xff\xff\x0a\x00\x0b\x00\x0c\x00\x49\x00\x0e\x00\x0f\x00\x10\x00\x11\x00\xff\xff\x01\x00\x14\x00\x15\x00\x04\x00\x17\x00\x18\x00\x07\x00\x1a\x00\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\x0e\x00\x21\x00\xff\xff\xff\xff\xff\xff\x25\x00\x14\x00\x15\x00\x16\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x30\x00\x31\x00\xff\xff\x33\x00\x34\x00\xff\xff\x36\x00\xff\xff\xff\xff\xff\xff\xff\xff\x3b\x00\xff\xff\x3d\x00\x3e\x00\xff\xff\xff\xff\x41\x00\x42\x00\xff\xff\x44\x00\x45\x00\x46\x00\x47\x00\x48\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\xff\xff\x08\x00\xff\xff\x0a\x00\x0b\x00\x0c\x00\x1a\x00\x0e\x00\x0f\x00\x10\x00\x11\x00\xff\xff\x01\x00\x14\x00\x15\x00\x04\x00\x17\x00\x25\x00\x07\x00\x1a\x00\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\x0e\x00\x21\x00\xff\xff\x30\x00\x31\x00\x25\x00\x33\x00\x34\x00\x16\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x3b\x00\x3c\x00\x30\x00\x31\x00\xff\xff\x33\x00\x34\x00\x01\x00\x36\x00\x03\x00\xff\xff\x05\x00\x06\x00\x3b\x00\xff\xff\x3d\x00\x3e\x00\xff\xff\xff\xff\x41\x00\x42\x00\xff\xff\x44\x00\x45\x00\x46\x00\x47\x00\x48\x00\x15\x00\x16\x00\x17\x00\xff\xff\x19\x00\x1a\x00\x1b\x00\xff\xff\xff\xff\xff\xff\x1f\x00\xff\xff\x21\x00\xff\xff\xff\xff\xff\xff\x25\x00\xff\xff\x27\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x2d\x00\xff\xff\xff\xff\x30\x00\x31\x00\xff\xff\x33\x00\x34\x00\xff\xff\x36\x00\xff\xff\xff\xff\xff\xff\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\xff\xff\xff\xff\x43\x00\x44\x00\x45\x00\x46\x00\x47\x00\x48\x00\x01\x00\xff\xff\x03\x00\xff\xff\x05\x00\xff\xff\x01\x00\x08\x00\xff\xff\x04\x00\xff\xff\xff\xff\x07\x00\xff\xff\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\x0e\x00\x15\x00\x16\x00\x17\x00\xff\xff\x19\x00\x1a\x00\x1b\x00\x16\x00\xff\xff\xff\xff\x1f\x00\xff\xff\x21\x00\xff\xff\xff\xff\xff\xff\x25\x00\xff\xff\x27\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x2d\x00\xff\xff\xff\xff\x30\x00\x31\x00\xff\xff\x33\x00\x34\x00\x01\x00\x36\x00\x03\x00\xff\xff\x05\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\xff\xff\xff\xff\x43\x00\x44\x00\x45\x00\x46\x00\x47\x00\x48\x00\x15\x00\x16\x00\x17\x00\xff\xff\x19\x00\x1a\x00\x1b\x00\xff\xff\xff\xff\xff\xff\x1f\x00\xff\xff\x21\x00\xff\xff\xff\xff\xff\xff\x25\x00\xff\xff\x27\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x2d\x00\xff\xff\xff\xff\x30\x00\x31\x00\xff\xff\x33\x00\x34\x00\xff\xff\x36\x00\xff\xff\xff\xff\xff\xff\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\xff\xff\xff\xff\x43\x00\x44\x00\x45\x00\x46\x00\x47\x00\x48\x00\x01\x00\xff\xff\x03\x00\xff\xff\x05\x00\xff\xff\xff\xff\xff\xff\x1a\x00\xff\xff\x1c\x00\x0c\x00\xff\xff\x0e\x00\x0f\x00\x10\x00\x11\x00\xff\xff\xff\xff\x25\x00\x15\x00\xff\xff\x17\x00\x18\x00\xff\xff\x1a\x00\xff\xff\xff\xff\x2e\x00\xff\xff\x30\x00\x31\x00\x21\x00\x33\x00\x34\x00\xff\xff\x25\x00\x37\x00\xff\xff\xff\xff\x3a\x00\x3b\x00\xff\xff\x3d\x00\xff\xff\x3f\x00\xff\xff\x30\x00\x31\x00\xff\xff\x33\x00\x34\x00\x01\x00\x36\x00\x03\x00\xff\xff\x05\x00\x06\x00\x3b\x00\xff\xff\x3d\x00\x3e\x00\xff\xff\xff\xff\x41\x00\x42\x00\xff\xff\x44\x00\x45\x00\x46\x00\x47\x00\x48\x00\x15\x00\x01\x00\x17\x00\xff\xff\x04\x00\x1a\x00\xff\xff\x07\x00\xff\xff\xff\xff\x0a\x00\x0b\x00\x21\x00\xff\xff\x0e\x00\xff\xff\x25\x00\xff\xff\x00\x00\x01\x00\xff\xff\xff\xff\x16\x00\xff\xff\xff\xff\xff\xff\xff\xff\x30\x00\x31\x00\xff\xff\x33\x00\x34\x00\x01\x00\x36\x00\x03\x00\x11\x00\x05\x00\x13\x00\x3b\x00\xff\xff\x3d\x00\x3e\x00\x18\x00\xff\xff\x1a\x00\xff\xff\xff\xff\x44\x00\x45\x00\x46\x00\x47\x00\x48\x00\x15\x00\xff\xff\x17\x00\x25\x00\xff\xff\x1a\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x21\x00\xff\xff\x30\x00\x31\x00\x25\x00\x33\x00\x34\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x3b\x00\xff\xff\x30\x00\x31\x00\xff\xff\x33\x00\x34\x00\x01\x00\x36\x00\x03\x00\xff\xff\x05\x00\xff\xff\x3b\x00\xff\xff\x3d\x00\x3e\x00\xff\xff\xff\xff\x1a\x00\xff\xff\x0f\x00\x44\x00\x45\x00\x46\x00\x47\x00\x48\x00\x15\x00\xff\xff\xff\xff\x25\x00\xff\xff\x1a\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x21\x00\xff\xff\x30\x00\x31\x00\x25\x00\x33\x00\x34\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x3b\x00\xff\xff\x30\x00\x31\x00\xff\xff\x33\x00\x34\x00\x01\x00\x36\x00\x03\x00\xff\xff\x05\x00\xff\xff\x3b\x00\xff\xff\x3d\x00\x3e\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x44\x00\x45\x00\x46\x00\x47\x00\x48\x00\x15\x00\xff\xff\x17\x00\xff\xff\xff\xff\x1a\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x21\x00\xff\xff\xff\xff\xff\xff\x25\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x30\x00\x31\x00\xff\xff\x33\x00\x34\x00\x01\x00\x36\x00\x03\x00\xff\xff\x05\x00\xff\xff\x3b\x00\xff\xff\x3d\x00\x3e\x00\xff\xff\xff\xff\xff\xff\xff\xff\x0f\x00\x44\x00\x45\x00\x46\x00\x47\x00\x48\x00\x15\x00\xff\xff\xff\xff\xff\xff\xff\xff\x1a\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x21\x00\xff\xff\xff\xff\xff\xff\x25\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x30\x00\x31\x00\xff\xff\x33\x00\x34\x00\x01\x00\x36\x00\x03\x00\xff\xff\x05\x00\xff\xff\x3b\x00\xff\xff\x3d\x00\x3e\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x44\x00\x45\x00\x46\x00\x47\x00\x48\x00\x15\x00\xff\xff\x17\x00\xff\xff\xff\xff\x1a\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x21\x00\xff\xff\xff\xff\xff\xff\x25\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x30\x00\x31\x00\xff\xff\x33\x00\x34\x00\x01\x00\x36\x00\x03\x00\xff\xff\x05\x00\xff\xff\x3b\x00\xff\xff\x3d\x00\x3e\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x44\x00\x45\x00\x46\x00\x47\x00\x48\x00\x15\x00\xff\xff\xff\xff\xff\xff\xff\xff\x1a\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x21\x00\xff\xff\xff\xff\xff\xff\x25\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x30\x00\x31\x00\xff\xff\x33\x00\x34\x00\xff\xff\x36\x00\xff\xff\xff\xff\xff\xff\x01\x00\x3b\x00\x03\x00\x3d\x00\x3e\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x44\x00\x45\x00\x46\x00\x47\x00\x48\x00\xff\xff\x11\x00\xff\xff\xff\xff\xff\xff\x15\x00\xff\xff\x17\x00\xff\xff\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\x3a\x00\x3b\x00\xff\xff\x3d\x00\x3e\x00\x3f\x00\x40\x00\xff\xff\x01\x00\x43\x00\x03\x00\x45\x00\x46\x00\x47\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x15\x00\xff\xff\x17\x00\xff\xff\xff\xff\x1a\x00\xff\xff\xff\xff\x01\x00\xff\xff\xff\xff\xff\xff\xff\xff\x22\x00\x23\x00\xff\xff\x25\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0f\x00\xff\xff\xff\xff\xff\xff\xff\xff\x30\x00\x31\x00\xff\xff\x33\x00\x34\x00\x01\x00\x1a\x00\x03\x00\xff\xff\x39\x00\x3a\x00\x3b\x00\xff\xff\x3d\x00\x3e\x00\x3f\x00\x40\x00\x25\x00\xff\xff\x43\x00\xff\xff\x45\x00\x46\x00\x47\x00\xff\xff\x15\x00\xff\xff\x17\x00\x30\x00\x31\x00\x1a\x00\x33\x00\x34\x00\xff\xff\x01\x00\xff\xff\x03\x00\xff\xff\xff\xff\x3b\x00\xff\xff\x25\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x30\x00\x31\x00\x15\x00\x33\x00\x34\x00\xff\xff\xff\xff\x1a\x00\xff\xff\x39\x00\x3a\x00\x3b\x00\xff\xff\x3d\x00\x3e\x00\x3f\x00\x40\x00\xff\xff\x25\x00\x43\x00\xff\xff\x45\x00\x46\x00\x47\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x30\x00\x31\x00\xff\xff\x33\x00\x34\x00\x04\x00\xff\xff\xff\xff\xff\xff\x39\x00\x3a\x00\x3b\x00\xff\xff\x3d\x00\x3e\x00\x3f\x00\x40\x00\xff\xff\xff\xff\x43\x00\xff\xff\x45\x00\x46\x00\x47\x00\xff\xff\xff\xff\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\xff\xff\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x04\x00\xff\xff\x3b\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x45\x00\x46\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\xff\xff\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x04\x00\xff\xff\x3b\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x45\x00\x46\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\xff\xff\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x01\x00\xff\xff\x3b\x00\xff\xff\xff\xff\x1a\x00\xff\xff\x1c\x00\xff\xff\xff\xff\xff\xff\xff\xff\x45\x00\x46\x00\x0f\x00\xff\xff\x25\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1a\x00\xff\xff\x30\x00\x31\x00\xff\xff\x33\x00\x34\x00\xff\xff\xff\xff\x37\x00\xff\xff\x25\x00\x3a\x00\x3b\x00\xff\xff\x3d\x00\xff\xff\x3f\x00\xff\xff\xff\xff\xff\xff\xff\xff\x30\x00\x31\x00\xff\xff\x33\x00\x34\x00\x11\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x3b\x00\xff\xff\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\xff\xff\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\xff\xff\xff\xff\x3b\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x45\x00\x46\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\xff\xff\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x1a\x00\xff\xff\x3b\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x25\x00\x45\x00\x46\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x30\x00\x31\x00\xff\xff\x33\x00\x34\x00\xff\xff\x1a\x00\x37\x00\x1c\x00\x1d\x00\x1e\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\xff\xff\x24\x00\x25\x00\x26\x00\xff\xff\xff\xff\x29\x00\x2a\x00\x2b\x00\x2c\x00\xff\xff\xff\xff\x2f\x00\x30\x00\x31\x00\xff\xff\x33\x00\x34\x00\xff\xff\x1a\x00\x37\x00\x1c\x00\x1d\x00\x1e\x00\x3b\x00\xff\xff\xff\xff\xff\xff\xff\xff\x24\x00\x25\x00\xff\xff\xff\xff\xff\xff\x29\x00\x2a\x00\x2b\x00\x2c\x00\xff\xff\xff\xff\x2f\x00\x30\x00\x31\x00\xff\xff\x33\x00\x34\x00\xff\xff\x01\x00\x37\x00\xff\xff\x04\x00\xff\xff\x3b\x00\x07\x00\xff\xff\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\x0e\x00\xff\xff\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x01\x00\xff\xff\xff\xff\x04\x00\xff\xff\x1c\x00\x07\x00\xff\xff\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\x0e\x00\xff\xff\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x01\x00\xff\xff\xff\xff\x04\x00\xff\xff\x1c\x00\x07\x00\xff\xff\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\x0e\x00\xff\xff\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x01\x00\xff\xff\xff\xff\x04\x00\xff\xff\x1c\x00\x07\x00\xff\xff\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\x0e\x00\xff\xff\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x01\x00\xff\xff\xff\xff\x04\x00\xff\xff\x1c\x00\x07\x00\xff\xff\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\x0e\x00\xff\xff\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x01\x00\xff\xff\xff\xff\x04\x00\xff\xff\x1c\x00\x07\x00\xff\xff\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\x0e\x00\xff\xff\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x01\x00\xff\xff\xff\xff\x04\x00\xff\xff\x1c\x00\x07\x00\xff\xff\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\x0e\x00\xff\xff\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x01\x00\xff\xff\xff\xff\x04\x00\xff\xff\x1c\x00\x07\x00\xff\xff\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\x0e\x00\xff\xff\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x01\x00\xff\xff\xff\xff\x04\x00\xff\xff\x1c\x00\x07\x00\xff\xff\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\x0e\x00\xff\xff\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x01\x00\xff\xff\xff\xff\x04\x00\xff\xff\x1c\x00\x07\x00\xff\xff\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\x0e\x00\xff\xff\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x01\x00\xff\xff\xff\xff\x04\x00\xff\xff\x1c\x00\x07\x00\xff\xff\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\x0e\x00\xff\xff\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x01\x00\xff\xff\xff\xff\x04\x00\xff\xff\x1c\x00\x07\x00\xff\xff\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\x0e\x00\xff\xff\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x01\x00\xff\xff\xff\xff\x04\x00\xff\xff\x1c\x00\x07\x00\xff\xff\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\x0e\x00\xff\xff\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x01\x00\xff\xff\xff\xff\x04\x00\xff\xff\x1c\x00\x07\x00\xff\xff\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\x0e\x00\xff\xff\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x01\x00\xff\xff\xff\xff\x04\x00\xff\xff\x1c\x00\x07\x00\xff\xff\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\x0e\x00\xff\xff\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x01\x00\xff\xff\xff\xff\x04\x00\xff\xff\x1c\x00\x07\x00\xff\xff\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\x0e\x00\xff\xff\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x01\x00\xff\xff\xff\xff\x04\x00\xff\xff\x1c\x00\x07\x00\xff\xff\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\x0e\x00\xff\xff\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x01\x00\xff\xff\xff\xff\x04\x00\xff\xff\x1c\x00\x07\x00\xff\xff\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\x0e\x00\xff\xff\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x01\x00\xff\xff\xff\xff\x04\x00\xff\xff\x1c\x00\x07\x00\xff\xff\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\x0e\x00\xff\xff\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x01\x00\xff\xff\xff\xff\x04\x00\xff\xff\x1c\x00\x07\x00\xff\xff\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\x0e\x00\xff\xff\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x01\x00\xff\xff\xff\xff\x04\x00\xff\xff\x1c\x00\x07\x00\xff\xff\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\x0e\x00\xff\xff\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x01\x00\xff\xff\xff\xff\x04\x00\xff\xff\x1c\x00\x07\x00\xff\xff\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\x0e\x00\xff\xff\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x01\x00\xff\xff\xff\xff\x04\x00\xff\xff\x1c\x00\x07\x00\xff\xff\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\x0e\x00\xff\xff\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x01\x00\xff\xff\xff\xff\x04\x00\xff\xff\x1c\x00\x07\x00\xff\xff\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\x0e\x00\xff\xff\xff\xff\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x01\x00\xff\xff\xff\xff\x04\x00\xff\xff\x1c\x00\x07\x00\xff\xff\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\x0e\x00\xff\xff\xff\xff\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x01\x00\xff\xff\xff\xff\x04\x00\xff\xff\x1c\x00\x07\x00\xff\xff\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\x0e\x00\xff\xff\xff\xff\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"#

happyTable :: HappyAddr
happyTable = HappyA# "\x00\x00\xbe\x01\x19\x00\x58\x01\x3b\x01\x1a\x00\x80\x00\x8c\x02\xbe\x01\x40\x00\xbe\x01\x30\x02\x1b\x00\x1c\x00\x1d\x00\x82\x00\x1e\x00\x85\x00\x40\x00\x85\x00\x86\x00\xe0\x00\x86\x00\x87\x00\xbf\x01\x87\x00\x88\x00\x89\x00\x88\x00\x89\x00\x8a\x00\xbf\x01\x8a\x00\xbf\x01\x43\x02\x3c\x01\xe1\x00\xe2\x00\x4d\x01\xf9\x01\x4d\x01\xf9\x01\x85\x01\x85\x00\x86\x01\x85\x00\x86\x00\x7d\x01\x86\x00\x87\x00\x78\x01\x87\x00\x88\x00\x89\x00\x88\x00\x89\x00\x8a\x00\x59\x01\x8a\x00\x45\x00\x54\x01\x21\x00\x22\x00\x23\x00\x4d\x01\x85\x00\x4d\x01\x44\x02\x86\x00\xe0\x00\x85\x00\x87\x00\xb3\x01\x86\x00\x88\x00\x89\x00\x87\x00\xf5\x01\x8a\x00\x88\x00\x89\x00\x30\x02\x79\x01\x8a\x00\x9f\x01\xe2\x00\x4d\x01\xb2\x00\x1c\x01\x3d\x00\xbe\x01\x4d\x01\xac\x02\xa2\x02\x31\x02\xd7\x01\x30\x02\xd8\x01\xb3\x01\x48\x01\x40\x00\xd9\x01\xea\x01\x24\x00\x81\x00\x25\x00\xa3\x02\x26\x00\x70\x01\xb3\x00\x1d\x01\x1c\x01\xce\x01\xf1\x01\x30\x02\x83\x00\x32\x02\xb5\x00\x40\x00\xcb\x01\xd7\x01\xc0\x01\xd8\x01\x87\x02\xcf\x00\xfa\x01\xd9\x01\xd0\x00\x90\x02\x4e\x01\x49\x01\xca\x01\xc1\x01\x9d\x01\x33\x02\x8d\x02\xb3\x01\x27\x00\x43\x02\xc1\x01\x46\x00\xc1\x01\x5a\x01\x5d\x02\x3d\x01\xe3\x00\x34\x02\x0f\x02\x55\x01\x10\x02\x4f\x01\x64\x02\x4f\x01\x11\x02\xfb\x01\xff\x01\x45\x02\x74\x02\x58\x01\x4a\x01\x5b\x01\xc2\x01\x3e\x01\x35\x02\x8e\x02\x85\x02\x56\x01\x7e\x01\xc2\x01\xda\x01\xc2\x01\x44\x02\x3e\x00\x7a\x01\xe4\x00\xd2\x01\x4f\x01\x72\x02\x4f\x01\x50\x01\xfc\x01\x50\x01\xb7\x02\x41\x00\x80\x00\x46\x02\x3b\x02\x40\x00\x1c\x01\x42\x00\x43\x00\xeb\x01\x43\x00\xe3\x00\xda\x01\x1e\x01\x7f\x01\xa4\x02\x4f\x01\xf5\x01\x5e\x02\xa3\x02\x7b\x01\x4f\x01\x62\xfe\x50\x01\xb0\x00\x50\x01\x2f\x02\xd5\x00\x1d\x01\xd3\x01\x3a\x02\xd1\x00\x43\x00\xb4\x01\x34\x02\x12\x02\x45\x00\x32\x02\x08\x01\xdb\x01\xe4\x00\x86\x00\x62\xfe\x1f\x01\x09\x01\x50\x01\xe0\x00\x0a\x01\x89\x00\x34\x02\x50\x01\x0b\x01\x19\x00\x85\x00\x0c\x01\x8d\x00\x8e\x00\x8f\x00\x90\x00\x91\x00\x0d\x01\x0e\x01\xe2\x00\x08\x01\x7c\x02\x92\x00\x86\x00\x34\x02\xdc\x01\x09\x01\x78\x01\xe0\x00\x0a\x01\x89\x00\x4c\x01\xb5\x01\x0b\x01\x43\x02\xa6\x02\xa0\x01\x8d\x00\x8e\x00\x8f\x00\x90\x00\x91\x00\xa1\x01\xa2\x01\xe2\x00\x13\x02\x4a\x00\x92\x00\x4b\x00\x45\x00\xdc\x01\x74\x01\x4c\x00\x37\x00\x38\x00\x4d\x00\x4e\x00\x4f\x00\x50\x00\x47\x02\x51\x00\xb6\x01\xf6\x01\xe3\x01\x46\x02\xac\x02\xd7\x01\xa7\x02\xd8\x01\x6c\xfe\x51\x01\x99\x02\xd9\x01\x52\x01\x14\x02\x33\x01\x7a\x00\x53\x00\xe4\x01\x54\x00\x55\x00\x56\x00\x57\x00\x58\x00\x59\x00\x9e\x00\x7e\x00\x4a\x00\xf7\x01\x4b\x00\x4a\x00\x37\x00\x38\x00\x4c\x00\x5a\x00\x5b\x00\x4d\x00\x4e\x00\x4f\x00\x50\x00\x1f\x01\x51\x00\xac\x01\xad\x01\x51\x02\xad\x01\x84\x02\xad\x01\xe5\x01\x37\x00\x38\x00\xae\x01\x50\xfe\xae\x01\xf8\x01\xae\x01\x33\x01\x7a\x00\x53\x00\x40\x00\x54\x00\x55\x00\x56\x00\x57\x00\x58\x00\x59\x00\x50\xfe\xe3\x00\x64\xfe\x60\xfe\x26\x01\x0f\x02\x28\x01\x10\x02\x1d\x02\x5a\x00\x5b\x00\x11\x02\x97\x02\x98\x02\x7e\x02\x29\x01\x64\xfe\x19\x00\x9e\x00\x99\x02\x1a\x00\x60\xfe\x5d\x00\x6a\x01\x5e\x00\x6b\x01\xe3\x00\x1b\x00\x1c\x00\x1d\x00\xe4\x00\x1e\x00\x9f\x00\xa0\x00\xa1\x00\xa2\x00\xc1\x00\xa3\x00\xc2\x00\xaf\x01\xbb\x01\xaf\x01\xbc\x01\xaf\x01\xa4\x00\x39\x01\x64\xfe\xc3\x00\xa5\x00\xa6\x00\x3b\x01\x9e\x00\xa7\x00\x78\x00\x79\x00\xe4\x00\x19\x00\x2a\x01\x2b\x01\x1a\x00\x49\x02\x68\xfe\x68\xfe\x5d\x00\x4c\xfe\x5e\x00\x1b\x00\x1c\x00\x1d\x00\xb0\x01\x1e\x00\xb0\x01\x9a\x02\xb0\x01\x35\x01\x90\x02\x4a\x02\x22\x00\x23\x00\xb6\x00\x4c\xfe\x26\x02\xb7\x00\xb8\x00\x4e\xfe\x68\xfe\x34\x01\x19\x00\xb9\x00\xc4\x00\x1a\x00\xba\x00\xa0\x00\xa1\x00\xa2\x00\x66\xfe\xa3\x00\x1b\x00\x1c\x00\x1d\x00\x4e\xfe\x1e\x00\x9b\x02\xa4\x00\xaa\x02\x98\x02\xff\xff\xa5\x00\xa6\x00\xe0\x01\x5c\xfe\x99\x02\x62\x01\x66\xfe\xe1\x01\x35\x01\xd3\x01\x5e\x01\x24\x00\x58\xfe\x25\x00\xb9\x00\x26\x00\x5a\xfe\xba\x00\xa0\x00\xa1\x00\xa2\x00\x5c\xfe\xa3\x00\xae\x02\x19\x00\x4b\x02\xe0\x00\xbb\x00\x58\xfe\xa4\x00\x4c\x02\xbc\x00\x5a\xfe\xa5\x00\xa6\x00\x26\x01\xff\xff\x28\x01\x61\x01\x4a\x02\x22\x00\x23\x00\x06\x02\x4d\x01\x19\x00\x27\x00\x29\x01\x8c\x01\x3c\x00\x3d\x00\x24\x00\x4d\x02\x25\x00\xbd\x00\x1b\x00\x1c\x00\x1d\x00\x9a\x02\x1e\x00\x4e\x02\xbe\x00\xce\x00\x48\x01\x9e\x00\xbc\x00\x19\x00\x19\x00\x85\x00\x8c\x01\x9d\x02\x40\x00\xff\xff\x9e\x02\x97\x02\x98\x02\x1b\x00\x1c\x00\x1d\x00\xb3\x01\x1e\x00\x99\x02\x24\x00\xa7\xfe\x25\x00\x2b\x02\x26\x00\x8d\x01\x9b\x02\x2a\x01\x2b\x01\xa7\xfe\xa7\xfe\x43\x01\xbe\x00\x42\x01\x2c\x02\xff\xff\x2d\x02\x19\x00\xb3\x01\xaf\x02\x8c\x01\x9e\x00\x8e\x01\x22\x00\x23\x00\x37\x01\x8d\x01\x1b\x00\x1c\x00\x1d\x00\x02\x02\x1e\x00\x33\x01\xa7\xfe\x27\x00\xb2\x01\xb3\x01\x31\x01\xae\x01\x19\x00\x37\x00\x38\x00\x1a\x00\x8e\x01\x22\x00\x23\x00\x19\x00\x85\x00\x4e\x02\x1b\x00\x1c\x00\x1d\x00\x9a\x02\x1e\x00\xff\xff\xb5\x00\xa0\x00\xa1\x00\xa2\x00\x8d\x01\xa3\x00\xb2\x01\xb3\x01\x2e\x01\x24\x00\x45\x00\x25\x00\xa4\x00\x26\x00\x37\x00\x38\x00\xa5\x00\xa6\x00\x56\xfe\xa7\xfe\x56\xfe\x8e\x01\x22\x00\x23\x00\x91\x02\x92\x02\x93\x01\x9b\x02\x1d\x02\xad\x01\x24\x00\xff\xff\x25\x00\x56\xfe\x26\x00\x2e\x00\x56\xfe\xae\x01\x9c\x00\xd5\x01\xa0\x00\xa1\x00\xa2\x00\x27\x00\xa3\x00\x23\x00\x30\x00\x8f\x01\xbb\x02\xbc\x02\xff\xff\xa4\x00\x90\x01\xdc\x00\xdb\x00\xa5\x00\xa6\x00\x31\x00\x32\x00\xda\x00\x33\x00\x34\x00\xd9\x00\x24\x00\x27\x00\x25\x00\xd8\x00\x26\x00\x36\x00\x9c\x00\x37\x00\x38\x00\x19\x00\x90\x01\xff\xff\x1a\x00\xe7\x01\xe8\x01\x40\x00\xe9\x01\xb5\x02\x40\x00\x1b\x00\x1c\x00\x1d\x00\x24\x00\x1e\x00\x25\x00\xff\xff\x1e\x02\x19\x00\xaf\x01\xd3\x00\x1a\x00\xff\xff\xcb\x00\xc9\x00\x27\x00\xff\xff\xca\x00\x1b\x00\x1c\x00\x1d\x00\xd5\x01\x1e\x00\x40\x00\x90\x01\xca\x01\xc9\x01\x6a\xfe\xb0\x00\xbb\x01\xba\x01\x26\x01\xa5\xfe\x28\x01\x40\x00\x6a\xfe\x6a\xfe\x27\x00\xaa\x01\xb0\x01\xa5\xfe\xa5\xfe\x29\x01\x19\x00\x6a\xfe\xab\x01\x1a\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\xa9\x01\x1b\x00\x1c\x00\x1d\x00\xa8\x01\x1e\x00\x81\xff\x6a\xfe\x19\x00\x80\xff\x7e\xff\x1a\x00\xa5\xfe\x7f\xff\x5d\x01\x21\x00\x22\x00\x23\x00\x1b\x00\x1c\x00\x1d\x00\xa6\x01\x1e\x00\xa5\x01\x19\x00\x82\xff\xa4\x01\x1a\x00\xe7\x01\xe8\x01\xc2\xff\xe9\x01\x2a\x01\x2b\x01\x1b\x00\x1c\x00\x1d\x00\xba\xff\x1e\x00\x24\x00\xb8\xff\x25\x00\xad\xff\x26\x00\x19\x00\xab\xff\xaa\xff\x8c\x01\x6a\xfe\x39\x02\x21\x00\x22\x00\x23\x00\xa5\xfe\x1b\x00\x1c\x00\x1d\x00\x24\x00\x1e\x00\x25\x00\x19\x00\x26\x00\xa9\xff\x1a\x00\xc6\xff\xc5\xff\x38\x02\x21\x00\x22\x00\x23\x00\x1b\x00\x1c\x00\x1d\x00\x27\x00\x1e\x00\xc4\xff\x9f\x01\x96\x01\x8b\x01\x8c\x01\x89\x01\x8a\x01\x37\x02\x21\x00\x22\x00\x23\x00\x54\x02\x19\x00\x88\x01\x87\x01\x1a\x00\x27\x00\x24\x00\x84\x01\x25\x00\x83\x01\x26\x00\x1b\x00\x1c\x00\x1d\x00\x82\x01\x1e\x00\x73\x01\x8e\x01\x22\x00\x23\x00\x69\x01\x72\x01\x6f\x01\x24\x00\x6d\x01\x25\x00\x6c\x01\x26\x00\x68\x01\x67\x01\x74\x01\x29\x02\x28\x02\xb0\x02\x22\x00\x23\x00\x2a\x02\x22\x02\x1b\x02\x24\x00\x27\x00\x25\x00\x19\x00\x26\x00\x1c\x02\x1a\x00\x1a\x02\x0c\x02\x19\x02\x0f\x02\x0b\x02\x09\x02\x1b\x00\x1c\x00\x1d\x00\x19\x00\x1e\x00\x27\x00\x1a\x00\x24\x00\x0a\x02\x25\x00\x23\x00\x26\x00\xff\x01\x1b\x00\x1c\x00\x1d\x00\x04\x02\x1e\x00\xf5\x01\x19\x00\xf4\x01\x27\x00\x1a\x00\x24\x00\xef\x01\x25\x00\x40\x00\x26\x00\xc4\xfe\x1b\x00\x1c\x00\x1d\x00\xe2\x01\x1e\x00\x26\x01\xd7\x01\x28\x01\x7b\x02\x74\x02\x7a\x02\x2f\x02\x27\x00\x40\x00\x72\x02\x70\x02\x29\x01\x6f\x02\x6a\x02\xa6\xfe\x69\x02\x24\x00\x23\x00\x25\x00\x68\x02\xdc\x00\x19\x00\x66\x02\x27\x00\x1a\x00\xa6\xfe\xdd\x00\x67\x02\x40\x00\x65\x01\x23\x00\x1b\x00\x1c\x00\x1d\x00\xa6\xfe\x1e\x00\x62\x02\x7c\xff\x7b\xff\x85\x00\x2e\x00\x7d\xff\x86\x00\x60\x02\x5b\x02\x87\x00\x23\x00\x5a\x02\x88\x00\x89\x00\x27\x00\x30\x00\x8a\x00\x2a\x01\x2b\x01\x56\x02\x54\x02\x24\x00\x40\x00\x25\x00\x22\x01\xdc\x00\x31\x00\x32\x00\x50\x02\x33\x00\x34\x00\x6a\x02\x3f\x02\x3d\x02\x24\x00\xa1\x02\x25\x00\x36\x00\x26\x00\xa0\x02\x9f\x02\x8c\x02\x97\x02\x96\x02\x8a\x02\x89\x02\x63\x01\xc4\xfe\x7e\x02\xb7\x02\x24\x00\x7a\xff\x25\x00\xb5\x02\x38\x01\x27\x00\xb4\x02\xb3\x02\xb5\x00\xae\x02\x4a\x00\xbf\x02\x4b\x00\xb9\x02\x40\x00\xc4\x00\x4c\x00\x7c\x00\x27\x00\x4d\x00\x4e\x00\x4f\x00\x50\x00\xbf\x00\x51\x00\x7e\x00\x5f\x01\x76\x00\x53\x01\x48\x00\x47\x00\x2e\x01\x2c\x01\x23\x01\x27\x00\xd5\x00\x24\x00\xdf\x00\x25\x00\x9c\x00\x7a\x00\x53\x00\xce\x00\x54\x00\x55\x00\x56\x00\x57\x00\x58\x00\x59\x00\xd6\x00\xcc\x00\x4a\x00\xcb\x00\x4b\x00\xd3\x00\xc7\x00\xcd\x01\x4c\x00\x5a\x00\x5b\x00\x4d\x00\x4e\x00\x4f\x00\x50\x00\xc6\x01\x51\x00\x9d\x01\xc5\x01\x2e\x00\xd0\x01\xb8\x01\x9b\x01\xf2\x01\x9a\x01\x94\x01\x2d\x02\x6d\x01\x5f\x01\x0d\x02\x30\x00\x79\x00\x7a\x00\x53\x00\xf0\x01\x54\x00\x55\x00\x56\x00\x57\x00\x58\x00\x59\x00\x31\x00\x32\x00\xed\x01\x33\x00\x34\x00\xec\x01\x77\x02\x7b\x02\x78\x02\x5a\x00\x5b\x00\x36\x00\x7b\x00\x76\x02\x6d\x02\x75\x02\x6c\x02\x9d\x00\x58\x02\x4a\x00\x5b\x02\x4b\x00\x5d\x00\x57\x02\x5e\x00\x4c\x00\x48\x02\x56\x02\x4d\x00\x4e\x00\x4f\x00\x50\x00\x3d\x02\x51\x00\x5f\x01\x7f\x02\x82\x02\xb1\x02\x5f\x01\xb9\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x01\x02\x7a\x00\x53\x00\x00\x00\x54\x00\x55\x00\x56\x00\x57\x00\x58\x00\x59\x00\x00\x00\x00\x00\x4a\x00\x00\x00\x4b\x00\x5d\x00\x00\x00\x5e\x00\x4c\x00\x5a\x00\x5b\x00\x4d\x00\x4e\x00\x4f\x00\x50\x00\x00\x00\x51\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x62\x02\x01\x02\x7a\x00\x53\x00\x00\x00\x54\x00\x55\x00\x56\x00\x57\x00\x58\x00\x59\x00\x00\x00\x00\x00\x4a\x00\x00\x00\x4b\x00\x00\x00\x00\x00\x00\x00\x4c\x00\x5a\x00\x5b\x00\x4d\x00\x4e\x00\x4f\x00\x50\x00\x00\x00\x51\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x5d\x00\x00\x00\x5e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x52\x02\x01\x02\x7a\x00\x53\x00\x00\x00\x54\x00\x55\x00\x56\x00\x57\x00\x58\x00\x59\x00\x00\x00\x00\x00\x4a\x00\x00\x00\x4b\x00\x00\x00\x00\x00\x00\x00\x4c\x00\x5a\x00\x5b\x00\x4d\x00\x4e\x00\x4f\x00\x50\x00\x00\x00\x51\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x5d\x00\x00\x00\x5e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa8\x02\x01\x02\x7a\x00\x53\x00\x00\x00\x54\x00\x55\x00\x56\x00\x57\x00\x58\x00\x59\x00\x00\x00\x00\x00\x4a\x00\x00\x00\x4b\x00\x00\x00\x00\x00\x00\x00\x4c\x00\x5a\x00\x5b\x00\x4d\x00\x4e\x00\x4f\x00\x50\x00\x00\x00\x51\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x5d\x00\x00\x00\x5e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xbd\x02\x01\x02\x7a\x00\x53\x00\x00\x00\x54\x00\x55\x00\x56\x00\x57\x00\x58\x00\x59\x00\x00\x00\x00\x00\x4a\x00\x00\x00\x4b\x00\x00\x00\x00\x00\x00\x00\x4c\x00\x5a\x00\x5b\x00\x4d\x00\x4e\x00\x4f\x00\x50\x00\x00\x00\x51\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x5d\x00\x00\x00\x5e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa8\x02\x01\x02\x7a\x00\x53\x00\x00\x00\x54\x00\x55\x00\x56\x00\x57\x00\x58\x00\x59\x00\x00\x00\x00\x00\x4a\x00\x00\x00\x4b\x00\x00\x00\x00\x00\x00\x00\x4c\x00\x5a\x00\x5b\x00\x4d\x00\x4e\x00\x4f\x00\x50\x00\x00\x00\x51\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x5d\x00\x00\x00\x5e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xbc\x02\x01\x02\x7a\x00\x53\x00\x00\x00\x54\x00\x55\x00\x56\x00\x57\x00\x58\x00\x59\x00\x00\x00\x00\x00\x4a\x00\x00\x00\x4b\x00\x00\x00\x00\x00\x00\x00\x4c\x00\x5a\x00\x5b\x00\x4d\x00\x4e\x00\x4f\x00\x50\x00\x00\x00\x51\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x5d\x00\x00\x00\x5e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc5\x00\x7a\x00\x53\x00\x00\x00\x54\x00\x55\x00\x56\x00\x57\x00\x58\x00\x59\x00\x00\x00\x00\x00\x4a\x00\x00\x00\x4b\x00\x00\x00\x00\x00\x00\x00\x4c\x00\x5a\x00\x5b\x00\x4d\x00\x4e\x00\x4f\x00\x50\x00\x00\x00\x51\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x5d\x00\x2e\x00\x5e\x00\x00\x00\xc8\x01\x00\x00\xc4\x01\x00\x00\x00\x00\x00\x00\x52\x00\x53\x00\x30\x00\x54\x00\x55\x00\x56\x00\x57\x00\x58\x00\x59\x00\x00\x00\xd0\x01\x00\x00\x00\x00\x31\x00\x32\x00\x00\x00\x33\x00\x34\x00\x5a\x00\x5b\x00\x00\x00\x2e\x00\x00\x00\x00\x00\x36\x00\x5c\x00\x00\x00\x00\x00\x4a\x00\x00\x00\x4b\x00\x5d\x00\x30\x00\x5e\x00\x4c\x00\x00\x00\x00\x00\x4d\x00\x4e\x00\x4f\x00\x50\x00\x00\x00\x51\x00\x31\x00\x32\x00\x00\x00\x33\x00\x34\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x36\x00\x00\x00\x00\x00\x40\x01\x7a\x00\x53\x00\x00\x00\x54\x00\x55\x00\x56\x00\x57\x00\x58\x00\x59\x00\x00\x00\x00\x00\x4a\x00\x00\x00\x4b\x00\x5d\x00\x00\x00\x5e\x00\x4c\x00\x5a\x00\x5b\x00\x4d\x00\x4e\x00\x4f\x00\x50\x00\x00\x00\x51\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x31\x01\x7a\x00\x53\x00\x00\x00\x54\x00\x55\x00\x56\x00\x57\x00\x58\x00\x59\x00\x00\x00\x00\x00\x4a\x00\x00\x00\x4b\x00\x00\x00\x00\x00\x00\x00\x4c\x00\x5a\x00\x5b\x00\x4d\x00\x4e\x00\x4f\x00\x50\x00\x00\x00\x51\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x5d\x00\x00\x00\x5e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\x7a\x00\x53\x00\x00\x00\x54\x00\x55\x00\x56\x00\x57\x00\x58\x00\x59\x00\x00\x00\x00\x00\x4a\x00\x00\x00\x4b\x00\x00\x00\x00\x00\x00\x00\x4c\x00\x5a\x00\x5b\x00\x4d\x00\x4e\x00\x4f\x00\x50\x00\x00\x00\x51\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x5d\x00\x00\x00\x5e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x25\x02\x7a\x00\x53\x00\x00\x00\x54\x00\x55\x00\x56\x00\x57\x00\x58\x00\x59\x00\x00\x00\x00\x00\x4a\x00\x00\x00\x4b\x00\x00\x00\x00\x00\x00\x00\x4c\x00\x5a\x00\x5b\x00\x4d\x00\x4e\x00\x4f\x00\x50\x00\x00\x00\x51\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x5d\x00\x00\x00\x5e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x24\x02\x7a\x00\x53\x00\x00\x00\x54\x00\x55\x00\x56\x00\x57\x00\x58\x00\x59\x00\x00\x00\x00\x00\x4a\x00\x00\x00\x4b\x00\x00\x00\x00\x00\x00\x00\x4c\x00\x5a\x00\x5b\x00\x4d\x00\x4e\x00\x4f\x00\x50\x00\x00\x00\x51\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x5d\x00\x00\x00\x5e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x23\x02\x7a\x00\x53\x00\x00\x00\x54\x00\x55\x00\x56\x00\x57\x00\x58\x00\x59\x00\x00\x00\x00\x00\x4a\x00\x00\x00\x4b\x00\x00\x00\x00\x00\x00\x00\x4c\x00\x5a\x00\x5b\x00\x4d\x00\x4e\x00\x4f\x00\x50\x00\x00\x00\x51\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x5d\x00\x00\x00\x5e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x22\x02\x7a\x00\x53\x00\x00\x00\x54\x00\x55\x00\x56\x00\x57\x00\x58\x00\x59\x00\x00\x00\x00\x00\x4a\x00\x00\x00\x4b\x00\x00\x00\x00\x00\x00\x00\x4c\x00\x5a\x00\x5b\x00\x4d\x00\x4e\x00\x4f\x00\x50\x00\x00\x00\x51\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x5d\x00\x00\x00\x5e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x02\x7a\x00\x53\x00\x00\x00\x54\x00\x55\x00\x56\x00\x57\x00\x58\x00\x59\x00\x00\x00\x00\x00\x4a\x00\x00\x00\x4b\x00\x00\x00\x00\x00\x00\x00\x4c\x00\x5a\x00\x5b\x00\x4d\x00\x4e\x00\x4f\x00\x50\x00\x00\x00\x51\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x5d\x00\x00\x00\x5e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x42\x02\x7a\x00\x53\x00\x00\x00\x54\x00\x55\x00\x56\x00\x57\x00\x58\x00\x59\x00\x00\x00\x00\x00\x4a\x00\x00\x00\x4b\x00\x00\x00\x00\x00\x00\x00\x4c\x00\x5a\x00\x5b\x00\x4d\x00\x4e\x00\x4f\x00\x50\x00\x00\x00\x51\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x5d\x00\x00\x00\x5e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x41\x02\x7a\x00\x53\x00\x00\x00\x54\x00\x55\x00\x56\x00\x57\x00\x58\x00\x59\x00\x00\x00\x00\x00\x4a\x00\x00\x00\x4b\x00\x00\x00\x00\x00\x00\x00\x4c\x00\x5a\x00\x5b\x00\x4d\x00\x4e\x00\x4f\x00\x50\x00\x00\x00\x51\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x5d\x00\x00\x00\x5e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x94\x02\x7a\x00\x53\x00\x00\x00\x54\x00\x55\x00\x56\x00\x57\x00\x58\x00\x59\x00\x00\x00\x00\x00\x4a\x00\x00\x00\x4b\x00\x00\x00\x00\x00\x00\x00\x4c\x00\x5a\x00\x5b\x00\x4d\x00\x4e\x00\x4f\x00\x50\x00\x00\x00\x51\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x5d\x00\x00\x00\x5e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x93\x02\x7a\x00\x53\x00\x00\x00\x54\x00\x55\x00\x56\x00\x57\x00\x58\x00\x59\x00\x00\x00\x00\x00\x4a\x00\x00\x00\x4b\x00\x00\x00\x00\x00\x00\x00\x4c\x00\x5a\x00\x5b\x00\x4d\x00\x4e\x00\x4f\x00\x50\x00\x00\x00\x51\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x5d\x00\x00\x00\x5e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa5\x02\x7a\x00\x53\x00\x00\x00\x54\x00\x55\x00\x56\x00\x57\x00\x58\x00\x59\x00\x00\x00\x00\x00\x4a\x00\x00\x00\x4b\x00\x00\x00\x00\x00\x00\x00\x4c\x00\x5a\x00\x5b\x00\x4d\x00\x4e\x00\x4f\x00\x50\x00\x00\x00\x51\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x5d\x00\x00\x00\x5e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x92\x01\x00\x00\x54\x00\x55\x00\x56\x00\x57\x00\x58\x00\x59\x00\x00\x00\x00\x00\x4a\x00\x00\x00\x4b\x00\x00\x00\x00\x00\x00\x00\x4c\x00\x5a\x00\x5b\x00\x4d\x00\x4e\x00\x4f\x00\x50\x00\x00\x00\x51\x00\x00\x00\x00\x00\x4a\x00\x00\x00\x4b\x00\x5d\x00\x00\x00\x5e\x00\x4c\x00\x00\x00\x00\x00\x4d\x00\x4e\x00\x4f\x00\x50\x00\x00\x00\x51\x00\x75\x01\x76\x01\x55\x00\x56\x00\x57\x00\x58\x00\x59\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x5a\x00\x5b\x00\x37\x01\x55\x00\x56\x00\x57\x00\x58\x00\x59\x00\x00\x00\x00\x00\x4a\x00\x00\x00\x4b\x00\x5d\x00\x00\x00\x5e\x00\x4c\x00\x5a\x00\x5b\x00\x4d\x00\x4e\x00\x4f\x00\x50\x00\x00\x00\x51\x00\x00\x00\x00\x00\x4a\x00\x00\x00\x4b\x00\x00\x00\x00\x00\x00\x00\x4c\x00\x00\x00\x00\x00\x4d\x00\x4e\x00\x4f\x00\x50\x00\x00\x00\x51\x00\x00\x00\x40\x02\x55\x00\x56\x00\x57\x00\x58\x00\x59\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x5d\x00\x00\x00\x5e\x00\x00\x00\x5a\x00\x5b\x00\x3f\x02\x55\x00\x56\x00\x57\x00\x58\x00\x59\x00\x00\x00\x00\x00\x4a\x00\x00\x00\x4b\x00\x5d\x00\x00\x00\x5e\x00\x4c\x00\x5a\x00\x5b\x00\x4d\x00\x4e\x00\x4f\x00\x50\x00\x85\x00\x51\x00\x00\x00\x86\x00\x00\x00\x00\x00\x87\x00\x00\x00\x00\x00\x88\x00\x89\x00\x00\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x8c\x00\x8d\x00\x8e\x00\x8f\x00\x90\x00\x91\x00\x44\x01\x57\x00\x58\x00\x59\x00\x00\x00\x92\x00\x00\x00\x00\x00\x00\x00\x5d\x00\x00\x00\x5e\x00\x00\x00\x5a\x00\x5b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x5d\x00\x00\x00\x5e\x00\x92\xff\x95\x00\x92\xff\x96\x00\x92\xff\x92\xff\x92\xff\x00\x00\x92\xff\x92\xff\x92\xff\x92\xff\x92\xff\x92\xff\x92\xff\x92\xff\x00\x00\x92\xff\x92\xff\x00\x00\x92\xff\x97\x00\x92\xff\x92\xff\x92\xff\x92\xff\x2e\x00\x92\xff\x00\x00\x00\x00\x00\x00\x92\xff\x92\xff\x92\xff\x00\x00\x00\x00\x00\x00\x30\x00\x5d\x00\x92\xff\x5e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x92\xff\x00\x00\x93\x00\x31\x00\x32\x00\x92\xff\x33\x00\x34\x00\x92\xff\x92\xff\x00\x00\x92\xff\x9b\x00\x71\x00\x36\x00\x92\xff\x37\x00\x38\x00\x74\x00\x75\x00\x92\xff\x92\xff\x76\x00\x92\xff\x3a\x00\x3b\x00\x9c\x00\x92\xff\x92\xff\x97\xff\x97\xff\x97\xff\x97\xff\x97\xff\x97\xff\x97\xff\x00\x00\x97\xff\x97\xff\x97\xff\x25\x01\x26\x01\x27\x01\x28\x01\x97\xff\x00\x00\x97\xff\x97\xff\x00\x00\x97\xff\x97\xff\x97\xff\x29\x01\x97\xff\x97\xff\x97\xff\x97\xff\x00\x00\x00\x00\x00\x00\x97\xff\x97\xff\x97\xff\x00\x00\x00\x00\x00\x00\x97\xff\x00\x00\x97\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x97\xff\x00\x00\x00\x00\x97\xff\x97\xff\x97\xff\x97\xff\x97\xff\x97\xff\x97\xff\x00\x00\x97\xff\x00\x00\x97\xff\x97\xff\x97\xff\x97\xff\x97\xff\x97\xff\x97\xff\x2a\x01\x2b\x01\x97\xff\x97\xff\x97\xff\x97\xff\x97\xff\x97\xff\x97\xff\x94\xff\x94\xff\x94\xff\x94\xff\x94\xff\x94\xff\x94\xff\x00\x00\x94\xff\x94\xff\x94\xff\x94\xff\x94\xff\x94\xff\x94\xff\x94\xff\x00\x00\x94\xff\x94\xff\x00\x00\x94\xff\x94\xff\x94\xff\x94\xff\x94\xff\x94\xff\x94\xff\x94\xff\x00\x00\x00\x00\x00\x00\x94\xff\x94\xff\x94\xff\x00\x00\x00\x00\x00\x00\x94\xff\x00\x00\x94\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x94\xff\x00\x00\x00\x00\x94\xff\x94\xff\x94\xff\x94\xff\x94\xff\x94\xff\x94\xff\x00\x00\x94\xff\x00\x00\x94\xff\x94\xff\x94\xff\x94\xff\x94\xff\x94\xff\x94\xff\x94\xff\x94\xff\x94\xff\x94\xff\x94\xff\x94\xff\x94\xff\x94\xff\x94\xff\x93\xff\x93\xff\x93\xff\x93\xff\x93\xff\x93\xff\x93\xff\x00\x00\x93\xff\x93\xff\x93\xff\x93\xff\x93\xff\x93\xff\x93\xff\x93\xff\x00\x00\x93\xff\x93\xff\x00\x00\x93\xff\x93\xff\x93\xff\x93\xff\x93\xff\x93\xff\x93\xff\x93\xff\x00\x00\x00\x00\x00\x00\x93\xff\x93\xff\x93\xff\x00\x00\x00\x00\x00\x00\x93\xff\x00\x00\x93\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x93\xff\x00\x00\x00\x00\x93\xff\x93\xff\x93\xff\x93\xff\x93\xff\x93\xff\x93\xff\x00\x00\x93\xff\x00\x00\x93\xff\x93\xff\x93\xff\x93\xff\x93\xff\x93\xff\x93\xff\x93\xff\x93\xff\x93\xff\x93\xff\x93\xff\x93\xff\x93\xff\x93\xff\x93\xff\x9b\xff\x9b\xff\x9b\xff\x9b\xff\x9b\xff\x9b\xff\x9b\xff\x00\x00\x9b\xff\x9b\xff\x9b\xff\x00\x00\x9b\xff\x00\x00\x9b\xff\x2c\x01\x00\x00\x9b\xff\x9b\xff\x00\x00\x9b\xff\x9b\xff\x9b\xff\x9b\xff\x9b\xff\x9b\xff\x9b\xff\x9b\xff\x00\x00\x00\x00\x00\x00\x9b\xff\x9b\xff\x9b\xff\x00\x00\x00\x00\x00\x00\x9b\xff\x00\x00\x9b\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x9b\xff\x00\x00\x00\x00\x9b\xff\x9b\xff\x9b\xff\x9b\xff\x9b\xff\x9b\xff\x9b\xff\x00\x00\x9b\xff\x00\x00\x9b\xff\x9b\xff\x9b\xff\x9b\xff\x9b\xff\x9b\xff\x9b\xff\x9b\xff\x9b\xff\x9b\xff\x9b\xff\x9b\xff\x9b\xff\x9b\xff\x9b\xff\x9b\xff\x5e\xfe\x5e\xfe\x5e\xfe\x5e\xfe\x5e\xfe\x5e\xfe\x5e\xfe\x00\x00\x5e\xfe\x5e\xfe\x00\x00\x00\x00\x5e\xfe\x00\x00\x5e\xfe\x5e\xfe\x00\x00\x5e\xfe\x5e\xfe\x5e\xfe\x5e\xfe\x5e\xfe\x5e\xfe\x5e\xfe\x5e\xfe\x5e\xfe\x5e\xfe\x5e\xfe\x00\x00\x00\x00\x00\x00\x5e\xfe\x5e\xfe\x5e\xfe\x00\x00\x00\x00\x00\x00\x5e\xfe\x00\x00\x5e\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x5e\xfe\x00\x00\x00\x00\x5e\xfe\x5e\xfe\x5e\xfe\x5e\xfe\x5e\xfe\x5e\xfe\x5e\xfe\x00\x00\x5e\xfe\x00\x00\x5e\xfe\x5e\xfe\x5e\xfe\x5e\xfe\x5e\xfe\x5e\xfe\x5e\xfe\x5e\xfe\x5e\xfe\x5e\xfe\x5e\xfe\x5e\xfe\x5e\xfe\x5e\xfe\x5e\xfe\x5e\xfe\x68\xff\x68\xff\x68\xff\x68\xff\x68\xff\x68\xff\x68\xff\x00\x00\x68\xff\x68\xff\x00\x00\x00\x00\x68\xff\x00\x00\x68\xff\x68\xff\x00\x00\x68\xff\x47\x01\x00\x00\x68\xff\x68\xff\x68\xff\x68\xff\x68\xff\x68\xff\x68\xff\x68\xff\x00\x00\x00\x00\x00\x00\x68\xff\x68\xff\x68\xff\x00\x00\x00\x00\x00\x00\x68\xff\x00\x00\x68\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x68\xff\x00\x00\x00\x00\x68\xff\x68\xff\x68\xff\x68\xff\x68\xff\x68\xff\x68\xff\x00\x00\x68\xff\x00\x00\x68\xff\x68\xff\x68\xff\x68\xff\x68\xff\x68\xff\x68\xff\x68\xff\x68\xff\x68\xff\x68\xff\x68\xff\x68\xff\x68\xff\x68\xff\x68\xff\x62\xff\x60\x00\x62\xff\x61\x00\x62\xff\x62\x00\x62\xff\x00\x00\x62\xff\x62\xff\x00\x00\x00\x00\x62\xff\x00\x00\x62\xff\x62\xff\x00\x00\x62\xff\x62\xff\x00\x00\x62\xff\x63\x00\x64\x00\x62\xff\x46\x01\x66\x00\x67\x00\x68\x00\x00\x00\x00\x00\x00\x00\x69\x00\x62\xff\x2f\x00\x00\x00\x00\x00\x00\x00\x6a\x00\x00\x00\x6b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x6c\x00\x00\x00\x00\x00\x6d\x00\x6e\x00\x62\xff\x6f\x00\x70\x00\x62\xff\x35\x00\x00\x00\x62\xff\x00\x00\x71\x00\x72\x00\x73\x00\x37\x00\x38\x00\x74\x00\x75\x00\x62\xff\x62\xff\x76\x00\x39\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x62\xff\x54\xff\x54\xff\x54\xff\x44\x01\x54\xff\x54\xff\x54\xff\x00\x00\x54\xff\x54\xff\x00\x00\x00\x00\x54\xff\x00\x00\x54\xff\x54\xff\x00\x00\x54\xff\x54\xff\x00\x00\x54\xff\x54\xff\x54\xff\x54\xff\x54\xff\x54\xff\x54\xff\x54\xff\x00\x00\x00\x00\x00\x00\x54\xff\x54\xff\x54\xff\x00\x00\x00\x00\x00\x00\x54\xff\x00\x00\x54\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x54\xff\x00\x00\x00\x00\x54\xff\x54\xff\x54\xff\x54\xff\x54\xff\x54\xff\x54\xff\x00\x00\x54\xff\x00\x00\x54\xff\x54\xff\x54\xff\x54\xff\x54\xff\x54\xff\x54\xff\x54\xff\x54\xff\x54\xff\x54\xff\x54\xff\x54\xff\x54\xff\x54\xff\x54\xff\x6a\xff\x6a\xff\x6a\xff\x6a\xff\x6a\xff\x6a\xff\x6a\xff\x00\x00\x6a\xff\x6a\xff\x00\x00\x00\x00\x26\x01\x00\x00\x28\x01\x30\x01\x00\x00\x6a\xff\x6a\xff\x00\x00\x6a\xff\x6a\xff\x6a\xff\x29\x01\x6a\xff\x6a\xff\x6a\xff\x6a\xff\x00\x00\x00\x00\x00\x00\x6a\xff\x6a\xff\x6a\xff\x00\x00\x00\x00\x00\x00\x6a\xff\x00\x00\x6a\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x6a\xff\x00\x00\x00\x00\x6a\xff\x6a\xff\x6a\xff\x6a\xff\x6a\xff\x6a\xff\x6a\xff\x00\x00\x6a\xff\x00\x00\x6a\xff\x6a\xff\x6a\xff\x6a\xff\x6a\xff\x6a\xff\x6a\xff\x2a\x01\x2b\x01\x6a\xff\x6a\xff\x6a\xff\x6a\xff\x6a\xff\x6a\xff\x6a\xff\x67\xff\x67\xff\x67\xff\x67\xff\x67\xff\x67\xff\x67\xff\x00\x00\x67\xff\x67\xff\x00\x00\x00\x00\x67\xff\x00\x00\x67\xff\x67\xff\x00\x00\x67\xff\x47\x01\x00\x00\x67\xff\x67\xff\x67\xff\x67\xff\x67\xff\x67\xff\x67\xff\x67\xff\x00\x00\x00\x00\x00\x00\x67\xff\x67\xff\x67\xff\x00\x00\x00\x00\x00\x00\x67\xff\x00\x00\x67\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x67\xff\x00\x00\x00\x00\x67\xff\x67\xff\x67\xff\x67\xff\x67\xff\x67\xff\x67\xff\x00\x00\x67\xff\x00\x00\x67\xff\x67\xff\x67\xff\x67\xff\x67\xff\x67\xff\x67\xff\x67\xff\x67\xff\x67\xff\x67\xff\x67\xff\x67\xff\x67\xff\x67\xff\x67\xff\x6c\xff\x6c\xff\x6c\xff\x6c\xff\x6c\xff\x6c\xff\x6c\xff\x00\x00\x6c\xff\x6c\xff\x00\x00\x00\x00\x6c\xff\x00\x00\x6c\xff\x6c\xff\x00\x00\x6c\xff\x6c\xff\x00\x00\x6c\xff\x6c\xff\x6c\xff\x6c\xff\x6c\xff\x6c\xff\x6c\xff\x6c\xff\x00\x00\x00\x00\x00\x00\x6c\xff\x6c\xff\x6c\xff\x00\x00\x00\x00\x00\x00\x6c\xff\x00\x00\x6c\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x6c\xff\x00\x00\x00\x00\x6c\xff\x6c\xff\x6c\xff\x6c\xff\x6c\xff\x6c\xff\x6c\xff\x00\x00\x64\x02\x00\x00\x6c\xff\x6c\xff\x6c\xff\x6c\xff\x6c\xff\x6c\xff\x6c\xff\x6c\xff\x6c\xff\x6c\xff\x6c\xff\x6c\xff\x6c\xff\x6c\xff\x6c\xff\x6c\xff\xa8\xfe\xa8\xfe\xa8\xfe\xa8\xfe\xa8\xfe\xa8\xfe\xa8\xfe\x00\x00\xa8\xfe\xa8\xfe\x00\x00\x00\x00\xa8\xfe\x00\x00\xa8\xfe\xa8\xfe\x00\x00\xb3\x01\xa8\xfe\x00\x00\xa8\xfe\xa8\xfe\xa8\xfe\xa8\xfe\xa8\xfe\xa8\xfe\xa8\xfe\xa8\xfe\x00\x00\x00\x00\x00\x00\xa8\xfe\xa8\xfe\xa8\xfe\x00\x00\x00\x00\x00\x00\xa8\xfe\x00\x00\xa8\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa8\xfe\x00\x00\x00\x00\xa8\xfe\xa8\xfe\xa8\xfe\xa8\xfe\xa8\xfe\xa8\xfe\xa8\xfe\x00\x00\xa8\xfe\x00\x00\xa8\xfe\xa8\xfe\xa8\xfe\xa8\xfe\xa8\xfe\xa8\xfe\xa8\xfe\xa8\xfe\xa8\xfe\xa8\xfe\xa8\xfe\xa8\xfe\xa8\xfe\xa8\xfe\xa8\xfe\xa8\xfe\x89\xfe\x95\x00\x89\xfe\x96\x00\x00\x00\x00\x00\x00\x00\x00\x00\x89\xfe\x89\xfe\x00\x00\x00\x00\x89\xfe\x89\xfe\x00\x00\x00\x00\x00\x00\x89\xfe\x00\x00\x00\x00\x89\xfe\x97\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2e\x00\x00\x00\x00\x00\x00\x00\x21\x01\x00\x00\x89\xfe\x00\x00\x00\x00\x6e\xfe\x00\x00\x30\x00\x6e\xfe\x26\x01\x00\x00\x28\x01\x00\x00\x00\x00\x6e\xfe\x00\x00\x00\x00\x6e\xfe\x31\x00\x32\x00\x29\x01\x33\x00\x34\x00\x22\x01\x00\x00\x2e\x00\x89\xfe\x9b\x00\x71\x00\x36\x00\x00\x00\x37\x00\x38\x00\x74\x00\x75\x00\x00\x00\x30\x00\x76\x00\x00\x00\x3a\x00\x3b\x00\x9c\x00\x37\x02\x89\xfe\x88\xfe\xc4\x01\x00\x00\x31\x00\x32\x00\x00\x00\x33\x00\x34\x00\x88\xfe\x88\xfe\x00\x00\x00\x00\x00\x00\x2e\x00\x36\x00\x00\x00\x88\xfe\x00\x00\x2a\x01\x2b\x01\x00\x00\x00\x00\x00\x00\x00\x00\x30\x00\x00\x00\x2e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x88\xfe\x00\x00\x00\x00\x31\x00\x32\x00\x30\x00\x33\x00\x34\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x36\x00\x00\x00\x31\x00\x32\x00\x00\x00\x33\x00\x34\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x36\x00\x00\x00\x1a\xff\x1a\xff\x1a\xff\x1a\xff\x1a\xff\x1a\xff\x00\x00\x1a\xff\x00\x00\x1a\xff\x1a\xff\x1a\xff\x88\xfe\x1a\xff\x1a\xff\x1a\xff\x1a\xff\x00\x00\x85\x00\x1a\xff\x1a\xff\x86\x00\x1a\xff\x63\x01\x87\x00\x1a\xff\x00\x00\x88\x00\x89\x00\x00\x00\x00\x00\x8a\x00\x1a\xff\x00\x00\x00\x00\x00\x00\x1a\xff\x99\x01\x90\x00\x91\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1a\xff\x1a\xff\x00\x00\x1a\xff\x1a\xff\x00\x00\x1a\xff\x00\x00\x00\x00\x00\x00\x00\x00\x1a\xff\x00\x00\x1a\xff\x1a\xff\x00\x00\x00\x00\x1a\xff\x1a\xff\x00\x00\x1a\xff\x1a\xff\x1a\xff\x1a\xff\x1a\xff\x29\x00\xa9\xfe\x2a\x00\xa9\xfe\x2b\x00\xa9\xfe\x00\x00\xa9\xfe\x00\x00\xa9\xfe\xa9\xfe\xa9\xfe\x67\x00\xa9\xfe\xa9\xfe\xa9\xfe\xa9\xfe\x00\x00\x85\x00\xa9\xfe\x2c\x00\x86\x00\xa9\xfe\x6a\x00\x87\x00\x2e\x00\x00\x00\x88\x00\x89\x00\x00\x00\x00\x00\x8a\x00\x2f\x00\x00\x00\x6d\x00\x6e\x00\x30\x00\x6f\x00\x70\x00\x77\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x72\x00\x73\x00\x31\x00\x32\x00\x00\x00\x33\x00\x34\x00\x60\x00\x35\x00\x61\x00\x00\x00\x62\x00\x3b\x01\x36\x00\x00\x00\x37\x00\x38\x00\x00\x00\x00\x00\xa9\xfe\xa9\xfe\x00\x00\x39\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x63\x00\x64\x00\x65\x00\x00\x00\x66\x00\x67\x00\x68\x00\x00\x00\x00\x00\x00\x00\x69\x00\x00\x00\x2f\x00\x00\x00\x00\x00\x00\x00\x6a\x00\x00\x00\x6b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x6c\x00\x00\x00\x00\x00\x6d\x00\x6e\x00\x00\x00\x6f\x00\x70\x00\x00\x00\x35\x00\x00\x00\x00\x00\x00\x00\x71\x00\x72\x00\x73\x00\x37\x00\x38\x00\x74\x00\x75\x00\x00\x00\x00\x00\x76\x00\x39\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x60\x00\x00\x00\x61\x00\x00\x00\x62\x00\x00\x00\x85\x00\xaa\x02\x00\x00\x86\x00\x00\x00\x00\x00\x87\x00\x00\x00\x00\x00\x88\x00\x89\x00\x00\x00\x00\x00\x8a\x00\x63\x00\x64\x00\x65\x00\x00\x00\x66\x00\x67\x00\x68\x00\x6f\x01\x00\x00\x00\x00\x69\x00\x00\x00\x2f\x00\x00\x00\x00\x00\x00\x00\x6a\x00\x00\x00\x6b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x6c\x00\x00\x00\x00\x00\x6d\x00\x6e\x00\x00\x00\x6f\x00\x70\x00\x60\x00\x35\x00\x61\x00\x00\x00\x62\x00\x71\x00\x72\x00\x73\x00\x37\x00\x38\x00\x74\x00\x75\x00\x00\x00\x00\x00\x76\x00\x39\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x63\x00\x64\x00\x65\x00\x00\x00\x66\x00\x67\x00\x68\x00\x00\x00\x00\x00\x00\x00\x69\x00\x00\x00\x2f\x00\x00\x00\x00\x00\x00\x00\x6a\x00\x00\x00\x6b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x6c\x00\x00\x00\x00\x00\x6d\x00\x6e\x00\x00\x00\x6f\x00\x70\x00\x00\x00\x35\x00\x00\x00\x00\x00\x00\x00\x71\x00\x72\x00\x73\x00\x37\x00\x38\x00\x74\x00\x75\x00\x00\x00\x00\x00\x76\x00\x39\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x29\x00\x00\x00\x2a\x00\x00\x00\x2b\x00\x00\x00\x00\x00\x00\x00\x2e\x00\x00\x00\x16\x02\x1a\xff\x00\x00\x1a\xff\x20\x02\xb2\x01\xb3\x01\x00\x00\x00\x00\x30\x00\x2c\x00\x00\x00\x1a\xff\x63\x01\x00\x00\x2e\x00\x00\x00\x00\x00\x17\x02\x00\x00\x31\x00\x32\x00\x2f\x00\x33\x00\x34\x00\x00\x00\x30\x00\x18\x02\x00\x00\x00\x00\xe0\x01\x36\x00\x00\x00\x40\x00\x00\x00\xe1\x01\x00\x00\x31\x00\x32\x00\x00\x00\x33\x00\x34\x00\x29\x00\x35\x00\x2a\x00\x00\x00\x2b\x00\x58\x01\x36\x00\x00\x00\x37\x00\x38\x00\x00\x00\x00\x00\x1a\xff\x1a\xff\x00\x00\x39\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x2c\x00\x85\x00\x2d\x00\x00\x00\x86\x00\x2e\x00\x00\x00\x87\x00\x00\x00\x00\x00\x88\x00\x89\x00\x2f\x00\x00\x00\x8a\x00\x00\x00\x30\x00\x00\x00\xa4\xfe\x21\x01\x00\x00\x00\x00\xfd\x01\x00\x00\x00\x00\x00\x00\x00\x00\x31\x00\x32\x00\x00\x00\x33\x00\x34\x00\x29\x00\x35\x00\x2a\x00\xa4\xfe\x2b\x00\xa4\xfe\x36\x00\x00\x00\x37\x00\x38\x00\x22\x01\x00\x00\x2e\x00\x00\x00\x00\x00\x39\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x2c\x00\x00\x00\x2d\x00\x30\x00\x00\x00\x2e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2f\x00\x00\x00\x31\x00\x32\x00\x30\x00\x33\x00\x34\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x36\x00\x00\x00\x31\x00\x32\x00\x00\x00\x33\x00\x34\x00\x29\x00\x35\x00\x2a\x00\x00\x00\x2b\x00\x00\x00\x36\x00\x00\x00\x37\x00\x38\x00\x00\x00\x00\x00\x2e\x00\x00\x00\xdf\x00\x39\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x2c\x00\x00\x00\x00\x00\x30\x00\x00\x00\x2e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2f\x00\x00\x00\x31\x00\x32\x00\x30\x00\x33\x00\x34\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x36\x00\x00\x00\x31\x00\x32\x00\x00\x00\x33\x00\x34\x00\x29\x00\x35\x00\x2a\x00\x00\x00\x2b\x00\x00\x00\x36\x00\x00\x00\x37\x00\x38\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x39\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x2c\x00\x00\x00\x2d\x00\x00\x00\x00\x00\x2e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2f\x00\x00\x00\x00\x00\x00\x00\x30\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x31\x00\x32\x00\x00\x00\x33\x00\x34\x00\x29\x00\x35\x00\x2a\x00\x00\x00\x2b\x00\x00\x00\x36\x00\x00\x00\x37\x00\x38\x00\x00\x00\x00\x00\x00\x00\x00\x00\x6c\x02\x39\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x2c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2f\x00\x00\x00\x00\x00\x00\x00\x30\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x31\x00\x32\x00\x00\x00\x33\x00\x34\x00\x29\x00\x35\x00\x2a\x00\x00\x00\x2b\x00\x00\x00\x36\x00\x00\x00\x37\x00\x38\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x39\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x2c\x00\x00\x00\x2d\x00\x00\x00\x00\x00\x2e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2f\x00\x00\x00\x00\x00\x00\x00\x30\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x31\x00\x32\x00\x00\x00\x33\x00\x34\x00\x29\x00\x35\x00\x2a\x00\x00\x00\x2b\x00\x00\x00\x36\x00\x00\x00\x37\x00\x38\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x39\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x2c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2f\x00\x00\x00\x00\x00\x00\x00\x30\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x31\x00\x32\x00\x00\x00\x33\x00\x34\x00\x00\x00\x35\x00\x00\x00\x00\x00\x00\x00\x10\x01\x36\x00\x11\x01\x37\x00\x38\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x39\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x00\x00\xe6\x00\x00\x00\x00\x00\x00\x00\x12\x01\x00\x00\x98\x00\x00\x00\xe7\x00\x13\x01\xe9\x00\xea\x00\xeb\x00\xec\x00\xed\x00\xee\x00\xef\x00\x14\x01\x9a\x00\xf1\x00\x15\x01\xf3\x00\xf4\x00\xf5\x00\xf6\x00\xf7\x00\xf8\x00\xf9\x00\xfa\x00\xfb\x00\xfc\x00\x16\x01\x17\x01\xff\x00\x18\x01\x19\x01\x02\x01\x03\x01\x04\x01\x05\x01\x9b\x00\x71\x00\x1a\x01\x00\x00\x37\x00\x38\x00\x74\x00\x75\x00\x00\x00\x95\x00\x76\x00\x96\x00\x1b\x01\x1c\x01\x9c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x00\x00\x2e\x00\x00\x00\x00\x00\xc4\x01\x00\x00\x00\x00\x00\x00\x00\x00\x99\x00\x9a\x00\x00\x00\x30\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xcd\x01\x00\x00\x00\x00\x00\x00\x00\x00\x31\x00\x32\x00\x00\x00\x33\x00\x34\x00\x95\x00\x2e\x00\x96\x00\x00\x00\x9b\x00\x71\x00\x36\x00\x00\x00\x37\x00\x38\x00\x74\x00\x75\x00\x30\x00\x00\x00\x76\x00\x00\x00\x3a\x00\x3b\x00\x9c\x00\x00\x00\x97\x00\x00\x00\x98\x00\x31\x00\x32\x00\x2e\x00\x33\x00\x34\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x00\x00\x36\x00\x00\x00\x30\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x31\x00\x32\x00\x97\x00\x33\x00\x34\x00\x00\x00\x00\x00\x2e\x00\x00\x00\x9b\x00\x71\x00\x36\x00\x00\x00\x37\x00\x38\x00\x74\x00\x75\x00\x00\x00\x30\x00\x76\x00\x00\x00\x3a\x00\x3b\x00\x9c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x31\x00\x32\x00\x00\x00\x33\x00\x34\x00\x5d\x01\x00\x00\x00\x00\x00\x00\x9b\x00\x71\x00\x36\x00\x00\x00\x37\x00\x38\x00\x74\x00\x75\x00\x00\x00\x00\x00\x76\x00\x00\x00\x3a\x00\x3b\x00\x9c\x00\x00\x00\x00\x00\xe7\x00\xe8\x00\xe9\x00\xea\x00\xeb\x00\xec\x00\xed\x00\xee\x00\xef\x00\xf0\x00\x00\x00\xf1\x00\xf2\x00\xf3\x00\xf4\x00\xf5\x00\xf6\x00\xf7\x00\xf8\x00\xf9\x00\xfa\x00\xfb\x00\xfc\x00\xfd\x00\xfe\x00\xff\x00\x00\x01\x01\x01\x02\x01\x03\x01\x04\x01\x05\x01\x40\x01\x00\x00\x06\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\x01\x08\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe7\x00\xe8\x00\xe9\x00\xea\x00\xeb\x00\xec\x00\xed\x00\xee\x00\xef\x00\xf0\x00\x00\x00\xf1\x00\xf2\x00\xf3\x00\xf4\x00\xf5\x00\xf6\x00\xf7\x00\xf8\x00\xf9\x00\xfa\x00\xfb\x00\xfc\x00\xfd\x00\xfe\x00\xff\x00\x00\x01\x01\x01\x02\x01\x03\x01\x04\x01\x05\x01\x7d\x01\x00\x00\x06\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\x01\x08\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe7\x00\xe8\x00\xe9\x00\xea\x00\xeb\x00\xec\x00\xed\x00\xee\x00\xef\x00\xf0\x00\x00\x00\xf1\x00\xf2\x00\xf3\x00\xf4\x00\xf5\x00\xf6\x00\xf7\x00\xf8\x00\xf9\x00\xfa\x00\xfb\x00\xfc\x00\xfd\x00\xfe\x00\xff\x00\x00\x01\x01\x01\x02\x01\x03\x01\x04\x01\x05\x01\xc4\x01\x00\x00\x06\x01\x00\x00\x00\x00\x2e\x00\x00\x00\xde\x01\x00\x00\x00\x00\x00\x00\x00\x00\x07\x01\x08\x01\xc5\x01\x00\x00\x30\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2e\x00\x00\x00\x31\x00\x32\x00\x00\x00\x33\x00\x34\x00\x00\x00\x00\x00\xdf\x01\x00\x00\x30\x00\xe0\x01\x36\x00\x00\x00\x40\x00\x00\x00\xe1\x01\x00\x00\x00\x00\x00\x00\x00\x00\x31\x00\x32\x00\x00\x00\x33\x00\x34\x00\xe6\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x36\x00\x00\x00\xe7\x00\xe8\x00\xe9\x00\xea\x00\xeb\x00\xec\x00\xed\x00\xee\x00\xef\x00\xf0\x00\x00\x00\xf1\x00\xf2\x00\xf3\x00\xf4\x00\xf5\x00\xf6\x00\xf7\x00\xf8\x00\xf9\x00\xfa\x00\xfb\x00\xfc\x00\xfd\x00\xfe\x00\xff\x00\x00\x01\x01\x01\x02\x01\x03\x01\x04\x01\x05\x01\x00\x00\x00\x00\x06\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\x01\x08\x01\xe7\x00\xe8\x00\xe9\x00\xea\x00\xeb\x00\xec\x00\xed\x00\xee\x00\xef\x00\xf0\x00\x00\x00\xf1\x00\xf2\x00\xf3\x00\xf4\x00\xf5\x00\xf6\x00\xf7\x00\xf8\x00\xf9\x00\xfa\x00\xfb\x00\xfc\x00\xfd\x00\xfe\x00\xff\x00\x00\x01\x01\x01\x02\x01\x03\x01\x04\x01\x05\x01\x67\x00\x00\x00\x06\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x6a\x00\x07\x01\x08\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x6d\x00\x6e\x00\x00\x00\x6f\x00\x70\x00\x00\x00\x2e\x00\xbe\x01\xa9\x00\xaa\x00\xab\x00\x72\x00\x73\x00\x37\x00\x38\x00\x00\x00\xac\x00\x30\x00\xb5\x00\x00\x00\x00\x00\xad\x00\xae\x00\xaf\x00\xb0\x00\x00\x00\x00\x00\xb1\x00\x31\x00\x32\x00\x00\x00\x33\x00\x34\x00\x00\x00\x2e\x00\xb2\x00\xa9\x00\xaa\x00\xab\x00\x36\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac\x00\x30\x00\x00\x00\x00\x00\x00\x00\xad\x00\xae\x00\xaf\x00\xb0\x00\x00\x00\x00\x00\xb1\x00\x31\x00\x32\x00\x00\x00\x33\x00\x34\x00\x00\x00\x85\x00\xb2\x00\x00\x00\x86\x00\x00\x00\x36\x00\x87\x00\x00\x00\x00\x00\x88\x00\x89\x00\x00\x00\x00\x00\x8a\x00\x00\x00\xc6\x00\x8c\x00\x8d\x00\x8e\x00\x8f\x00\x90\x00\x91\x00\x85\x00\x00\x00\x00\x00\x86\x00\x00\x00\x92\x00\x87\x00\x00\x00\x00\x00\x88\x00\x89\x00\x00\x00\x00\x00\x8a\x00\x00\x00\xb7\x01\x8c\x00\x8d\x00\x8e\x00\x8f\x00\x90\x00\x91\x00\x85\x00\x00\x00\x00\x00\x86\x00\x00\x00\x92\x00\x87\x00\x00\x00\x00\x00\x88\x00\x89\x00\x00\x00\x00\x00\x8a\x00\x00\x00\xab\x01\x8c\x00\x8d\x00\x8e\x00\x8f\x00\x90\x00\x91\x00\x85\x00\x00\x00\x00\x00\x86\x00\x00\x00\x92\x00\x87\x00\x00\x00\x00\x00\x88\x00\x89\x00\x00\x00\x00\x00\x8a\x00\x00\x00\xa6\x01\x8c\x00\x8d\x00\x8e\x00\x8f\x00\x90\x00\x91\x00\x85\x00\x00\x00\x00\x00\x86\x00\x00\x00\x92\x00\x87\x00\x00\x00\x00\x00\x88\x00\x89\x00\x00\x00\x00\x00\x8a\x00\x00\x00\x96\x01\x8c\x00\x8d\x00\x8e\x00\x8f\x00\x90\x00\x91\x00\x85\x00\x00\x00\x00\x00\x86\x00\x00\x00\x92\x00\x87\x00\x00\x00\x00\x00\x88\x00\x89\x00\x00\x00\x00\x00\x8a\x00\x00\x00\x91\x01\x8c\x00\x8d\x00\x8e\x00\x8f\x00\x90\x00\x91\x00\x85\x00\x00\x00\x00\x00\x86\x00\x00\x00\x92\x00\x87\x00\x00\x00\x00\x00\x88\x00\x89\x00\x00\x00\x00\x00\x8a\x00\x00\x00\x74\x01\x8c\x00\x8d\x00\x8e\x00\x8f\x00\x90\x00\x91\x00\x85\x00\x00\x00\x00\x00\x86\x00\x00\x00\x92\x00\x87\x00\x00\x00\x00\x00\x88\x00\x89\x00\x00\x00\x00\x00\x8a\x00\x00\x00\x64\x01\x8c\x00\x8d\x00\x8e\x00\x8f\x00\x90\x00\x91\x00\x85\x00\x00\x00\x00\x00\x86\x00\x00\x00\x92\x00\x87\x00\x00\x00\x00\x00\x88\x00\x89\x00\x00\x00\x00\x00\x8a\x00\x00\x00\x07\x02\x8c\x00\x8d\x00\x8e\x00\x8f\x00\x90\x00\x91\x00\x85\x00\x00\x00\x00\x00\x86\x00\x00\x00\x92\x00\x87\x00\x00\x00\x00\x00\x88\x00\x89\x00\x00\x00\x00\x00\x8a\x00\x00\x00\x05\x02\x8c\x00\x8d\x00\x8e\x00\x8f\x00\x90\x00\x91\x00\x85\x00\x00\x00\x00\x00\x86\x00\x00\x00\x92\x00\x87\x00\x00\x00\x00\x00\x88\x00\x89\x00\x00\x00\x00\x00\x8a\x00\x00\x00\x04\x02\x8c\x00\x8d\x00\x8e\x00\x8f\x00\x90\x00\x91\x00\x85\x00\x00\x00\x00\x00\x86\x00\x00\x00\x92\x00\x87\x00\x00\x00\x00\x00\x88\x00\x89\x00\x00\x00\x00\x00\x8a\x00\x00\x00\xef\x01\x8c\x00\x8d\x00\x8e\x00\x8f\x00\x90\x00\x91\x00\x85\x00\x00\x00\x00\x00\x86\x00\x00\x00\x92\x00\x87\x00\x00\x00\x00\x00\x88\x00\x89\x00\x00\x00\x00\x00\x8a\x00\x00\x00\xe9\x01\x8c\x00\x8d\x00\x8e\x00\x8f\x00\x90\x00\x91\x00\x85\x00\x00\x00\x00\x00\x86\x00\x00\x00\x92\x00\x87\x00\x00\x00\x00\x00\x88\x00\x89\x00\x00\x00\x00\x00\x8a\x00\x00\x00\xe2\x01\x8c\x00\x8d\x00\x8e\x00\x8f\x00\x90\x00\x91\x00\x85\x00\x00\x00\x00\x00\x86\x00\x00\x00\x92\x00\x87\x00\x00\x00\x00\x00\x88\x00\x89\x00\x00\x00\x00\x00\x8a\x00\x00\x00\x70\x02\x8c\x00\x8d\x00\x8e\x00\x8f\x00\x90\x00\x91\x00\x85\x00\x00\x00\x00\x00\x86\x00\x00\x00\x92\x00\x87\x00\x00\x00\x00\x00\x88\x00\x89\x00\x00\x00\x00\x00\x8a\x00\x00\x00\x60\x02\x8c\x00\x8d\x00\x8e\x00\x8f\x00\x90\x00\x91\x00\x85\x00\x00\x00\x00\x00\x86\x00\x00\x00\x92\x00\x87\x00\x00\x00\x00\x00\x88\x00\x89\x00\x00\x00\x00\x00\x8a\x00\x00\x00\x5e\x02\x8c\x00\x8d\x00\x8e\x00\x8f\x00\x90\x00\x91\x00\x85\x00\x00\x00\x00\x00\x86\x00\x00\x00\x92\x00\x87\x00\x00\x00\x00\x00\x88\x00\x89\x00\x00\x00\x00\x00\x8a\x00\x00\x00\x50\x02\x8c\x00\x8d\x00\x8e\x00\x8f\x00\x90\x00\x91\x00\x85\x00\x00\x00\x00\x00\x86\x00\x00\x00\x92\x00\x87\x00\x00\x00\x00\x00\x88\x00\x89\x00\x00\x00\x00\x00\x8a\x00\x00\x00\x8a\x02\x8c\x00\x8d\x00\x8e\x00\x8f\x00\x90\x00\x91\x00\x85\x00\x00\x00\x00\x00\x86\x00\x00\x00\x92\x00\x87\x00\x00\x00\x00\x00\x88\x00\x89\x00\x00\x00\x00\x00\x8a\x00\x00\x00\x86\x02\x8c\x00\x8d\x00\x8e\x00\x8f\x00\x90\x00\x91\x00\x85\x00\x00\x00\x00\x00\x86\x00\x00\x00\x92\x00\x87\x00\x00\x00\x00\x00\x88\x00\x89\x00\x00\x00\x00\x00\x8a\x00\x00\x00\x83\x02\x8c\x00\x8d\x00\x8e\x00\x8f\x00\x90\x00\x91\x00\x85\x00\x00\x00\x00\x00\x86\x00\x00\x00\x92\x00\x87\x00\x00\x00\x00\x00\x88\x00\x89\x00\x00\x00\x00\x00\x8a\x00\x00\x00\x81\x02\x8c\x00\x8d\x00\x8e\x00\x8f\x00\x90\x00\x91\x00\x85\x00\x00\x00\x00\x00\x86\x00\x00\x00\x92\x00\x87\x00\x00\x00\x00\x00\x88\x00\x89\x00\x00\x00\x00\x00\x8a\x00\x00\x00\x80\x02\x8c\x00\x8d\x00\x8e\x00\x8f\x00\x90\x00\x91\x00\x85\x00\x00\x00\x00\x00\x86\x00\x00\x00\x92\x00\x87\x00\x00\x00\x00\x00\x88\x00\x89\x00\x00\x00\x00\x00\x8a\x00\x00\x00\x00\x00\x98\x01\x8d\x00\x8e\x00\x8f\x00\x90\x00\x91\x00\x85\x00\x00\x00\x00\x00\x86\x00\x00\x00\x92\x00\x87\x00\x00\x00\x00\x00\x88\x00\x89\x00\x00\x00\x00\x00\x8a\x00\x00\x00\x00\x00\x97\x01\x8d\x00\x8e\x00\x8f\x00\x90\x00\x91\x00\x85\x00\x00\x00\x00\x00\x86\x00\x00\x00\x92\x00\x87\x00\x00\x00\x00\x00\x88\x00\x89\x00\x00\x00\x00\x00\x8a\x00\x00\x00\x00\x00\x0c\x02\x8d\x00\x8e\x00\x8f\x00\x90\x00\x91\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x92\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"#

happyReduceArr = Happy_Data_Array.array (23, 436) [
	(23 , happyReduce_23),
	(24 , happyReduce_24),
	(25 , happyReduce_25),
	(26 , happyReduce_26),
	(27 , happyReduce_27),
	(28 , happyReduce_28),
	(29 , happyReduce_29),
	(30 , happyReduce_30),
	(31 , happyReduce_31),
	(32 , happyReduce_32),
	(33 , happyReduce_33),
	(34 , happyReduce_34),
	(35 , happyReduce_35),
	(36 , happyReduce_36),
	(37 , happyReduce_37),
	(38 , happyReduce_38),
	(39 , happyReduce_39),
	(40 , happyReduce_40),
	(41 , happyReduce_41),
	(42 , happyReduce_42),
	(43 , happyReduce_43),
	(44 , happyReduce_44),
	(45 , happyReduce_45),
	(46 , happyReduce_46),
	(47 , happyReduce_47),
	(48 , happyReduce_48),
	(49 , happyReduce_49),
	(50 , happyReduce_50),
	(51 , happyReduce_51),
	(52 , happyReduce_52),
	(53 , happyReduce_53),
	(54 , happyReduce_54),
	(55 , happyReduce_55),
	(56 , happyReduce_56),
	(57 , happyReduce_57),
	(58 , happyReduce_58),
	(59 , happyReduce_59),
	(60 , happyReduce_60),
	(61 , happyReduce_61),
	(62 , happyReduce_62),
	(63 , happyReduce_63),
	(64 , happyReduce_64),
	(65 , happyReduce_65),
	(66 , happyReduce_66),
	(67 , happyReduce_67),
	(68 , happyReduce_68),
	(69 , happyReduce_69),
	(70 , happyReduce_70),
	(71 , happyReduce_71),
	(72 , happyReduce_72),
	(73 , happyReduce_73),
	(74 , happyReduce_74),
	(75 , happyReduce_75),
	(76 , happyReduce_76),
	(77 , happyReduce_77),
	(78 , happyReduce_78),
	(79 , happyReduce_79),
	(80 , happyReduce_80),
	(81 , happyReduce_81),
	(82 , happyReduce_82),
	(83 , happyReduce_83),
	(84 , happyReduce_84),
	(85 , happyReduce_85),
	(86 , happyReduce_86),
	(87 , happyReduce_87),
	(88 , happyReduce_88),
	(89 , happyReduce_89),
	(90 , happyReduce_90),
	(91 , happyReduce_91),
	(92 , happyReduce_92),
	(93 , happyReduce_93),
	(94 , happyReduce_94),
	(95 , happyReduce_95),
	(96 , happyReduce_96),
	(97 , happyReduce_97),
	(98 , happyReduce_98),
	(99 , happyReduce_99),
	(100 , happyReduce_100),
	(101 , happyReduce_101),
	(102 , happyReduce_102),
	(103 , happyReduce_103),
	(104 , happyReduce_104),
	(105 , happyReduce_105),
	(106 , happyReduce_106),
	(107 , happyReduce_107),
	(108 , happyReduce_108),
	(109 , happyReduce_109),
	(110 , happyReduce_110),
	(111 , happyReduce_111),
	(112 , happyReduce_112),
	(113 , happyReduce_113),
	(114 , happyReduce_114),
	(115 , happyReduce_115),
	(116 , happyReduce_116),
	(117 , happyReduce_117),
	(118 , happyReduce_118),
	(119 , happyReduce_119),
	(120 , happyReduce_120),
	(121 , happyReduce_121),
	(122 , happyReduce_122),
	(123 , happyReduce_123),
	(124 , happyReduce_124),
	(125 , happyReduce_125),
	(126 , happyReduce_126),
	(127 , happyReduce_127),
	(128 , happyReduce_128),
	(129 , happyReduce_129),
	(130 , happyReduce_130),
	(131 , happyReduce_131),
	(132 , happyReduce_132),
	(133 , happyReduce_133),
	(134 , happyReduce_134),
	(135 , happyReduce_135),
	(136 , happyReduce_136),
	(137 , happyReduce_137),
	(138 , happyReduce_138),
	(139 , happyReduce_139),
	(140 , happyReduce_140),
	(141 , happyReduce_141),
	(142 , happyReduce_142),
	(143 , happyReduce_143),
	(144 , happyReduce_144),
	(145 , happyReduce_145),
	(146 , happyReduce_146),
	(147 , happyReduce_147),
	(148 , happyReduce_148),
	(149 , happyReduce_149),
	(150 , happyReduce_150),
	(151 , happyReduce_151),
	(152 , happyReduce_152),
	(153 , happyReduce_153),
	(154 , happyReduce_154),
	(155 , happyReduce_155),
	(156 , happyReduce_156),
	(157 , happyReduce_157),
	(158 , happyReduce_158),
	(159 , happyReduce_159),
	(160 , happyReduce_160),
	(161 , happyReduce_161),
	(162 , happyReduce_162),
	(163 , happyReduce_163),
	(164 , happyReduce_164),
	(165 , happyReduce_165),
	(166 , happyReduce_166),
	(167 , happyReduce_167),
	(168 , happyReduce_168),
	(169 , happyReduce_169),
	(170 , happyReduce_170),
	(171 , happyReduce_171),
	(172 , happyReduce_172),
	(173 , happyReduce_173),
	(174 , happyReduce_174),
	(175 , happyReduce_175),
	(176 , happyReduce_176),
	(177 , happyReduce_177),
	(178 , happyReduce_178),
	(179 , happyReduce_179),
	(180 , happyReduce_180),
	(181 , happyReduce_181),
	(182 , happyReduce_182),
	(183 , happyReduce_183),
	(184 , happyReduce_184),
	(185 , happyReduce_185),
	(186 , happyReduce_186),
	(187 , happyReduce_187),
	(188 , happyReduce_188),
	(189 , happyReduce_189),
	(190 , happyReduce_190),
	(191 , happyReduce_191),
	(192 , happyReduce_192),
	(193 , happyReduce_193),
	(194 , happyReduce_194),
	(195 , happyReduce_195),
	(196 , happyReduce_196),
	(197 , happyReduce_197),
	(198 , happyReduce_198),
	(199 , happyReduce_199),
	(200 , happyReduce_200),
	(201 , happyReduce_201),
	(202 , happyReduce_202),
	(203 , happyReduce_203),
	(204 , happyReduce_204),
	(205 , happyReduce_205),
	(206 , happyReduce_206),
	(207 , happyReduce_207),
	(208 , happyReduce_208),
	(209 , happyReduce_209),
	(210 , happyReduce_210),
	(211 , happyReduce_211),
	(212 , happyReduce_212),
	(213 , happyReduce_213),
	(214 , happyReduce_214),
	(215 , happyReduce_215),
	(216 , happyReduce_216),
	(217 , happyReduce_217),
	(218 , happyReduce_218),
	(219 , happyReduce_219),
	(220 , happyReduce_220),
	(221 , happyReduce_221),
	(222 , happyReduce_222),
	(223 , happyReduce_223),
	(224 , happyReduce_224),
	(225 , happyReduce_225),
	(226 , happyReduce_226),
	(227 , happyReduce_227),
	(228 , happyReduce_228),
	(229 , happyReduce_229),
	(230 , happyReduce_230),
	(231 , happyReduce_231),
	(232 , happyReduce_232),
	(233 , happyReduce_233),
	(234 , happyReduce_234),
	(235 , happyReduce_235),
	(236 , happyReduce_236),
	(237 , happyReduce_237),
	(238 , happyReduce_238),
	(239 , happyReduce_239),
	(240 , happyReduce_240),
	(241 , happyReduce_241),
	(242 , happyReduce_242),
	(243 , happyReduce_243),
	(244 , happyReduce_244),
	(245 , happyReduce_245),
	(246 , happyReduce_246),
	(247 , happyReduce_247),
	(248 , happyReduce_248),
	(249 , happyReduce_249),
	(250 , happyReduce_250),
	(251 , happyReduce_251),
	(252 , happyReduce_252),
	(253 , happyReduce_253),
	(254 , happyReduce_254),
	(255 , happyReduce_255),
	(256 , happyReduce_256),
	(257 , happyReduce_257),
	(258 , happyReduce_258),
	(259 , happyReduce_259),
	(260 , happyReduce_260),
	(261 , happyReduce_261),
	(262 , happyReduce_262),
	(263 , happyReduce_263),
	(264 , happyReduce_264),
	(265 , happyReduce_265),
	(266 , happyReduce_266),
	(267 , happyReduce_267),
	(268 , happyReduce_268),
	(269 , happyReduce_269),
	(270 , happyReduce_270),
	(271 , happyReduce_271),
	(272 , happyReduce_272),
	(273 , happyReduce_273),
	(274 , happyReduce_274),
	(275 , happyReduce_275),
	(276 , happyReduce_276),
	(277 , happyReduce_277),
	(278 , happyReduce_278),
	(279 , happyReduce_279),
	(280 , happyReduce_280),
	(281 , happyReduce_281),
	(282 , happyReduce_282),
	(283 , happyReduce_283),
	(284 , happyReduce_284),
	(285 , happyReduce_285),
	(286 , happyReduce_286),
	(287 , happyReduce_287),
	(288 , happyReduce_288),
	(289 , happyReduce_289),
	(290 , happyReduce_290),
	(291 , happyReduce_291),
	(292 , happyReduce_292),
	(293 , happyReduce_293),
	(294 , happyReduce_294),
	(295 , happyReduce_295),
	(296 , happyReduce_296),
	(297 , happyReduce_297),
	(298 , happyReduce_298),
	(299 , happyReduce_299),
	(300 , happyReduce_300),
	(301 , happyReduce_301),
	(302 , happyReduce_302),
	(303 , happyReduce_303),
	(304 , happyReduce_304),
	(305 , happyReduce_305),
	(306 , happyReduce_306),
	(307 , happyReduce_307),
	(308 , happyReduce_308),
	(309 , happyReduce_309),
	(310 , happyReduce_310),
	(311 , happyReduce_311),
	(312 , happyReduce_312),
	(313 , happyReduce_313),
	(314 , happyReduce_314),
	(315 , happyReduce_315),
	(316 , happyReduce_316),
	(317 , happyReduce_317),
	(318 , happyReduce_318),
	(319 , happyReduce_319),
	(320 , happyReduce_320),
	(321 , happyReduce_321),
	(322 , happyReduce_322),
	(323 , happyReduce_323),
	(324 , happyReduce_324),
	(325 , happyReduce_325),
	(326 , happyReduce_326),
	(327 , happyReduce_327),
	(328 , happyReduce_328),
	(329 , happyReduce_329),
	(330 , happyReduce_330),
	(331 , happyReduce_331),
	(332 , happyReduce_332),
	(333 , happyReduce_333),
	(334 , happyReduce_334),
	(335 , happyReduce_335),
	(336 , happyReduce_336),
	(337 , happyReduce_337),
	(338 , happyReduce_338),
	(339 , happyReduce_339),
	(340 , happyReduce_340),
	(341 , happyReduce_341),
	(342 , happyReduce_342),
	(343 , happyReduce_343),
	(344 , happyReduce_344),
	(345 , happyReduce_345),
	(346 , happyReduce_346),
	(347 , happyReduce_347),
	(348 , happyReduce_348),
	(349 , happyReduce_349),
	(350 , happyReduce_350),
	(351 , happyReduce_351),
	(352 , happyReduce_352),
	(353 , happyReduce_353),
	(354 , happyReduce_354),
	(355 , happyReduce_355),
	(356 , happyReduce_356),
	(357 , happyReduce_357),
	(358 , happyReduce_358),
	(359 , happyReduce_359),
	(360 , happyReduce_360),
	(361 , happyReduce_361),
	(362 , happyReduce_362),
	(363 , happyReduce_363),
	(364 , happyReduce_364),
	(365 , happyReduce_365),
	(366 , happyReduce_366),
	(367 , happyReduce_367),
	(368 , happyReduce_368),
	(369 , happyReduce_369),
	(370 , happyReduce_370),
	(371 , happyReduce_371),
	(372 , happyReduce_372),
	(373 , happyReduce_373),
	(374 , happyReduce_374),
	(375 , happyReduce_375),
	(376 , happyReduce_376),
	(377 , happyReduce_377),
	(378 , happyReduce_378),
	(379 , happyReduce_379),
	(380 , happyReduce_380),
	(381 , happyReduce_381),
	(382 , happyReduce_382),
	(383 , happyReduce_383),
	(384 , happyReduce_384),
	(385 , happyReduce_385),
	(386 , happyReduce_386),
	(387 , happyReduce_387),
	(388 , happyReduce_388),
	(389 , happyReduce_389),
	(390 , happyReduce_390),
	(391 , happyReduce_391),
	(392 , happyReduce_392),
	(393 , happyReduce_393),
	(394 , happyReduce_394),
	(395 , happyReduce_395),
	(396 , happyReduce_396),
	(397 , happyReduce_397),
	(398 , happyReduce_398),
	(399 , happyReduce_399),
	(400 , happyReduce_400),
	(401 , happyReduce_401),
	(402 , happyReduce_402),
	(403 , happyReduce_403),
	(404 , happyReduce_404),
	(405 , happyReduce_405),
	(406 , happyReduce_406),
	(407 , happyReduce_407),
	(408 , happyReduce_408),
	(409 , happyReduce_409),
	(410 , happyReduce_410),
	(411 , happyReduce_411),
	(412 , happyReduce_412),
	(413 , happyReduce_413),
	(414 , happyReduce_414),
	(415 , happyReduce_415),
	(416 , happyReduce_416),
	(417 , happyReduce_417),
	(418 , happyReduce_418),
	(419 , happyReduce_419),
	(420 , happyReduce_420),
	(421 , happyReduce_421),
	(422 , happyReduce_422),
	(423 , happyReduce_423),
	(424 , happyReduce_424),
	(425 , happyReduce_425),
	(426 , happyReduce_426),
	(427 , happyReduce_427),
	(428 , happyReduce_428),
	(429 , happyReduce_429),
	(430 , happyReduce_430),
	(431 , happyReduce_431),
	(432 , happyReduce_432),
	(433 , happyReduce_433),
	(434 , happyReduce_434),
	(435 , happyReduce_435),
	(436 , happyReduce_436)
	]

happy_n_terms = 74 :: Prelude.Int
happy_n_nonterms = 168 :: Prelude.Int

happyReduce_23 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_23 = happyMonadReduce 1# 0# happyReduction_23
happyReduction_23 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOutTok happy_x_1 of { happy_var_1 -> 
	( upperToModuleName happy_var_1)})
	) (\r -> happyReturn (happyIn26 r))

happyReduce_24 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_24 = happyMonadReduce 1# 0# happyReduction_24
happyReduction_24 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOutTok happy_x_1 of { happy_var_1 -> 
	( upperToModuleName happy_var_1)})
	) (\r -> happyReturn (happyIn26 r))

happyReduce_25 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_25 = happyMonadReduce 1# 1# happyReduction_25
happyReduction_25 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOutTok happy_x_1 of { happy_var_1 -> 
	( qualifiedProperName <$> toQualifiedName N.ProperName happy_var_1)})
	) (\r -> happyReturn (happyIn27 r))

happyReduce_26 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_26 = happyMonadReduce 1# 1# happyReduction_26
happyReduction_26 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOutTok happy_x_1 of { happy_var_1 -> 
	( qualifiedProperName <$> toQualifiedName N.ProperName happy_var_1)})
	) (\r -> happyReturn (happyIn27 r))

happyReduce_27 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_27 = happyMonadReduce 1# 2# happyReduction_27
happyReduction_27 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOutTok happy_x_1 of { happy_var_1 -> 
	( properName <$> toName N.ProperName happy_var_1)})
	) (\r -> happyReturn (happyIn28 r))

happyReduce_28 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_28 = happyMonadReduce 1# 3# happyReduction_28
happyReduction_28 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOutTok happy_x_1 of { happy_var_1 -> 
	( toQualifiedName Ident happy_var_1)})
	) (\r -> happyReturn (happyIn29 r))

happyReduce_29 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_29 = happyMonadReduce 1# 3# happyReduction_29
happyReduction_29 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOutTok happy_x_1 of { happy_var_1 -> 
	( toQualifiedName Ident happy_var_1)})
	) (\r -> happyReturn (happyIn29 r))

happyReduce_30 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_30 = happyMonadReduce 1# 3# happyReduction_30
happyReduction_30 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOutTok happy_x_1 of { happy_var_1 -> 
	( toQualifiedName Ident happy_var_1)})
	) (\r -> happyReturn (happyIn29 r))

happyReduce_31 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_31 = happyMonadReduce 1# 3# happyReduction_31
happyReduction_31 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOutTok happy_x_1 of { happy_var_1 -> 
	( toQualifiedName Ident happy_var_1)})
	) (\r -> happyReturn (happyIn29 r))

happyReduce_32 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_32 = happyMonadReduce 1# 3# happyReduction_32
happyReduction_32 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOutTok happy_x_1 of { happy_var_1 -> 
	( toQualifiedName Ident happy_var_1)})
	) (\r -> happyReturn (happyIn29 r))

happyReduce_33 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_33 = happyMonadReduce 1# 3# happyReduction_33
happyReduction_33 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOutTok happy_x_1 of { happy_var_1 -> 
	( toQualifiedName Ident happy_var_1)})
	) (\r -> happyReturn (happyIn29 r))

happyReduce_34 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_34 = happyMonadReduce 1# 3# happyReduction_34
happyReduction_34 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOutTok happy_x_1 of { happy_var_1 -> 
	( toQualifiedName Ident happy_var_1)})
	) (\r -> happyReturn (happyIn29 r))

happyReduce_35 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_35 = happyMonadReduce 1# 3# happyReduction_35
happyReduction_35 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOutTok happy_x_1 of { happy_var_1 -> 
	( toQualifiedName Ident happy_var_1)})
	) (\r -> happyReturn (happyIn29 r))

happyReduce_36 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_36 = happyMonadReduce 1# 4# happyReduction_36
happyReduction_36 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOutTok happy_x_1 of { happy_var_1 -> 
	( toName Ident happy_var_1)})
	) (\r -> happyReturn (happyIn30 r))

happyReduce_37 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_37 = happyMonadReduce 1# 4# happyReduction_37
happyReduction_37 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOutTok happy_x_1 of { happy_var_1 -> 
	( toName Ident happy_var_1)})
	) (\r -> happyReturn (happyIn30 r))

happyReduce_38 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_38 = happyMonadReduce 1# 4# happyReduction_38
happyReduction_38 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOutTok happy_x_1 of { happy_var_1 -> 
	( toName Ident happy_var_1)})
	) (\r -> happyReturn (happyIn30 r))

happyReduce_39 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_39 = happyMonadReduce 1# 4# happyReduction_39
happyReduction_39 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOutTok happy_x_1 of { happy_var_1 -> 
	( toName Ident happy_var_1)})
	) (\r -> happyReturn (happyIn30 r))

happyReduce_40 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_40 = happyMonadReduce 1# 4# happyReduction_40
happyReduction_40 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOutTok happy_x_1 of { happy_var_1 -> 
	( toName Ident happy_var_1)})
	) (\r -> happyReturn (happyIn30 r))

happyReduce_41 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_41 = happyMonadReduce 1# 4# happyReduction_41
happyReduction_41 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOutTok happy_x_1 of { happy_var_1 -> 
	( toName Ident happy_var_1)})
	) (\r -> happyReturn (happyIn30 r))

happyReduce_42 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_42 = happyMonadReduce 1# 4# happyReduction_42
happyReduction_42 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOutTok happy_x_1 of { happy_var_1 -> 
	( toName Ident happy_var_1)})
	) (\r -> happyReturn (happyIn30 r))

happyReduce_43 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_43 = happyMonadReduce 1# 5# happyReduction_43
happyReduction_43 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOutTok happy_x_1 of { happy_var_1 -> 
	( qualifiedOpName <$> toQualifiedName N.OpName happy_var_1)})
	) (\r -> happyReturn (happyIn31 r))

happyReduce_44 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_44 = happyMonadReduce 1# 5# happyReduction_44
happyReduction_44 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOutTok happy_x_1 of { happy_var_1 -> 
	( qualifiedOpName <$> toQualifiedName N.OpName happy_var_1)})
	) (\r -> happyReturn (happyIn31 r))

happyReduce_45 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_45 = happyMonadReduce 1# 5# happyReduction_45
happyReduction_45 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOutTok happy_x_1 of { happy_var_1 -> 
	( qualifiedOpName <$> toQualifiedName N.OpName happy_var_1)})
	) (\r -> happyReturn (happyIn31 r))

happyReduce_46 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_46 = happyMonadReduce 1# 5# happyReduction_46
happyReduction_46 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOutTok happy_x_1 of { happy_var_1 -> 
	( qualifiedOpName <$> toQualifiedName N.OpName happy_var_1)})
	) (\r -> happyReturn (happyIn31 r))

happyReduce_47 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_47 = happyMonadReduce 1# 5# happyReduction_47
happyReduction_47 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOutTok happy_x_1 of { happy_var_1 -> 
	( qualifiedOpName <$> toQualifiedName N.OpName happy_var_1)})
	) (\r -> happyReturn (happyIn31 r))

happyReduce_48 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_48 = happyMonadReduce 1# 6# happyReduction_48
happyReduction_48 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOutTok happy_x_1 of { happy_var_1 -> 
	( opName <$> toName N.OpName happy_var_1)})
	) (\r -> happyReturn (happyIn32 r))

happyReduce_49 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_49 = happyMonadReduce 1# 6# happyReduction_49
happyReduction_49 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOutTok happy_x_1 of { happy_var_1 -> 
	( opName <$> toName N.OpName happy_var_1)})
	) (\r -> happyReturn (happyIn32 r))

happyReduce_50 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_50 = happyMonadReduce 1# 6# happyReduction_50
happyReduction_50 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOutTok happy_x_1 of { happy_var_1 -> 
	( opName <$> toName N.OpName happy_var_1)})
	) (\r -> happyReturn (happyIn32 r))

happyReduce_51 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_51 = happyMonadReduce 1# 6# happyReduction_51
happyReduction_51 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOutTok happy_x_1 of { happy_var_1 -> 
	( opName <$> toName N.OpName happy_var_1)})
	) (\r -> happyReturn (happyIn32 r))

happyReduce_52 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_52 = happyMonadReduce 1# 7# happyReduction_52
happyReduction_52 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOutTok happy_x_1 of { happy_var_1 -> 
	( qualifiedOpName <$> toQualifiedName N.OpName happy_var_1)})
	) (\r -> happyReturn (happyIn33 r))

happyReduce_53 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_53 = happyMonadReduce 1# 7# happyReduction_53
happyReduction_53 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOutTok happy_x_1 of { happy_var_1 -> 
	( qualifiedOpName <$> toQualifiedName N.OpName happy_var_1)})
	) (\r -> happyReturn (happyIn33 r))

happyReduce_54 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_54 = happyMonadReduce 1# 7# happyReduction_54
happyReduction_54 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOutTok happy_x_1 of { happy_var_1 -> 
	( qualifiedOpName <$> toQualifiedName N.OpName happy_var_1)})
	) (\r -> happyReturn (happyIn33 r))

happyReduce_55 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_55 = happyMonadReduce 1# 8# happyReduction_55
happyReduction_55 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOutTok happy_x_1 of { happy_var_1 -> 
	( opName <$> toName N.OpName happy_var_1)})
	) (\r -> happyReturn (happyIn34 r))

happyReduce_56 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_56 = happyMonadReduce 1# 8# happyReduction_56
happyReduction_56 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOutTok happy_x_1 of { happy_var_1 -> 
	( opName <$> toName N.OpName happy_var_1)})
	) (\r -> happyReturn (happyIn34 r))

happyReduce_57 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_57 = happySpecReduce_1  9# happyReduction_57
happyReduction_57 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn35
		 (toLabel happy_var_1
	)}

happyReduce_58 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_58 = happySpecReduce_1  9# happyReduction_58
happyReduction_58 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn35
		 (toLabel happy_var_1
	)}

happyReduce_59 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_59 = happySpecReduce_1  9# happyReduction_59
happyReduction_59 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn35
		 (toLabel happy_var_1
	)}

happyReduce_60 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_60 = happySpecReduce_1  9# happyReduction_60
happyReduction_60 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn35
		 (toLabel happy_var_1
	)}

happyReduce_61 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_61 = happySpecReduce_1  9# happyReduction_61
happyReduction_61 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn35
		 (toLabel happy_var_1
	)}

happyReduce_62 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_62 = happySpecReduce_1  9# happyReduction_62
happyReduction_62 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn35
		 (toLabel happy_var_1
	)}

happyReduce_63 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_63 = happySpecReduce_1  9# happyReduction_63
happyReduction_63 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn35
		 (toLabel happy_var_1
	)}

happyReduce_64 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_64 = happySpecReduce_1  9# happyReduction_64
happyReduction_64 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn35
		 (toLabel happy_var_1
	)}

happyReduce_65 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_65 = happySpecReduce_1  9# happyReduction_65
happyReduction_65 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn35
		 (toLabel happy_var_1
	)}

happyReduce_66 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_66 = happySpecReduce_1  9# happyReduction_66
happyReduction_66 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn35
		 (toLabel happy_var_1
	)}

happyReduce_67 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_67 = happySpecReduce_1  9# happyReduction_67
happyReduction_67 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn35
		 (toLabel happy_var_1
	)}

happyReduce_68 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_68 = happySpecReduce_1  9# happyReduction_68
happyReduction_68 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn35
		 (toLabel happy_var_1
	)}

happyReduce_69 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_69 = happySpecReduce_1  9# happyReduction_69
happyReduction_69 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn35
		 (toLabel happy_var_1
	)}

happyReduce_70 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_70 = happySpecReduce_1  9# happyReduction_70
happyReduction_70 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn35
		 (toLabel happy_var_1
	)}

happyReduce_71 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_71 = happySpecReduce_1  9# happyReduction_71
happyReduction_71 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn35
		 (toLabel happy_var_1
	)}

happyReduce_72 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_72 = happySpecReduce_1  9# happyReduction_72
happyReduction_72 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn35
		 (toLabel happy_var_1
	)}

happyReduce_73 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_73 = happySpecReduce_1  9# happyReduction_73
happyReduction_73 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn35
		 (toLabel happy_var_1
	)}

happyReduce_74 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_74 = happySpecReduce_1  9# happyReduction_74
happyReduction_74 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn35
		 (toLabel happy_var_1
	)}

happyReduce_75 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_75 = happySpecReduce_1  9# happyReduction_75
happyReduction_75 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn35
		 (toLabel happy_var_1
	)}

happyReduce_76 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_76 = happySpecReduce_1  9# happyReduction_76
happyReduction_76 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn35
		 (toLabel happy_var_1
	)}

happyReduce_77 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_77 = happySpecReduce_1  9# happyReduction_77
happyReduction_77 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn35
		 (toLabel happy_var_1
	)}

happyReduce_78 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_78 = happySpecReduce_1  9# happyReduction_78
happyReduction_78 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn35
		 (toLabel happy_var_1
	)}

happyReduce_79 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_79 = happySpecReduce_1  9# happyReduction_79
happyReduction_79 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn35
		 (toLabel happy_var_1
	)}

happyReduce_80 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_80 = happySpecReduce_1  9# happyReduction_80
happyReduction_80 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn35
		 (toLabel happy_var_1
	)}

happyReduce_81 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_81 = happySpecReduce_1  9# happyReduction_81
happyReduction_81 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn35
		 (toLabel happy_var_1
	)}

happyReduce_82 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_82 = happySpecReduce_1  9# happyReduction_82
happyReduction_82 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn35
		 (toLabel happy_var_1
	)}

happyReduce_83 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_83 = happySpecReduce_1  9# happyReduction_83
happyReduction_83 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn35
		 (toLabel happy_var_1
	)}

happyReduce_84 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_84 = happySpecReduce_1  9# happyReduction_84
happyReduction_84 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn35
		 (toLabel happy_var_1
	)}

happyReduce_85 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_85 = happySpecReduce_1  9# happyReduction_85
happyReduction_85 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn35
		 (toLabel happy_var_1
	)}

happyReduce_86 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_86 = happySpecReduce_1  9# happyReduction_86
happyReduction_86 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn35
		 (toLabel happy_var_1
	)}

happyReduce_87 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_87 = happySpecReduce_1  9# happyReduction_87
happyReduction_87 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn35
		 (toLabel happy_var_1
	)}

happyReduce_88 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_88 = happySpecReduce_1  9# happyReduction_88
happyReduction_88 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn35
		 (toLabel happy_var_1
	)}

happyReduce_89 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_89 = happySpecReduce_1  9# happyReduction_89
happyReduction_89 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn35
		 (toLabel happy_var_1
	)}

happyReduce_90 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_90 = happySpecReduce_1  9# happyReduction_90
happyReduction_90 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn35
		 (toLabel happy_var_1
	)}

happyReduce_91 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_91 = happyMonadReduce 1# 10# happyReduction_91
happyReduction_91 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOutTok happy_x_1 of { happy_var_1 -> 
	( toName Ident happy_var_1)})
	) (\r -> happyReturn (happyIn36 r))

happyReduce_92 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_92 = happySpecReduce_1  11# happyReduction_92
happyReduction_92 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn37
		 (toString happy_var_1
	)}

happyReduce_93 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_93 = happySpecReduce_1  11# happyReduction_93
happyReduction_93 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn37
		 (toString happy_var_1
	)}

happyReduce_94 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_94 = happySpecReduce_1  12# happyReduction_94
happyReduction_94 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn38
		 (toChar happy_var_1
	)}

happyReduce_95 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_95 = happySpecReduce_1  13# happyReduction_95
happyReduction_95 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn39
		 (toNumber happy_var_1
	)}

happyReduce_96 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_96 = happySpecReduce_1  13# happyReduction_96
happyReduction_96 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn39
		 (toNumber happy_var_1
	)}

happyReduce_97 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_97 = happySpecReduce_1  14# happyReduction_97
happyReduction_97 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn40
		 (toInt happy_var_1
	)}

happyReduce_98 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_98 = happySpecReduce_1  15# happyReduction_98
happyReduction_98 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn41
		 (toBoolean happy_var_1
	)}

happyReduce_99 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_99 = happySpecReduce_1  15# happyReduction_99
happyReduction_99 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn41
		 (toBoolean happy_var_1
	)}

happyReduce_100 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_100 = happySpecReduce_1  16# happyReduction_100
happyReduction_100 happy_x_1
	 =  case happyOut43 happy_x_1 of { (HappyWrap43 happy_var_1) -> 
	happyIn42
		 (happy_var_1
	)}

happyReduce_101 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_101 = happySpecReduce_3  16# happyReduction_101
happyReduction_101 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut43 happy_x_1 of { (HappyWrap43 happy_var_1) -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut42 happy_x_3 of { (HappyWrap42 happy_var_3) -> 
	happyIn42
		 (TypeKinded () happy_var_1 happy_var_2 happy_var_3
	)}}}

happyReduce_102 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_102 = happySpecReduce_1  17# happyReduction_102
happyReduction_102 happy_x_1
	 =  case happyOut44 happy_x_1 of { (HappyWrap44 happy_var_1) -> 
	happyIn43
		 (happy_var_1
	)}

happyReduce_103 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_103 = happyReduce 4# 17# happyReduction_103
happyReduction_103 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut54 happy_x_1 of { (HappyWrap54 happy_var_1) -> 
	case happyOut137 happy_x_2 of { (HappyWrap137 happy_var_2) -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	case happyOut43 happy_x_4 of { (HappyWrap43 happy_var_4) -> 
	happyIn43
		 (TypeForall () happy_var_1 happy_var_2 happy_var_3 happy_var_4
	) `HappyStk` happyRest}}}}

happyReduce_104 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_104 = happySpecReduce_1  18# happyReduction_104
happyReduction_104 happy_x_1
	 =  case happyOut45 happy_x_1 of { (HappyWrap45 happy_var_1) -> 
	happyIn44
		 (happy_var_1
	)}

happyReduce_105 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_105 = happySpecReduce_3  18# happyReduction_105
happyReduction_105 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut45 happy_x_1 of { (HappyWrap45 happy_var_1) -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut43 happy_x_3 of { (HappyWrap43 happy_var_3) -> 
	happyIn44
		 (TypeArr () happy_var_1 happy_var_2 happy_var_3
	)}}}

happyReduce_106 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_106 = happyMonadReduce 3# 18# happyReduction_106
happyReduction_106 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOut45 happy_x_1 of { (HappyWrap45 happy_var_1) -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut43 happy_x_3 of { (HappyWrap43 happy_var_3) -> 
	( do cs <- toConstraint happy_var_1; pure $ TypeConstrained () cs happy_var_2 happy_var_3)}}})
	) (\r -> happyReturn (happyIn44 r))

happyReduce_107 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_107 = happySpecReduce_1  19# happyReduction_107
happyReduction_107 happy_x_1
	 =  case happyOut46 happy_x_1 of { (HappyWrap46 happy_var_1) -> 
	happyIn45
		 (happy_var_1
	)}

happyReduce_108 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_108 = happySpecReduce_3  19# happyReduction_108
happyReduction_108 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut45 happy_x_1 of { (HappyWrap45 happy_var_1) -> 
	case happyOut31 happy_x_2 of { (HappyWrap31 happy_var_2) -> 
	case happyOut46 happy_x_3 of { (HappyWrap46 happy_var_3) -> 
	happyIn45
		 (TypeOp () happy_var_1 (getQualifiedOpName happy_var_2) happy_var_3
	)}}}

happyReduce_109 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_109 = happySpecReduce_1  20# happyReduction_109
happyReduction_109 happy_x_1
	 =  case happyOut47 happy_x_1 of { (HappyWrap47 happy_var_1) -> 
	happyIn46
		 (happy_var_1
	)}

happyReduce_110 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_110 = happySpecReduce_2  20# happyReduction_110
happyReduction_110 happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut40 happy_x_2 of { (HappyWrap40 happy_var_2) -> 
	happyIn46
		 (uncurry (TypeInt () (Just happy_var_1)) (second negate happy_var_2)
	)}}

happyReduce_111 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_111 = happySpecReduce_1  21# happyReduction_111
happyReduction_111 happy_x_1
	 =  case happyOut48 happy_x_1 of { (HappyWrap48 happy_var_1) -> 
	happyIn47
		 (happy_var_1
	)}

happyReduce_112 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_112 = happySpecReduce_2  21# happyReduction_112
happyReduction_112 happy_x_2
	happy_x_1
	 =  case happyOut47 happy_x_1 of { (HappyWrap47 happy_var_1) -> 
	case happyOut48 happy_x_2 of { (HappyWrap48 happy_var_2) -> 
	happyIn47
		 (TypeApp () happy_var_1 happy_var_2
	)}}

happyReduce_113 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_113 = happySpecReduce_1  22# happyReduction_113
happyReduction_113 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn48
		 (TypeWildcard () happy_var_1
	)}

happyReduce_114 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_114 = happySpecReduce_1  22# happyReduction_114
happyReduction_114 happy_x_1
	 =  case happyOut30 happy_x_1 of { (HappyWrap30 happy_var_1) -> 
	happyIn48
		 (TypeVar () happy_var_1
	)}

happyReduce_115 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_115 = happySpecReduce_1  22# happyReduction_115
happyReduction_115 happy_x_1
	 =  case happyOut27 happy_x_1 of { (HappyWrap27 happy_var_1) -> 
	happyIn48
		 (TypeConstructor () (getQualifiedProperName happy_var_1)
	)}

happyReduce_116 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_116 = happySpecReduce_1  22# happyReduction_116
happyReduction_116 happy_x_1
	 =  case happyOut33 happy_x_1 of { (HappyWrap33 happy_var_1) -> 
	happyIn48
		 (TypeOpName () (getQualifiedOpName happy_var_1)
	)}

happyReduce_117 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_117 = happySpecReduce_1  22# happyReduction_117
happyReduction_117 happy_x_1
	 =  case happyOut37 happy_x_1 of { (HappyWrap37 happy_var_1) -> 
	happyIn48
		 (uncurry (TypeString ()) happy_var_1
	)}

happyReduce_118 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_118 = happySpecReduce_1  22# happyReduction_118
happyReduction_118 happy_x_1
	 =  case happyOut40 happy_x_1 of { (HappyWrap40 happy_var_1) -> 
	happyIn48
		 (uncurry (TypeInt () Nothing) happy_var_1
	)}

happyReduce_119 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_119 = happySpecReduce_1  22# happyReduction_119
happyReduction_119 happy_x_1
	 =  case happyOut36 happy_x_1 of { (HappyWrap36 happy_var_1) -> 
	happyIn48
		 (TypeHole () happy_var_1
	)}

happyReduce_120 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_120 = happySpecReduce_1  22# happyReduction_120
happyReduction_120 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn48
		 (TypeArrName () happy_var_1
	)}

happyReduce_121 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_121 = happySpecReduce_3  22# happyReduction_121
happyReduction_121 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut50 happy_x_2 of { (HappyWrap50 happy_var_2) -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	happyIn48
		 (TypeRecord () (Wrapped happy_var_1 happy_var_2 happy_var_3)
	)}}}

happyReduce_122 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_122 = happySpecReduce_3  22# happyReduction_122
happyReduction_122 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut50 happy_x_2 of { (HappyWrap50 happy_var_2) -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	happyIn48
		 (TypeRow () (Wrapped happy_var_1 happy_var_2 happy_var_3)
	)}}}

happyReduce_123 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_123 = happySpecReduce_3  22# happyReduction_123
happyReduction_123 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut43 happy_x_2 of { (HappyWrap43 happy_var_2) -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	happyIn48
		 (TypeParens () (Wrapped happy_var_1 happy_var_2 happy_var_3)
	)}}}

happyReduce_124 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_124 = happyReduce 5# 22# happyReduction_124
happyReduction_124 (happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut49 happy_x_2 of { (HappyWrap49 happy_var_2) -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	case happyOut42 happy_x_4 of { (HappyWrap42 happy_var_4) -> 
	case happyOutTok happy_x_5 of { happy_var_5 -> 
	happyIn48
		 (TypeParens () (Wrapped happy_var_1 (TypeKinded () happy_var_2 happy_var_3 happy_var_4) happy_var_5)
	) `HappyStk` happyRest}}}}}

happyReduce_125 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_125 = happySpecReduce_1  23# happyReduction_125
happyReduction_125 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn49
		 (TypeWildcard () happy_var_1
	)}

happyReduce_126 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_126 = happySpecReduce_1  23# happyReduction_126
happyReduction_126 happy_x_1
	 =  case happyOut27 happy_x_1 of { (HappyWrap27 happy_var_1) -> 
	happyIn49
		 (TypeConstructor () (getQualifiedProperName happy_var_1)
	)}

happyReduce_127 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_127 = happySpecReduce_1  23# happyReduction_127
happyReduction_127 happy_x_1
	 =  case happyOut33 happy_x_1 of { (HappyWrap33 happy_var_1) -> 
	happyIn49
		 (TypeOpName () (getQualifiedOpName happy_var_1)
	)}

happyReduce_128 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_128 = happySpecReduce_1  23# happyReduction_128
happyReduction_128 happy_x_1
	 =  case happyOut40 happy_x_1 of { (HappyWrap40 happy_var_1) -> 
	happyIn49
		 (uncurry (TypeInt () Nothing) happy_var_1
	)}

happyReduce_129 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_129 = happySpecReduce_1  23# happyReduction_129
happyReduction_129 happy_x_1
	 =  case happyOut36 happy_x_1 of { (HappyWrap36 happy_var_1) -> 
	happyIn49
		 (TypeHole () happy_var_1
	)}

happyReduce_130 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_130 = happySpecReduce_3  23# happyReduction_130
happyReduction_130 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut50 happy_x_2 of { (HappyWrap50 happy_var_2) -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	happyIn49
		 (TypeRecord () (Wrapped happy_var_1 happy_var_2 happy_var_3)
	)}}}

happyReduce_131 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_131 = happySpecReduce_3  23# happyReduction_131
happyReduction_131 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut50 happy_x_2 of { (HappyWrap50 happy_var_2) -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	happyIn49
		 (TypeRow () (Wrapped happy_var_1 happy_var_2 happy_var_3)
	)}}}

happyReduce_132 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_132 = happySpecReduce_3  23# happyReduction_132
happyReduction_132 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut43 happy_x_2 of { (HappyWrap43 happy_var_2) -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	happyIn49
		 (TypeParens () (Wrapped happy_var_1 happy_var_2 happy_var_3)
	)}}}

happyReduce_133 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_133 = happyReduce 5# 23# happyReduction_133
happyReduction_133 (happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut49 happy_x_2 of { (HappyWrap49 happy_var_2) -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	case happyOut42 happy_x_4 of { (HappyWrap42 happy_var_4) -> 
	case happyOutTok happy_x_5 of { happy_var_5 -> 
	happyIn49
		 (TypeParens () (Wrapped happy_var_1 (TypeKinded () happy_var_2 happy_var_3 happy_var_4) happy_var_5)
	) `HappyStk` happyRest}}}}}

happyReduce_134 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_134 = happySpecReduce_0  24# happyReduction_134
happyReduction_134  =  happyIn50
		 (Row Nothing Nothing
	)

happyReduce_135 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_135 = happySpecReduce_2  24# happyReduction_135
happyReduction_135 happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut42 happy_x_2 of { (HappyWrap42 happy_var_2) -> 
	happyIn50
		 (Row Nothing (Just (happy_var_1, happy_var_2))
	)}}

happyReduce_136 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_136 = happySpecReduce_1  24# happyReduction_136
happyReduction_136 happy_x_1
	 =  case happyOut159 happy_x_1 of { (HappyWrap159 happy_var_1) -> 
	happyIn50
		 (Row (Just happy_var_1) Nothing
	)}

happyReduce_137 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_137 = happySpecReduce_3  24# happyReduction_137
happyReduction_137 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut159 happy_x_1 of { (HappyWrap159 happy_var_1) -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut42 happy_x_3 of { (HappyWrap42 happy_var_3) -> 
	happyIn50
		 (Row (Just happy_var_1) (Just (happy_var_2, happy_var_3))
	)}}}

happyReduce_138 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_138 = happySpecReduce_3  25# happyReduction_138
happyReduction_138 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut35 happy_x_1 of { (HappyWrap35 happy_var_1) -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut42 happy_x_3 of { (HappyWrap42 happy_var_3) -> 
	happyIn51
		 (Labeled happy_var_1 happy_var_2 happy_var_3
	)}}}

happyReduce_139 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_139 = happySpecReduce_1  26# happyReduction_139
happyReduction_139 happy_x_1
	 =  case happyOut30 happy_x_1 of { (HappyWrap30 happy_var_1) -> 
	happyIn52
		 (TypeVarName (Nothing, happy_var_1)
	)}

happyReduce_140 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_140 = happySpecReduce_2  26# happyReduction_140
happyReduction_140 happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut30 happy_x_2 of { (HappyWrap30 happy_var_2) -> 
	happyIn52
		 (TypeVarName (Just happy_var_1, happy_var_2)
	)}}

happyReduce_141 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_141 = happyMonadReduce 5# 26# happyReduction_141
happyReduction_141 (happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut30 happy_x_2 of { (HappyWrap30 happy_var_2) -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	case happyOut42 happy_x_4 of { (HappyWrap42 happy_var_4) -> 
	case happyOutTok happy_x_5 of { happy_var_5 -> 
	( checkNoWildcards happy_var_4 *> pure (TypeVarKinded (Wrapped happy_var_1 (Labeled (Nothing, happy_var_2) happy_var_3 happy_var_4) happy_var_5)))}}}}})
	) (\r -> happyReturn (happyIn52 r))

happyReduce_142 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_142 = happyMonadReduce 6# 26# happyReduction_142
happyReduction_142 (happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut30 happy_x_3 of { (HappyWrap30 happy_var_3) -> 
	case happyOutTok happy_x_4 of { happy_var_4 -> 
	case happyOut42 happy_x_5 of { (HappyWrap42 happy_var_5) -> 
	case happyOutTok happy_x_6 of { happy_var_6 -> 
	( checkNoWildcards happy_var_5 *> pure (TypeVarKinded (Wrapped happy_var_1 (Labeled (Just happy_var_2, happy_var_3) happy_var_4 happy_var_5) happy_var_6)))}}}}}})
	) (\r -> happyReturn (happyIn52 r))

happyReduce_143 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_143 = happySpecReduce_1  27# happyReduction_143
happyReduction_143 happy_x_1
	 =  case happyOut30 happy_x_1 of { (HappyWrap30 happy_var_1) -> 
	happyIn53
		 (TypeVarName (Nothing, happy_var_1)
	)}

happyReduce_144 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_144 = happyMonadReduce 5# 27# happyReduction_144
happyReduction_144 (happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut30 happy_x_2 of { (HappyWrap30 happy_var_2) -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	case happyOut42 happy_x_4 of { (HappyWrap42 happy_var_4) -> 
	case happyOutTok happy_x_5 of { happy_var_5 -> 
	( checkNoWildcards happy_var_4 *> pure (TypeVarKinded (Wrapped happy_var_1 (Labeled (Nothing, happy_var_2) happy_var_3 happy_var_4) happy_var_5)))}}}}})
	) (\r -> happyReturn (happyIn53 r))

happyReduce_145 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_145 = happySpecReduce_1  28# happyReduction_145
happyReduction_145 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn54
		 (happy_var_1
	)}

happyReduce_146 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_146 = happySpecReduce_1  28# happyReduction_146
happyReduction_146 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn54
		 (happy_var_1
	)}

happyReduce_147 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_147 = happySpecReduce_1  29# happyReduction_147
happyReduction_147 happy_x_1
	 =  case happyOut56 happy_x_1 of { (HappyWrap56 happy_var_1) -> 
	happyIn55
		 (Where happy_var_1 Nothing
	)}

happyReduce_148 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_148 = happyReduce 5# 29# happyReduction_148
happyReduction_148 (happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut56 happy_x_1 of { (HappyWrap56 happy_var_1) -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut145 happy_x_4 of { (HappyWrap145 happy_var_4) -> 
	happyIn55
		 (Where happy_var_1 (Just (happy_var_2, happy_var_4))
	) `HappyStk` happyRest}}}

happyReduce_149 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_149 = happySpecReduce_1  30# happyReduction_149
happyReduction_149 happy_x_1
	 =  case happyOut57 happy_x_1 of { (HappyWrap57 happy_var_1) -> 
	happyIn56
		 (happy_var_1
	)}

happyReduce_150 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_150 = happySpecReduce_3  30# happyReduction_150
happyReduction_150 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut57 happy_x_1 of { (HappyWrap57 happy_var_1) -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut42 happy_x_3 of { (HappyWrap42 happy_var_3) -> 
	happyIn56
		 (ExprTyped () happy_var_1 happy_var_2 happy_var_3
	)}}}

happyReduce_151 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_151 = happySpecReduce_1  31# happyReduction_151
happyReduction_151 happy_x_1
	 =  case happyOut58 happy_x_1 of { (HappyWrap58 happy_var_1) -> 
	happyIn57
		 (happy_var_1
	)}

happyReduce_152 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_152 = happySpecReduce_3  31# happyReduction_152
happyReduction_152 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut57 happy_x_1 of { (HappyWrap57 happy_var_1) -> 
	case happyOut31 happy_x_2 of { (HappyWrap31 happy_var_2) -> 
	case happyOut58 happy_x_3 of { (HappyWrap58 happy_var_3) -> 
	happyIn57
		 (ExprOp () happy_var_1 (getQualifiedOpName happy_var_2) happy_var_3
	)}}}

happyReduce_153 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_153 = happySpecReduce_1  32# happyReduction_153
happyReduction_153 happy_x_1
	 =  case happyOut60 happy_x_1 of { (HappyWrap60 happy_var_1) -> 
	happyIn58
		 (happy_var_1
	)}

happyReduce_154 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_154 = happyReduce 5# 32# happyReduction_154
happyReduction_154 (happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut58 happy_x_1 of { (HappyWrap58 happy_var_1) -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut59 happy_x_3 of { (HappyWrap59 happy_var_3) -> 
	case happyOutTok happy_x_4 of { happy_var_4 -> 
	case happyOut60 happy_x_5 of { (HappyWrap60 happy_var_5) -> 
	happyIn58
		 (ExprInfix () happy_var_1 (Wrapped happy_var_2 happy_var_3 happy_var_4) happy_var_5
	) `HappyStk` happyRest}}}}}

happyReduce_155 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_155 = happySpecReduce_1  33# happyReduction_155
happyReduction_155 happy_x_1
	 =  case happyOut60 happy_x_1 of { (HappyWrap60 happy_var_1) -> 
	happyIn59
		 (happy_var_1
	)}

happyReduce_156 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_156 = happySpecReduce_3  33# happyReduction_156
happyReduction_156 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut59 happy_x_1 of { (HappyWrap59 happy_var_1) -> 
	case happyOut31 happy_x_2 of { (HappyWrap31 happy_var_2) -> 
	case happyOut60 happy_x_3 of { (HappyWrap60 happy_var_3) -> 
	happyIn59
		 (ExprOp () happy_var_1 (getQualifiedOpName happy_var_2) happy_var_3
	)}}}

happyReduce_157 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_157 = happySpecReduce_1  34# happyReduction_157
happyReduction_157 happy_x_1
	 =  case happyOut61 happy_x_1 of { (HappyWrap61 happy_var_1) -> 
	happyIn60
		 (happy_var_1
	)}

happyReduce_158 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_158 = happySpecReduce_2  34# happyReduction_158
happyReduction_158 happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut60 happy_x_2 of { (HappyWrap60 happy_var_2) -> 
	happyIn60
		 (ExprNegate () happy_var_1 happy_var_2
	)}}

happyReduce_159 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_159 = happySpecReduce_1  35# happyReduction_159
happyReduction_159 happy_x_1
	 =  case happyOut62 happy_x_1 of { (HappyWrap62 happy_var_1) -> 
	happyIn61
		 (happy_var_1
	)}

happyReduce_160 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_160 = happySpecReduce_2  35# happyReduction_160
happyReduction_160 happy_x_2
	happy_x_1
	 =  case happyOut61 happy_x_1 of { (HappyWrap61 happy_var_1) -> 
	case happyOut62 happy_x_2 of { (HappyWrap62 happy_var_2) -> 
	happyIn61
		 (-- Record application/updates can introduce a function application
        -- associated to the right, so we need to correct it.
        case happy_var_2 of
          ExprApp _ lhs rhs ->
            ExprApp () (ExprApp () happy_var_1 lhs) rhs
          _ -> ExprApp () happy_var_1 happy_var_2
	)}}

happyReduce_161 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_161 = happySpecReduce_3  35# happyReduction_161
happyReduction_161 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut61 happy_x_1 of { (HappyWrap61 happy_var_1) -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut48 happy_x_3 of { (HappyWrap48 happy_var_3) -> 
	happyIn61
		 (ExprVisibleTypeApp () happy_var_1 happy_var_2 happy_var_3
	)}}}

happyReduce_162 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_162 = happySpecReduce_1  36# happyReduction_162
happyReduction_162 happy_x_1
	 =  case happyOut63 happy_x_1 of { (HappyWrap63 happy_var_1) -> 
	happyIn62
		 (happy_var_1
	)}

happyReduce_163 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_163 = happyReduce 6# 36# happyReduction_163
happyReduction_163 (happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut56 happy_x_2 of { (HappyWrap56 happy_var_2) -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	case happyOut56 happy_x_4 of { (HappyWrap56 happy_var_4) -> 
	case happyOutTok happy_x_5 of { happy_var_5 -> 
	case happyOut56 happy_x_6 of { (HappyWrap56 happy_var_6) -> 
	happyIn62
		 (ExprIf () (IfThenElse happy_var_1 happy_var_2 happy_var_3 happy_var_4 happy_var_5 happy_var_6)
	) `HappyStk` happyRest}}}}}}

happyReduce_164 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_164 = happySpecReduce_1  36# happyReduction_164
happyReduction_164 happy_x_1
	 =  case happyOut75 happy_x_1 of { (HappyWrap75 happy_var_1) -> 
	happyIn62
		 (ExprDo () happy_var_1
	)}

happyReduce_165 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_165 = happySpecReduce_3  36# happyReduction_165
happyReduction_165 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut76 happy_x_1 of { (HappyWrap76 happy_var_1) -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut56 happy_x_3 of { (HappyWrap56 happy_var_3) -> 
	happyIn62
		 (ExprAdo () $ uncurry AdoBlock happy_var_1 happy_var_2 happy_var_3
	)}}}

happyReduce_166 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_166 = happyReduce 4# 36# happyReduction_166
happyReduction_166 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut132 happy_x_2 of { (HappyWrap132 happy_var_2) -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	case happyOut56 happy_x_4 of { (HappyWrap56 happy_var_4) -> 
	happyIn62
		 (ExprLambda () (Lambda happy_var_1 happy_var_2 happy_var_3 happy_var_4)
	) `HappyStk` happyRest}}}}

happyReduce_167 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_167 = happyReduce 6# 36# happyReduction_167
happyReduction_167 (happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut145 happy_x_3 of { (HappyWrap145 happy_var_3) -> 
	case happyOutTok happy_x_5 of { happy_var_5 -> 
	case happyOut56 happy_x_6 of { (HappyWrap56 happy_var_6) -> 
	happyIn62
		 (ExprLet () (LetIn happy_var_1 happy_var_3 happy_var_5 happy_var_6)
	) `HappyStk` happyRest}}}}

happyReduce_168 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_168 = happyReduce 6# 36# happyReduction_168
happyReduction_168 (happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut152 happy_x_2 of { (HappyWrap152 happy_var_2) -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	case happyOut142 happy_x_5 of { (HappyWrap142 happy_var_5) -> 
	happyIn62
		 (ExprCase () (CaseOf happy_var_1 happy_var_2 happy_var_3 happy_var_5)
	) `HappyStk` happyRest}}}}

happyReduce_169 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_169 = happyMonadReduce 8# 36# happyReduction_169
happyReduction_169 (happy_x_8 `HappyStk`
	happy_x_7 `HappyStk`
	happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut152 happy_x_2 of { (HappyWrap152 happy_var_2) -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	case happyOut147 happy_x_5 of { (HappyWrap147 happy_var_5) -> 
	case happyOutTok happy_x_6 of { happy_var_6 -> 
	case happyOut55 happy_x_8 of { (HappyWrap55 happy_var_8) -> 
	( addWarning (let (a,b) = whereRange happy_var_8 in [a, b]) WarnDeprecatedCaseOfOffsideSyntax *> pure (ExprCase () (CaseOf happy_var_1 happy_var_2 happy_var_3 (pure (happy_var_5, Unconditional happy_var_6 happy_var_8)))))}}}}}})
	) (\r -> happyReturn (happyIn62 r))

happyReduce_170 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_170 = happyMonadReduce 7# 36# happyReduction_170
happyReduction_170 (happy_x_7 `HappyStk`
	happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut152 happy_x_2 of { (HappyWrap152 happy_var_2) -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	case happyOut147 happy_x_5 of { (HappyWrap147 happy_var_5) -> 
	case happyOut73 happy_x_7 of { (HappyWrap73 happy_var_7) -> 
	( addWarning (let (a,b) = guardedRange happy_var_7 in [a, b]) WarnDeprecatedCaseOfOffsideSyntax *> pure (ExprCase () (CaseOf happy_var_1 happy_var_2 happy_var_3 (pure (happy_var_5, happy_var_7)))))}}}}})
	) (\r -> happyReturn (happyIn62 r))

happyReduce_171 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_171 = happySpecReduce_1  37# happyReduction_171
happyReduction_171 happy_x_1
	 =  case happyOut64 happy_x_1 of { (HappyWrap64 happy_var_1) -> 
	happyIn63
		 (happy_var_1
	)}

happyReduce_172 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_172 = happySpecReduce_3  37# happyReduction_172
happyReduction_172 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut64 happy_x_1 of { (HappyWrap64 happy_var_1) -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	happyIn63
		 (ExprApp () happy_var_1 (ExprRecord () (Wrapped happy_var_2 Nothing happy_var_3))
	)}}}

happyReduce_173 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_173 = happyMonadReduce 4# 37# happyReduction_173
happyReduction_173 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOut64 happy_x_1 of { (HappyWrap64 happy_var_1) -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut158 happy_x_3 of { (HappyWrap158 happy_var_3) -> 
	case happyOutTok happy_x_4 of { happy_var_4 -> 
	( toRecordFields happy_var_3 >>= \case
          Left xs -> pure $ ExprApp () happy_var_1 (ExprRecord () (Wrapped happy_var_2 (Just xs) happy_var_4))
          Right xs -> pure $ ExprRecordUpdate () happy_var_1 (Wrapped happy_var_2 xs happy_var_4))}}}})
	) (\r -> happyReturn (happyIn63 r))

happyReduce_174 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_174 = happySpecReduce_1  38# happyReduction_174
happyReduction_174 happy_x_1
	 =  case happyOut65 happy_x_1 of { (HappyWrap65 happy_var_1) -> 
	happyIn64
		 (happy_var_1
	)}

happyReduce_175 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_175 = happySpecReduce_3  38# happyReduction_175
happyReduction_175 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut65 happy_x_1 of { (HappyWrap65 happy_var_1) -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut155 happy_x_3 of { (HappyWrap155 happy_var_3) -> 
	happyIn64
		 (ExprRecordAccessor () (RecordAccessor happy_var_1 happy_var_2 happy_var_3)
	)}}}

happyReduce_176 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_176 = happySpecReduce_1  39# happyReduction_176
happyReduction_176 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn65
		 (ExprSection () happy_var_1
	)}

happyReduce_177 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_177 = happySpecReduce_1  39# happyReduction_177
happyReduction_177 happy_x_1
	 =  case happyOut36 happy_x_1 of { (HappyWrap36 happy_var_1) -> 
	happyIn65
		 (ExprHole () happy_var_1
	)}

happyReduce_178 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_178 = happySpecReduce_1  39# happyReduction_178
happyReduction_178 happy_x_1
	 =  case happyOut29 happy_x_1 of { (HappyWrap29 happy_var_1) -> 
	happyIn65
		 (ExprIdent () happy_var_1
	)}

happyReduce_179 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_179 = happySpecReduce_1  39# happyReduction_179
happyReduction_179 happy_x_1
	 =  case happyOut27 happy_x_1 of { (HappyWrap27 happy_var_1) -> 
	happyIn65
		 (ExprConstructor () (getQualifiedProperName happy_var_1)
	)}

happyReduce_180 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_180 = happySpecReduce_1  39# happyReduction_180
happyReduction_180 happy_x_1
	 =  case happyOut33 happy_x_1 of { (HappyWrap33 happy_var_1) -> 
	happyIn65
		 (ExprOpName () (getQualifiedOpName happy_var_1)
	)}

happyReduce_181 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_181 = happySpecReduce_1  39# happyReduction_181
happyReduction_181 happy_x_1
	 =  case happyOut41 happy_x_1 of { (HappyWrap41 happy_var_1) -> 
	happyIn65
		 (uncurry (ExprBoolean ()) happy_var_1
	)}

happyReduce_182 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_182 = happySpecReduce_1  39# happyReduction_182
happyReduction_182 happy_x_1
	 =  case happyOut38 happy_x_1 of { (HappyWrap38 happy_var_1) -> 
	happyIn65
		 (uncurry (ExprChar ()) happy_var_1
	)}

happyReduce_183 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_183 = happySpecReduce_1  39# happyReduction_183
happyReduction_183 happy_x_1
	 =  case happyOut37 happy_x_1 of { (HappyWrap37 happy_var_1) -> 
	happyIn65
		 (uncurry (ExprString ()) happy_var_1
	)}

happyReduce_184 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_184 = happySpecReduce_1  39# happyReduction_184
happyReduction_184 happy_x_1
	 =  case happyOut39 happy_x_1 of { (HappyWrap39 happy_var_1) -> 
	happyIn65
		 (uncurry (ExprNumber ()) happy_var_1
	)}

happyReduce_185 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_185 = happySpecReduce_1  39# happyReduction_185
happyReduction_185 happy_x_1
	 =  case happyOut129 happy_x_1 of { (HappyWrap129 happy_var_1) -> 
	happyIn65
		 (ExprArray () happy_var_1
	)}

happyReduce_186 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_186 = happySpecReduce_1  39# happyReduction_186
happyReduction_186 happy_x_1
	 =  case happyOut131 happy_x_1 of { (HappyWrap131 happy_var_1) -> 
	happyIn65
		 (ExprRecord () happy_var_1
	)}

happyReduce_187 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_187 = happySpecReduce_3  39# happyReduction_187
happyReduction_187 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut56 happy_x_2 of { (HappyWrap56 happy_var_2) -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	happyIn65
		 (ExprParens () (Wrapped happy_var_1 happy_var_2 happy_var_3)
	)}}}

happyReduce_188 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_188 = happyMonadReduce 1# 40# happyReduction_188
happyReduction_188 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOut35 happy_x_1 of { (HappyWrap35 happy_var_1) -> 
	( fmap RecordPun . toName Ident $ lblTok happy_var_1)})
	) (\r -> happyReturn (happyIn66 r))

happyReduce_189 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_189 = happyMonadReduce 3# 40# happyReduction_189
happyReduction_189 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOut35 happy_x_1 of { (HappyWrap35 happy_var_1) -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	( addFailure [happy_var_2] ErrRecordUpdateInCtr *> pure (RecordPun $ unexpectedName $ lblTok happy_var_1))}})
	) (\r -> happyReturn (happyIn66 r))

happyReduce_190 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_190 = happySpecReduce_3  40# happyReduction_190
happyReduction_190 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut35 happy_x_1 of { (HappyWrap35 happy_var_1) -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut56 happy_x_3 of { (HappyWrap56 happy_var_3) -> 
	happyIn66
		 (RecordField happy_var_1 happy_var_2 happy_var_3
	)}}}

happyReduce_191 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_191 = happySpecReduce_3  41# happyReduction_191
happyReduction_191 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut35 happy_x_1 of { (HappyWrap35 happy_var_1) -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut56 happy_x_3 of { (HappyWrap56 happy_var_3) -> 
	happyIn67
		 (Left (RecordField happy_var_1 happy_var_2 happy_var_3)
	)}}}

happyReduce_192 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_192 = happyMonadReduce 1# 41# happyReduction_192
happyReduction_192 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOut35 happy_x_1 of { (HappyWrap35 happy_var_1) -> 
	( fmap (Left . RecordPun) . toName Ident $ lblTok happy_var_1)})
	) (\r -> happyReturn (happyIn67 r))

happyReduce_193 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_193 = happySpecReduce_3  41# happyReduction_193
happyReduction_193 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut35 happy_x_1 of { (HappyWrap35 happy_var_1) -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut56 happy_x_3 of { (HappyWrap56 happy_var_3) -> 
	happyIn67
		 (Right (RecordUpdateLeaf happy_var_1 happy_var_2 happy_var_3)
	)}}}

happyReduce_194 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_194 = happyReduce 4# 41# happyReduction_194
happyReduction_194 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut35 happy_x_1 of { (HappyWrap35 happy_var_1) -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut157 happy_x_3 of { (HappyWrap157 happy_var_3) -> 
	case happyOutTok happy_x_4 of { happy_var_4 -> 
	happyIn67
		 (Right (RecordUpdateBranch happy_var_1 (Wrapped happy_var_2 happy_var_3 happy_var_4))
	) `HappyStk` happyRest}}}}

happyReduce_195 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_195 = happySpecReduce_3  42# happyReduction_195
happyReduction_195 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut35 happy_x_1 of { (HappyWrap35 happy_var_1) -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut56 happy_x_3 of { (HappyWrap56 happy_var_3) -> 
	happyIn68
		 (RecordUpdateLeaf happy_var_1 happy_var_2 happy_var_3
	)}}}

happyReduce_196 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_196 = happyReduce 4# 42# happyReduction_196
happyReduction_196 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut35 happy_x_1 of { (HappyWrap35 happy_var_1) -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut157 happy_x_3 of { (HappyWrap157 happy_var_3) -> 
	case happyOutTok happy_x_4 of { happy_var_4 -> 
	happyIn68
		 (RecordUpdateBranch happy_var_1 (Wrapped happy_var_2 happy_var_3 happy_var_4)
	) `HappyStk` happyRest}}}}

happyReduce_197 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_197 = happySpecReduce_3  43# happyReduction_197
happyReduction_197 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut30 happy_x_1 of { (HappyWrap30 happy_var_1) -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut42 happy_x_3 of { (HappyWrap42 happy_var_3) -> 
	happyIn69
		 (LetBindingSignature () (Labeled happy_var_1 happy_var_2 happy_var_3)
	)}}}

happyReduce_198 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_198 = happySpecReduce_2  43# happyReduction_198
happyReduction_198 happy_x_2
	happy_x_1
	 =  case happyOut30 happy_x_1 of { (HappyWrap30 happy_var_1) -> 
	case happyOut71 happy_x_2 of { (HappyWrap71 happy_var_2) -> 
	happyIn69
		 (LetBindingName () (ValueBindingFields happy_var_1 [] happy_var_2)
	)}}

happyReduce_199 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_199 = happySpecReduce_3  43# happyReduction_199
happyReduction_199 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut30 happy_x_1 of { (HappyWrap30 happy_var_1) -> 
	case happyOut132 happy_x_2 of { (HappyWrap132 happy_var_2) -> 
	case happyOut71 happy_x_3 of { (HappyWrap71 happy_var_3) -> 
	happyIn69
		 (LetBindingName () (ValueBindingFields happy_var_1 (NE.toList happy_var_2) happy_var_3)
	)}}}

happyReduce_200 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_200 = happySpecReduce_3  43# happyReduction_200
happyReduction_200 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut86 happy_x_1 of { (HappyWrap86 happy_var_1) -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut55 happy_x_3 of { (HappyWrap55 happy_var_3) -> 
	happyIn69
		 (LetBindingPattern () happy_var_1 happy_var_2 happy_var_3
	)}}}

happyReduce_201 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_201 = happySpecReduce_2  44# happyReduction_201
happyReduction_201 happy_x_2
	happy_x_1
	 =  case happyOut147 happy_x_1 of { (HappyWrap147 happy_var_1) -> 
	case happyOut73 happy_x_2 of { (HappyWrap73 happy_var_2) -> 
	happyIn70
		 ((happy_var_1, happy_var_2)
	)}}

happyReduce_202 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_202 = happySpecReduce_2  45# happyReduction_202
happyReduction_202 happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut55 happy_x_2 of { (HappyWrap55 happy_var_2) -> 
	happyIn71
		 (Unconditional happy_var_1 happy_var_2
	)}}

happyReduce_203 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_203 = happySpecReduce_1  45# happyReduction_203
happyReduction_203 happy_x_1
	 =  case happyOut134 happy_x_1 of { (HappyWrap134 happy_var_1) -> 
	happyIn71
		 (Guarded happy_var_1
	)}

happyReduce_204 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_204 = happySpecReduce_3  46# happyReduction_204
happyReduction_204 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut80 happy_x_1 of { (HappyWrap80 happy_var_1) -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut55 happy_x_3 of { (HappyWrap55 happy_var_3) -> 
	happyIn72
		 (uncurry GuardedExpr happy_var_1 happy_var_2 happy_var_3
	)}}}

happyReduce_205 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_205 = happySpecReduce_2  47# happyReduction_205
happyReduction_205 happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut55 happy_x_2 of { (HappyWrap55 happy_var_2) -> 
	happyIn73
		 (Unconditional happy_var_1 happy_var_2
	)}}

happyReduce_206 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_206 = happySpecReduce_1  47# happyReduction_206
happyReduction_206 happy_x_1
	 =  case happyOut133 happy_x_1 of { (HappyWrap133 happy_var_1) -> 
	happyIn73
		 (Guarded happy_var_1
	)}

happyReduce_207 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_207 = happySpecReduce_3  48# happyReduction_207
happyReduction_207 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut80 happy_x_1 of { (HappyWrap80 happy_var_1) -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut55 happy_x_3 of { (HappyWrap55 happy_var_3) -> 
	happyIn74
		 (uncurry GuardedExpr happy_var_1 happy_var_2 happy_var_3
	)}}}

happyReduce_208 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_208 = happyMonad2Reduce 2# 49# happyReduction_208
happyReduction_208 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	( revert $ do
        res <- parseDoStatement
        when (null res) $ addFailure [happy_var_2] ErrEmptyDo
        pure $ DoBlock happy_var_1 $ NE.fromList res)}}) tk
	) (\r -> happyReturn (happyIn75 r))

happyReduce_209 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_209 = happySpecReduce_3  50# happyReduction_209
happyReduction_209 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn76
		 ((happy_var_1, [])
	)}

happyReduce_210 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_210 = happyMonad2Reduce 2# 50# happyReduction_210
happyReduction_210 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOutTok happy_x_1 of { happy_var_1 -> 
	( revert $ fmap (happy_var_1,) parseDoStatement)}) tk
	) (\r -> happyReturn (happyIn76 r))

happyReduce_211 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_211 = happyMonadReduce 4# 51# happyReduction_211
happyReduction_211 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut145 happy_x_3 of { (HappyWrap145 happy_var_3) -> 
	( revert $ fmap (DoLet happy_var_1 happy_var_3 :) parseDoNext)}}) tk
	) (\r -> happyReturn (happyIn77 r))

happyReduce_212 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_212 = happyMonadReduce 0# 51# happyReduction_212
happyReduction_212 (happyRest) tk
	 = happyThen ((( revert $ do
        stmt <- tryPrefix parseBinderAndArrow parseDoExpr
        let
          ctr = case stmt of
            (Just (binder, sep), expr) ->
              (DoBind binder sep expr :)
            (Nothing, expr) ->
              (DoDiscard expr :)
        fmap ctr parseDoNext)) tk
	) (\r -> happyReturn (happyIn77 r))

happyReduce_213 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_213 = happyMonadReduce 1# 52# happyReduction_213
happyReduction_213 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOut56 happy_x_1 of { (HappyWrap56 happy_var_1) -> 
	( revert $ pure happy_var_1)}) tk
	) (\r -> happyReturn (happyIn78 r))

happyReduce_214 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_214 = happyMonadReduce 1# 53# happyReduction_214
happyReduction_214 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((( revert parseDoStatement)) tk
	) (\r -> happyReturn (happyIn79 r))

happyReduce_215 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_215 = happyMonadReduce 1# 53# happyReduction_215
happyReduction_215 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((( revert $ pure [])) tk
	) (\r -> happyReturn (happyIn79 r))

happyReduce_216 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_216 = happyMonad2Reduce 1# 54# happyReduction_216
happyReduction_216 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOutTok happy_x_1 of { happy_var_1 -> 
	( revert $ fmap ((happy_var_1,) . uncurry Separated) parseGuardStatement)}) tk
	) (\r -> happyReturn (happyIn80 r))

happyReduce_217 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_217 = happyMonadReduce 0# 55# happyReduction_217
happyReduction_217 (happyRest) tk
	 = happyThen ((( revert $ do
        grd <- fmap (uncurry PatternGuard) $ tryPrefix parseBinderAndArrow parseGuardExpr
        fmap (grd,) parseGuardNext)) tk
	) (\r -> happyReturn (happyIn81 r))

happyReduce_218 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_218 = happyMonadReduce 1# 56# happyReduction_218
happyReduction_218 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOut57 happy_x_1 of { (HappyWrap57 happy_var_1) -> 
	( revert $ pure happy_var_1)}) tk
	) (\r -> happyReturn (happyIn82 r))

happyReduce_219 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_219 = happyMonadReduce 1# 57# happyReduction_219
happyReduction_219 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOutTok happy_x_1 of { happy_var_1 -> 
	( revert $ fmap (\(g, gs) -> (happy_var_1, g) : gs) parseGuardStatement)}) tk
	) (\r -> happyReturn (happyIn83 r))

happyReduce_220 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_220 = happyMonadReduce 0# 57# happyReduction_220
happyReduction_220 (happyRest) tk
	 = happyThen ((( revert $ pure [])) tk
	) (\r -> happyReturn (happyIn83 r))

happyReduce_221 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_221 = happyMonadReduce 2# 58# happyReduction_221
happyReduction_221 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOut85 happy_x_1 of { (HappyWrap85 happy_var_1) -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	( revert $ pure (happy_var_1, happy_var_2))}}) tk
	) (\r -> happyReturn (happyIn84 r))

happyReduce_222 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_222 = happySpecReduce_1  59# happyReduction_222
happyReduction_222 happy_x_1
	 =  case happyOut86 happy_x_1 of { (HappyWrap86 happy_var_1) -> 
	happyIn85
		 (happy_var_1
	)}

happyReduce_223 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_223 = happySpecReduce_3  59# happyReduction_223
happyReduction_223 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut86 happy_x_1 of { (HappyWrap86 happy_var_1) -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut42 happy_x_3 of { (HappyWrap42 happy_var_3) -> 
	happyIn85
		 (BinderTyped () happy_var_1 happy_var_2 happy_var_3
	)}}}

happyReduce_224 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_224 = happySpecReduce_1  60# happyReduction_224
happyReduction_224 happy_x_1
	 =  case happyOut87 happy_x_1 of { (HappyWrap87 happy_var_1) -> 
	happyIn86
		 (happy_var_1
	)}

happyReduce_225 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_225 = happySpecReduce_3  60# happyReduction_225
happyReduction_225 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut86 happy_x_1 of { (HappyWrap86 happy_var_1) -> 
	case happyOut31 happy_x_2 of { (HappyWrap31 happy_var_2) -> 
	case happyOut87 happy_x_3 of { (HappyWrap87 happy_var_3) -> 
	happyIn86
		 (BinderOp () happy_var_1 (getQualifiedOpName happy_var_2) happy_var_3
	)}}}

happyReduce_226 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_226 = happyMonadReduce 1# 61# happyReduction_226
happyReduction_226 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOut132 happy_x_1 of { (HappyWrap132 happy_var_1) -> 
	( toBinderConstructor happy_var_1)})
	) (\r -> happyReturn (happyIn87 r))

happyReduce_227 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_227 = happySpecReduce_2  61# happyReduction_227
happyReduction_227 happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut39 happy_x_2 of { (HappyWrap39 happy_var_2) -> 
	happyIn87
		 (uncurry (BinderNumber () (Just happy_var_1)) happy_var_2
	)}}

happyReduce_228 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_228 = happySpecReduce_1  62# happyReduction_228
happyReduction_228 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn88
		 (BinderWildcard () happy_var_1
	)}

happyReduce_229 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_229 = happySpecReduce_1  62# happyReduction_229
happyReduction_229 happy_x_1
	 =  case happyOut30 happy_x_1 of { (HappyWrap30 happy_var_1) -> 
	happyIn88
		 (BinderVar () happy_var_1
	)}

happyReduce_230 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_230 = happySpecReduce_3  62# happyReduction_230
happyReduction_230 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut30 happy_x_1 of { (HappyWrap30 happy_var_1) -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut88 happy_x_3 of { (HappyWrap88 happy_var_3) -> 
	happyIn88
		 (BinderNamed () happy_var_1 happy_var_2 happy_var_3
	)}}}

happyReduce_231 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_231 = happySpecReduce_1  62# happyReduction_231
happyReduction_231 happy_x_1
	 =  case happyOut27 happy_x_1 of { (HappyWrap27 happy_var_1) -> 
	happyIn88
		 (BinderConstructor () (getQualifiedProperName happy_var_1) []
	)}

happyReduce_232 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_232 = happySpecReduce_1  62# happyReduction_232
happyReduction_232 happy_x_1
	 =  case happyOut41 happy_x_1 of { (HappyWrap41 happy_var_1) -> 
	happyIn88
		 (uncurry (BinderBoolean ()) happy_var_1
	)}

happyReduce_233 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_233 = happySpecReduce_1  62# happyReduction_233
happyReduction_233 happy_x_1
	 =  case happyOut38 happy_x_1 of { (HappyWrap38 happy_var_1) -> 
	happyIn88
		 (uncurry (BinderChar ()) happy_var_1
	)}

happyReduce_234 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_234 = happySpecReduce_1  62# happyReduction_234
happyReduction_234 happy_x_1
	 =  case happyOut37 happy_x_1 of { (HappyWrap37 happy_var_1) -> 
	happyIn88
		 (uncurry (BinderString ()) happy_var_1
	)}

happyReduce_235 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_235 = happySpecReduce_1  62# happyReduction_235
happyReduction_235 happy_x_1
	 =  case happyOut39 happy_x_1 of { (HappyWrap39 happy_var_1) -> 
	happyIn88
		 (uncurry (BinderNumber () Nothing) happy_var_1
	)}

happyReduce_236 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_236 = happySpecReduce_1  62# happyReduction_236
happyReduction_236 happy_x_1
	 =  case happyOut128 happy_x_1 of { (HappyWrap128 happy_var_1) -> 
	happyIn88
		 (BinderArray () happy_var_1
	)}

happyReduce_237 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_237 = happySpecReduce_1  62# happyReduction_237
happyReduction_237 happy_x_1
	 =  case happyOut130 happy_x_1 of { (HappyWrap130 happy_var_1) -> 
	happyIn88
		 (BinderRecord () happy_var_1
	)}

happyReduce_238 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_238 = happySpecReduce_3  62# happyReduction_238
happyReduction_238 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut85 happy_x_2 of { (HappyWrap85 happy_var_2) -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	happyIn88
		 (BinderParens () (Wrapped happy_var_1 happy_var_2 happy_var_3)
	)}}}

happyReduce_239 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_239 = happyMonadReduce 1# 63# happyReduction_239
happyReduction_239 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOut35 happy_x_1 of { (HappyWrap35 happy_var_1) -> 
	( fmap RecordPun . toName Ident $ lblTok happy_var_1)})
	) (\r -> happyReturn (happyIn89 r))

happyReduce_240 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_240 = happyMonadReduce 3# 63# happyReduction_240
happyReduction_240 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOut35 happy_x_1 of { (HappyWrap35 happy_var_1) -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	( addFailure [happy_var_2] ErrRecordUpdateInCtr *> pure (RecordPun $ unexpectedName $ lblTok happy_var_1))}})
	) (\r -> happyReturn (happyIn89 r))

happyReduce_241 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_241 = happySpecReduce_3  63# happyReduction_241
happyReduction_241 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut35 happy_x_1 of { (HappyWrap35 happy_var_1) -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut85 happy_x_3 of { (HappyWrap85 happy_var_3) -> 
	happyIn89
		 (RecordField happy_var_1 happy_var_2 happy_var_3
	)}}}

happyReduce_242 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_242 = happyReduce 6# 64# happyReduction_242
happyReduction_242 (happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut26 happy_x_2 of { (HappyWrap26 happy_var_2) -> 
	case happyOut97 happy_x_3 of { (HappyWrap97 happy_var_3) -> 
	case happyOutTok happy_x_4 of { happy_var_4 -> 
	case happyOut92 happy_x_6 of { (HappyWrap92 happy_var_6) -> 
	happyIn90
		 ((Module () happy_var_1 happy_var_2 happy_var_3 happy_var_4 happy_var_6 [] [])
	) `HappyStk` happyRest}}}}}

happyReduce_243 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_243 = happyMonadReduce 2# 65# happyReduction_243
happyReduction_243 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOut94 happy_x_1 of { (HappyWrap94 happy_var_1) -> 
	( \(SourceToken ann _) -> pure (snd happy_var_1, tokLeadingComments ann))}) tk
	) (\r -> happyReturn (happyIn91 r))

happyReduce_244 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_244 = happyMonadReduce 3# 66# happyReduction_244
happyReduction_244 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOut93 happy_x_1 of { (HappyWrap93 happy_var_1) -> 
	case happyOut100 happy_x_2 of { (HappyWrap100 happy_var_2) -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	( revert $ pushBack happy_var_3 *> pure (reverse (happy_var_2 : happy_var_1)))}}}) tk
	) (\r -> happyReturn (happyIn92 r))

happyReduce_245 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_245 = happyMonadReduce 1# 66# happyReduction_245
happyReduction_245 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOut93 happy_x_1 of { (HappyWrap93 happy_var_1) -> 
	( revert $ pure (reverse happy_var_1))}) tk
	) (\r -> happyReturn (happyIn92 r))

happyReduce_246 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_246 = happySpecReduce_3  67# happyReduction_246
happyReduction_246 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut93 happy_x_1 of { (HappyWrap93 happy_var_1) -> 
	case happyOut100 happy_x_2 of { (HappyWrap100 happy_var_2) -> 
	happyIn93
		 (happy_var_2 : happy_var_1
	)}}

happyReduce_247 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_247 = happySpecReduce_0  67# happyReduction_247
happyReduction_247  =  happyIn93
		 ([]
	)

happyReduce_248 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_248 = happyMonadReduce 1# 68# happyReduction_248
happyReduction_248 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOut146 happy_x_1 of { (HappyWrap146 happy_var_1) -> 
	( toModuleDecls $ NE.toList happy_var_1)})
	) (\r -> happyReturn (happyIn94 r))

happyReduce_249 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_249 = happySpecReduce_0  68# happyReduction_249
happyReduction_249  =  happyIn94
		 (([], [])
	)

happyReduce_250 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_250 = happySpecReduce_1  69# happyReduction_250
happyReduction_250 happy_x_1
	 =  case happyOut100 happy_x_1 of { (HappyWrap100 happy_var_1) -> 
	happyIn95
		 (TmpImport happy_var_1
	)}

happyReduce_251 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_251 = happySpecReduce_1  69# happyReduction_251
happyReduction_251 happy_x_1
	 =  case happyOut150 happy_x_1 of { (HappyWrap150 happy_var_1) -> 
	happyIn95
		 (TmpChain happy_var_1
	)}

happyReduce_252 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_252 = happySpecReduce_1  70# happyReduction_252
happyReduction_252 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn96
		 (happy_var_1
	)}

happyReduce_253 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_253 = happySpecReduce_2  70# happyReduction_253
happyReduction_253 happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn96
		 (happy_var_1
	)}

happyReduce_254 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_254 = happySpecReduce_0  71# happyReduction_254
happyReduction_254  =  happyIn97
		 (Nothing
	)

happyReduce_255 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_255 = happySpecReduce_3  71# happyReduction_255
happyReduction_255 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut151 happy_x_2 of { (HappyWrap151 happy_var_2) -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	happyIn97
		 (Just (Wrapped happy_var_1 happy_var_2 happy_var_3)
	)}}}

happyReduce_256 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_256 = happySpecReduce_1  72# happyReduction_256
happyReduction_256 happy_x_1
	 =  case happyOut30 happy_x_1 of { (HappyWrap30 happy_var_1) -> 
	happyIn98
		 (ExportValue () happy_var_1
	)}

happyReduce_257 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_257 = happySpecReduce_1  72# happyReduction_257
happyReduction_257 happy_x_1
	 =  case happyOut34 happy_x_1 of { (HappyWrap34 happy_var_1) -> 
	happyIn98
		 (ExportOp () (getOpName happy_var_1)
	)}

happyReduce_258 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_258 = happySpecReduce_1  72# happyReduction_258
happyReduction_258 happy_x_1
	 =  case happyOut28 happy_x_1 of { (HappyWrap28 happy_var_1) -> 
	happyIn98
		 (ExportType () (getProperName happy_var_1) Nothing
	)}

happyReduce_259 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_259 = happySpecReduce_2  72# happyReduction_259
happyReduction_259 happy_x_2
	happy_x_1
	 =  case happyOut28 happy_x_1 of { (HappyWrap28 happy_var_1) -> 
	case happyOut99 happy_x_2 of { (HappyWrap99 happy_var_2) -> 
	happyIn98
		 (ExportType () (getProperName happy_var_1) (Just happy_var_2)
	)}}

happyReduce_260 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_260 = happySpecReduce_2  72# happyReduction_260
happyReduction_260 happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut34 happy_x_2 of { (HappyWrap34 happy_var_2) -> 
	happyIn98
		 (ExportTypeOp () happy_var_1 (getOpName happy_var_2)
	)}}

happyReduce_261 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_261 = happySpecReduce_2  72# happyReduction_261
happyReduction_261 happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut28 happy_x_2 of { (HappyWrap28 happy_var_2) -> 
	happyIn98
		 (ExportClass () happy_var_1 (getProperName happy_var_2)
	)}}

happyReduce_262 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_262 = happySpecReduce_2  72# happyReduction_262
happyReduction_262 happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut26 happy_x_2 of { (HappyWrap26 happy_var_2) -> 
	happyIn98
		 (ExportModule () happy_var_1 happy_var_2
	)}}

happyReduce_263 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_263 = happySpecReduce_1  73# happyReduction_263
happyReduction_263 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn99
		 (DataAll () happy_var_1
	)}

happyReduce_264 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_264 = happySpecReduce_2  73# happyReduction_264
happyReduction_264 happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	happyIn99
		 (DataEnumerated () (Wrapped happy_var_1 Nothing happy_var_2)
	)}}

happyReduce_265 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_265 = happySpecReduce_3  73# happyReduction_265
happyReduction_265 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut156 happy_x_2 of { (HappyWrap156 happy_var_2) -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	happyIn99
		 (DataEnumerated () (Wrapped happy_var_1 (Just $ getProperName <$> happy_var_2) happy_var_3)
	)}}}

happyReduce_266 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_266 = happySpecReduce_3  74# happyReduction_266
happyReduction_266 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut26 happy_x_2 of { (HappyWrap26 happy_var_2) -> 
	case happyOut101 happy_x_3 of { (HappyWrap101 happy_var_3) -> 
	happyIn100
		 (ImportDecl () happy_var_1 happy_var_2 happy_var_3 Nothing
	)}}}

happyReduce_267 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_267 = happyReduce 5# 74# happyReduction_267
happyReduction_267 (happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut26 happy_x_2 of { (HappyWrap26 happy_var_2) -> 
	case happyOut101 happy_x_3 of { (HappyWrap101 happy_var_3) -> 
	case happyOutTok happy_x_4 of { happy_var_4 -> 
	case happyOut26 happy_x_5 of { (HappyWrap26 happy_var_5) -> 
	happyIn100
		 (ImportDecl () happy_var_1 happy_var_2 happy_var_3 (Just (happy_var_4, happy_var_5))
	) `HappyStk` happyRest}}}}}

happyReduce_268 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_268 = happySpecReduce_0  75# happyReduction_268
happyReduction_268  =  happyIn101
		 (Nothing
	)

happyReduce_269 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_269 = happySpecReduce_3  75# happyReduction_269
happyReduction_269 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut154 happy_x_2 of { (HappyWrap154 happy_var_2) -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	happyIn101
		 (Just (Nothing, Wrapped happy_var_1 happy_var_2 happy_var_3)
	)}}}

happyReduce_270 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_270 = happyReduce 4# 75# happyReduction_270
happyReduction_270 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut154 happy_x_3 of { (HappyWrap154 happy_var_3) -> 
	case happyOutTok happy_x_4 of { happy_var_4 -> 
	happyIn101
		 (Just (Just happy_var_1, Wrapped happy_var_2 happy_var_3 happy_var_4)
	) `HappyStk` happyRest}}}}

happyReduce_271 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_271 = happySpecReduce_1  76# happyReduction_271
happyReduction_271 happy_x_1
	 =  case happyOut30 happy_x_1 of { (HappyWrap30 happy_var_1) -> 
	happyIn102
		 (ImportValue () happy_var_1
	)}

happyReduce_272 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_272 = happySpecReduce_1  76# happyReduction_272
happyReduction_272 happy_x_1
	 =  case happyOut34 happy_x_1 of { (HappyWrap34 happy_var_1) -> 
	happyIn102
		 (ImportOp () (getOpName happy_var_1)
	)}

happyReduce_273 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_273 = happySpecReduce_1  76# happyReduction_273
happyReduction_273 happy_x_1
	 =  case happyOut28 happy_x_1 of { (HappyWrap28 happy_var_1) -> 
	happyIn102
		 (ImportType () (getProperName happy_var_1) Nothing
	)}

happyReduce_274 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_274 = happySpecReduce_2  76# happyReduction_274
happyReduction_274 happy_x_2
	happy_x_1
	 =  case happyOut28 happy_x_1 of { (HappyWrap28 happy_var_1) -> 
	case happyOut99 happy_x_2 of { (HappyWrap99 happy_var_2) -> 
	happyIn102
		 (ImportType () (getProperName happy_var_1) (Just happy_var_2)
	)}}

happyReduce_275 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_275 = happySpecReduce_2  76# happyReduction_275
happyReduction_275 happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut34 happy_x_2 of { (HappyWrap34 happy_var_2) -> 
	happyIn102
		 (ImportTypeOp () happy_var_1 (getOpName happy_var_2)
	)}}

happyReduce_276 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_276 = happySpecReduce_2  76# happyReduction_276
happyReduction_276 happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut28 happy_x_2 of { (HappyWrap28 happy_var_2) -> 
	happyIn102
		 (ImportClass () happy_var_1 (getProperName happy_var_2)
	)}}

happyReduce_277 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_277 = happySpecReduce_1  77# happyReduction_277
happyReduction_277 happy_x_1
	 =  case happyOut104 happy_x_1 of { (HappyWrap104 happy_var_1) -> 
	happyIn103
		 (DeclData () happy_var_1 Nothing
	)}

happyReduce_278 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_278 = happySpecReduce_3  77# happyReduction_278
happyReduction_278 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut104 happy_x_1 of { (HappyWrap104 happy_var_1) -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut149 happy_x_3 of { (HappyWrap149 happy_var_3) -> 
	happyIn103
		 (DeclData () happy_var_1 (Just (happy_var_2, happy_var_3))
	)}}}

happyReduce_279 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_279 = happyMonadReduce 3# 77# happyReduction_279
happyReduction_279 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOut105 happy_x_1 of { (HappyWrap105 happy_var_1) -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut42 happy_x_3 of { (HappyWrap42 happy_var_3) -> 
	( checkNoWildcards happy_var_3 *> pure (DeclType () happy_var_1 happy_var_2 happy_var_3))}}})
	) (\r -> happyReturn (happyIn103 r))

happyReduce_280 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_280 = happyMonadReduce 4# 77# happyReduction_280
happyReduction_280 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOut106 happy_x_1 of { (HappyWrap106 happy_var_1) -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut28 happy_x_3 of { (HappyWrap28 happy_var_3) -> 
	case happyOut48 happy_x_4 of { (HappyWrap48 happy_var_4) -> 
	( checkNoWildcards happy_var_4 *> pure (DeclNewtype () happy_var_1 happy_var_2 (getProperName happy_var_3) happy_var_4))}}}})
	) (\r -> happyReturn (happyIn103 r))

happyReduce_281 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_281 = happySpecReduce_1  77# happyReduction_281
happyReduction_281 happy_x_1
	 =  case happyOut108 happy_x_1 of { (HappyWrap108 happy_var_1) -> 
	happyIn103
		 (either id (\h -> DeclClass () h Nothing) happy_var_1
	)}

happyReduce_282 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_282 = happyMonadReduce 5# 77# happyReduction_282
happyReduction_282 (happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOut108 happy_x_1 of { (HappyWrap108 happy_var_1) -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut143 happy_x_4 of { (HappyWrap143 happy_var_4) -> 
	( either (const (parseError happy_var_2)) (\h -> pure $ DeclClass () h (Just (happy_var_2, happy_var_4))) happy_var_1)}}})
	) (\r -> happyReturn (happyIn103 r))

happyReduce_283 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_283 = happySpecReduce_1  77# happyReduction_283
happyReduction_283 happy_x_1
	 =  case happyOut115 happy_x_1 of { (HappyWrap115 happy_var_1) -> 
	happyIn103
		 (DeclInstanceChain () (Separated (Instance happy_var_1 Nothing) [])
	)}

happyReduce_284 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_284 = happyReduce 5# 77# happyReduction_284
happyReduction_284 (happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut115 happy_x_1 of { (HappyWrap115 happy_var_1) -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut144 happy_x_4 of { (HappyWrap144 happy_var_4) -> 
	happyIn103
		 (DeclInstanceChain () (Separated (Instance happy_var_1 (Just (happy_var_2, happy_var_4))) [])
	) `HappyStk` happyRest}}}

happyReduce_285 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_285 = happyMonadReduce 4# 77# happyReduction_285
happyReduction_285 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut28 happy_x_2 of { (HappyWrap28 happy_var_2) -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	case happyOut42 happy_x_4 of { (HappyWrap42 happy_var_4) -> 
	( checkNoWildcards happy_var_4 *> pure (DeclKindSignature () happy_var_1 (Labeled (getProperName happy_var_2) happy_var_3 happy_var_4)))}}}})
	) (\r -> happyReturn (happyIn103 r))

happyReduce_286 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_286 = happyMonadReduce 4# 77# happyReduction_286
happyReduction_286 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut28 happy_x_2 of { (HappyWrap28 happy_var_2) -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	case happyOut42 happy_x_4 of { (HappyWrap42 happy_var_4) -> 
	( checkNoWildcards happy_var_4 *> pure (DeclKindSignature () happy_var_1 (Labeled (getProperName happy_var_2) happy_var_3 happy_var_4)))}}}})
	) (\r -> happyReturn (happyIn103 r))

happyReduce_287 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_287 = happyMonadReduce 4# 77# happyReduction_287
happyReduction_287 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut28 happy_x_2 of { (HappyWrap28 happy_var_2) -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	case happyOut42 happy_x_4 of { (HappyWrap42 happy_var_4) -> 
	( checkNoWildcards happy_var_4 *> pure (DeclKindSignature () happy_var_1 (Labeled (getProperName happy_var_2) happy_var_3 happy_var_4)))}}}})
	) (\r -> happyReturn (happyIn103 r))

happyReduce_288 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_288 = happySpecReduce_2  77# happyReduction_288
happyReduction_288 happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut115 happy_x_2 of { (HappyWrap115 happy_var_2) -> 
	happyIn103
		 (DeclDerive () happy_var_1 Nothing happy_var_2
	)}}

happyReduce_289 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_289 = happySpecReduce_3  77# happyReduction_289
happyReduction_289 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut115 happy_x_3 of { (HappyWrap115 happy_var_3) -> 
	happyIn103
		 (DeclDerive () happy_var_1 (Just happy_var_2) happy_var_3
	)}}}

happyReduce_290 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_290 = happySpecReduce_3  77# happyReduction_290
happyReduction_290 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut30 happy_x_1 of { (HappyWrap30 happy_var_1) -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut42 happy_x_3 of { (HappyWrap42 happy_var_3) -> 
	happyIn103
		 (DeclSignature () (Labeled happy_var_1 happy_var_2 happy_var_3)
	)}}}

happyReduce_291 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_291 = happySpecReduce_3  77# happyReduction_291
happyReduction_291 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut30 happy_x_1 of { (HappyWrap30 happy_var_1) -> 
	case happyOut138 happy_x_2 of { (HappyWrap138 happy_var_2) -> 
	case happyOut71 happy_x_3 of { (HappyWrap71 happy_var_3) -> 
	happyIn103
		 (DeclValue () (ValueBindingFields happy_var_1 happy_var_2 happy_var_3)
	)}}}

happyReduce_292 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_292 = happySpecReduce_1  77# happyReduction_292
happyReduction_292 happy_x_1
	 =  case happyOut119 happy_x_1 of { (HappyWrap119 happy_var_1) -> 
	happyIn103
		 (DeclFixity () happy_var_1
	)}

happyReduce_293 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_293 = happyMonadReduce 5# 77# happyReduction_293
happyReduction_293 (happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut30 happy_x_3 of { (HappyWrap30 happy_var_3) -> 
	case happyOutTok happy_x_4 of { happy_var_4 -> 
	case happyOut42 happy_x_5 of { (HappyWrap42 happy_var_5) -> 
	( when (isConstrained happy_var_5) (addFailure ([happy_var_1, happy_var_2, nameTok happy_var_3, happy_var_4] <> toList (flattenType happy_var_5)) ErrConstraintInForeignImportSyntax) *> pure (DeclForeign () happy_var_1 happy_var_2 (ForeignValue (Labeled happy_var_3 happy_var_4 happy_var_5))))}}}}})
	) (\r -> happyReturn (happyIn103 r))

happyReduce_294 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_294 = happyReduce 6# 77# happyReduction_294
happyReduction_294 (happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	case happyOut28 happy_x_4 of { (HappyWrap28 happy_var_4) -> 
	case happyOutTok happy_x_5 of { happy_var_5 -> 
	case happyOut42 happy_x_6 of { (HappyWrap42 happy_var_6) -> 
	happyIn103
		 (DeclForeign () happy_var_1 happy_var_2 (ForeignData happy_var_3 (Labeled (getProperName happy_var_4) happy_var_5 happy_var_6))
	) `HappyStk` happyRest}}}}}}

happyReduce_295 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_295 = happyReduce 4# 77# happyReduction_295
happyReduction_295 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut28 happy_x_3 of { (HappyWrap28 happy_var_3) -> 
	case happyOut136 happy_x_4 of { (HappyWrap136 happy_var_4) -> 
	happyIn103
		 (DeclRole () happy_var_1 happy_var_2 (getProperName happy_var_3) happy_var_4
	) `HappyStk` happyRest}}}}

happyReduce_296 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_296 = happySpecReduce_3  78# happyReduction_296
happyReduction_296 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut28 happy_x_2 of { (HappyWrap28 happy_var_2) -> 
	case happyOut141 happy_x_3 of { (HappyWrap141 happy_var_3) -> 
	happyIn104
		 (DataHead happy_var_1 (getProperName happy_var_2) happy_var_3
	)}}}

happyReduce_297 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_297 = happySpecReduce_3  79# happyReduction_297
happyReduction_297 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut28 happy_x_2 of { (HappyWrap28 happy_var_2) -> 
	case happyOut141 happy_x_3 of { (HappyWrap141 happy_var_3) -> 
	happyIn105
		 (DataHead happy_var_1 (getProperName happy_var_2) happy_var_3
	)}}}

happyReduce_298 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_298 = happySpecReduce_3  80# happyReduction_298
happyReduction_298 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut28 happy_x_2 of { (HappyWrap28 happy_var_2) -> 
	case happyOut141 happy_x_3 of { (HappyWrap141 happy_var_3) -> 
	happyIn106
		 (DataHead happy_var_1 (getProperName happy_var_2) happy_var_3
	)}}}

happyReduce_299 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_299 = happyMonadReduce 2# 81# happyReduction_299
happyReduction_299 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOut28 happy_x_1 of { (HappyWrap28 happy_var_1) -> 
	case happyOut139 happy_x_2 of { (HappyWrap139 happy_var_2) -> 
	( for_ happy_var_2 checkNoWildcards *> pure (DataCtor () (getProperName happy_var_1) happy_var_2))}})
	) (\r -> happyReturn (happyIn107 r))

happyReduce_300 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_300 = happyMonad2Reduce 1# 82# happyReduction_300
happyReduction_300 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOutTok happy_x_1 of { happy_var_1 -> 
	( revert $ oneOf $ NE.fromList
          [ fmap (Left . DeclKindSignature () happy_var_1) parseClassSignature
          , do
              (super, (name, vars, fundeps)) <- tryPrefix parseClassSuper parseClassNameAndFundeps
              let hd = ClassHead happy_var_1 super name vars fundeps
              checkFundeps hd
              pure $ Right hd
          ])}) tk
	) (\r -> happyReturn (happyIn108 r))

happyReduce_301 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_301 = happyMonadReduce 3# 83# happyReduction_301
happyReduction_301 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOut28 happy_x_1 of { (HappyWrap28 happy_var_1) -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut42 happy_x_3 of { (HappyWrap42 happy_var_3) -> 
	( revert $ checkNoWildcards happy_var_3 *> pure (Labeled (getProperName happy_var_1) happy_var_2 happy_var_3))}}}) tk
	) (\r -> happyReturn (happyIn109 r))

happyReduce_302 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_302 = happyMonadReduce 2# 84# happyReduction_302
happyReduction_302 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOut116 happy_x_1 of { (HappyWrap116 happy_var_1) -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	( revert $ pure (happy_var_1, happy_var_2))}}) tk
	) (\r -> happyReturn (happyIn110 r))

happyReduce_303 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_303 = happyMonadReduce 3# 85# happyReduction_303
happyReduction_303 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOut28 happy_x_1 of { (HappyWrap28 happy_var_1) -> 
	case happyOut140 happy_x_2 of { (HappyWrap140 happy_var_2) -> 
	case happyOut112 happy_x_3 of { (HappyWrap112 happy_var_3) -> 
	( revert $ pure (getProperName happy_var_1, happy_var_2, happy_var_3))}}}) tk
	) (\r -> happyReturn (happyIn111 r))

happyReduce_304 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_304 = happySpecReduce_0  86# happyReduction_304
happyReduction_304  =  happyIn112
		 (Nothing
	)

happyReduce_305 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_305 = happySpecReduce_2  86# happyReduction_305
happyReduction_305 happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut153 happy_x_2 of { (HappyWrap153 happy_var_2) -> 
	happyIn112
		 (Just (happy_var_1, happy_var_2)
	)}}

happyReduce_306 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_306 = happySpecReduce_2  87# happyReduction_306
happyReduction_306 happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut135 happy_x_2 of { (HappyWrap135 happy_var_2) -> 
	happyIn113
		 (FundepDetermined happy_var_1 happy_var_2
	)}}

happyReduce_307 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_307 = happySpecReduce_3  87# happyReduction_307
happyReduction_307 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut135 happy_x_1 of { (HappyWrap135 happy_var_1) -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut135 happy_x_3 of { (HappyWrap135 happy_var_3) -> 
	happyIn113
		 (FundepDetermines happy_var_1 happy_var_2 happy_var_3
	)}}}

happyReduce_308 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_308 = happyMonadReduce 3# 88# happyReduction_308
happyReduction_308 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOut30 happy_x_1 of { (HappyWrap30 happy_var_1) -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut42 happy_x_3 of { (HappyWrap42 happy_var_3) -> 
	( checkNoWildcards happy_var_3 *> pure (Labeled happy_var_1 happy_var_2 happy_var_3))}}})
	) (\r -> happyReturn (happyIn114 r))

happyReduce_309 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_309 = happyReduce 5# 89# happyReduction_309
happyReduction_309 (happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut116 happy_x_2 of { (HappyWrap116 happy_var_2) -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	case happyOut27 happy_x_4 of { (HappyWrap27 happy_var_4) -> 
	case happyOut139 happy_x_5 of { (HappyWrap139 happy_var_5) -> 
	happyIn115
		 (InstanceHead happy_var_1 Nothing (Just (happy_var_2, happy_var_3)) (getQualifiedProperName happy_var_4) happy_var_5
	) `HappyStk` happyRest}}}}}

happyReduce_310 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_310 = happySpecReduce_3  89# happyReduction_310
happyReduction_310 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut27 happy_x_2 of { (HappyWrap27 happy_var_2) -> 
	case happyOut139 happy_x_3 of { (HappyWrap139 happy_var_3) -> 
	happyIn115
		 (InstanceHead happy_var_1 Nothing Nothing (getQualifiedProperName happy_var_2) happy_var_3
	)}}}

happyReduce_311 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_311 = happyReduce 7# 89# happyReduction_311
happyReduction_311 (happy_x_7 `HappyStk`
	happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut30 happy_x_2 of { (HappyWrap30 happy_var_2) -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	case happyOut116 happy_x_4 of { (HappyWrap116 happy_var_4) -> 
	case happyOutTok happy_x_5 of { happy_var_5 -> 
	case happyOut27 happy_x_6 of { (HappyWrap27 happy_var_6) -> 
	case happyOut139 happy_x_7 of { (HappyWrap139 happy_var_7) -> 
	happyIn115
		 (InstanceHead happy_var_1 (Just (happy_var_2, happy_var_3)) (Just (happy_var_4, happy_var_5)) (getQualifiedProperName happy_var_6) happy_var_7
	) `HappyStk` happyRest}}}}}}}

happyReduce_312 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_312 = happyReduce 5# 89# happyReduction_312
happyReduction_312 (happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut30 happy_x_2 of { (HappyWrap30 happy_var_2) -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	case happyOut27 happy_x_4 of { (HappyWrap27 happy_var_4) -> 
	case happyOut139 happy_x_5 of { (HappyWrap139 happy_var_5) -> 
	happyIn115
		 (InstanceHead happy_var_1 (Just (happy_var_2, happy_var_3)) Nothing (getQualifiedProperName happy_var_4) happy_var_5
	) `HappyStk` happyRest}}}}}

happyReduce_313 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_313 = happySpecReduce_1  90# happyReduction_313
happyReduction_313 happy_x_1
	 =  case happyOut117 happy_x_1 of { (HappyWrap117 happy_var_1) -> 
	happyIn116
		 (One happy_var_1
	)}

happyReduce_314 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_314 = happySpecReduce_3  90# happyReduction_314
happyReduction_314 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut148 happy_x_2 of { (HappyWrap148 happy_var_2) -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	happyIn116
		 (Many (Wrapped happy_var_1 happy_var_2 happy_var_3)
	)}}}

happyReduce_315 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_315 = happyMonadReduce 2# 91# happyReduction_315
happyReduction_315 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOut27 happy_x_1 of { (HappyWrap27 happy_var_1) -> 
	case happyOut139 happy_x_2 of { (HappyWrap139 happy_var_2) -> 
	( for_ happy_var_2 checkNoWildcards *> for_ happy_var_2 checkNoForalls *> pure (Constraint () (getQualifiedProperName happy_var_1) happy_var_2))}})
	) (\r -> happyReturn (happyIn117 r))

happyReduce_316 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_316 = happySpecReduce_3  91# happyReduction_316
happyReduction_316 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut117 happy_x_2 of { (HappyWrap117 happy_var_2) -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	happyIn117
		 (ConstraintParens () (Wrapped happy_var_1 happy_var_2 happy_var_3)
	)}}}

happyReduce_317 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_317 = happySpecReduce_3  92# happyReduction_317
happyReduction_317 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut30 happy_x_1 of { (HappyWrap30 happy_var_1) -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut42 happy_x_3 of { (HappyWrap42 happy_var_3) -> 
	happyIn118
		 (InstanceBindingSignature () (Labeled happy_var_1 happy_var_2 happy_var_3)
	)}}}

happyReduce_318 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_318 = happySpecReduce_3  92# happyReduction_318
happyReduction_318 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut30 happy_x_1 of { (HappyWrap30 happy_var_1) -> 
	case happyOut138 happy_x_2 of { (HappyWrap138 happy_var_2) -> 
	case happyOut71 happy_x_3 of { (HappyWrap71 happy_var_3) -> 
	happyIn118
		 (InstanceBindingName () (ValueBindingFields happy_var_1 happy_var_2 happy_var_3)
	)}}}

happyReduce_319 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_319 = happyReduce 5# 93# happyReduction_319
happyReduction_319 (happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut120 happy_x_1 of { (HappyWrap120 happy_var_1) -> 
	case happyOut40 happy_x_2 of { (HappyWrap40 happy_var_2) -> 
	case happyOut29 happy_x_3 of { (HappyWrap29 happy_var_3) -> 
	case happyOutTok happy_x_4 of { happy_var_4 -> 
	case happyOut32 happy_x_5 of { (HappyWrap32 happy_var_5) -> 
	happyIn119
		 (FixityFields happy_var_1 happy_var_2 (FixityValue (fmap Left happy_var_3) happy_var_4 (getOpName happy_var_5))
	) `HappyStk` happyRest}}}}}

happyReduce_320 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_320 = happyReduce 5# 93# happyReduction_320
happyReduction_320 (happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut120 happy_x_1 of { (HappyWrap120 happy_var_1) -> 
	case happyOut40 happy_x_2 of { (HappyWrap40 happy_var_2) -> 
	case happyOut27 happy_x_3 of { (HappyWrap27 happy_var_3) -> 
	case happyOutTok happy_x_4 of { happy_var_4 -> 
	case happyOut32 happy_x_5 of { (HappyWrap32 happy_var_5) -> 
	happyIn119
		 (FixityFields happy_var_1 happy_var_2 (FixityValue (fmap Right (getQualifiedProperName happy_var_3)) happy_var_4 (getOpName happy_var_5))
	) `HappyStk` happyRest}}}}}

happyReduce_321 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_321 = happyReduce 6# 93# happyReduction_321
happyReduction_321 (happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut120 happy_x_1 of { (HappyWrap120 happy_var_1) -> 
	case happyOut40 happy_x_2 of { (HappyWrap40 happy_var_2) -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	case happyOut27 happy_x_4 of { (HappyWrap27 happy_var_4) -> 
	case happyOutTok happy_x_5 of { happy_var_5 -> 
	case happyOut32 happy_x_6 of { (HappyWrap32 happy_var_6) -> 
	happyIn119
		 (FixityFields happy_var_1 happy_var_2 (FixityType happy_var_3 (getQualifiedProperName happy_var_4) happy_var_5 (getOpName happy_var_6))
	) `HappyStk` happyRest}}}}}}

happyReduce_322 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_322 = happySpecReduce_1  94# happyReduction_322
happyReduction_322 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn120
		 ((happy_var_1, Infix)
	)}

happyReduce_323 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_323 = happySpecReduce_1  94# happyReduction_323
happyReduction_323 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn120
		 ((happy_var_1, Infixl)
	)}

happyReduce_324 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_324 = happySpecReduce_1  94# happyReduction_324
happyReduction_324 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn120
		 ((happy_var_1, Infixr)
	)}

happyReduce_325 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_325 = happySpecReduce_1  95# happyReduction_325
happyReduction_325 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn121
		 (Role happy_var_1 R.Nominal
	)}

happyReduce_326 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_326 = happySpecReduce_1  95# happyReduction_326
happyReduction_326 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn121
		 (Role happy_var_1 R.Representational
	)}

happyReduce_327 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_327 = happySpecReduce_1  95# happyReduction_327
happyReduction_327 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn121
		 (Role happy_var_1 R.Phantom
	)}

happyReduce_328 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_328 = happyMonadReduce 1# 96# happyReduction_328
happyReduction_328 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOut100 happy_x_1 of { (HappyWrap100 happy_var_1) -> 
	( revert $ pure happy_var_1)}) tk
	) (\r -> happyReturn (happyIn122 r))

happyReduce_329 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_329 = happyMonadReduce 1# 97# happyReduction_329
happyReduction_329 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOut103 happy_x_1 of { (HappyWrap103 happy_var_1) -> 
	( revert $ pure happy_var_1)}) tk
	) (\r -> happyReturn (happyIn123 r))

happyReduce_330 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_330 = happyMonadReduce 1# 98# happyReduction_330
happyReduction_330 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOut56 happy_x_1 of { (HappyWrap56 happy_var_1) -> 
	( revert $ pure happy_var_1)}) tk
	) (\r -> happyReturn (happyIn124 r))

happyReduce_331 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_331 = happyMonadReduce 1# 99# happyReduction_331
happyReduction_331 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOut42 happy_x_1 of { (HappyWrap42 happy_var_1) -> 
	( revert $ pure happy_var_1)}) tk
	) (\r -> happyReturn (happyIn125 r))

happyReduce_332 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_332 = happyMonadReduce 1# 100# happyReduction_332
happyReduction_332 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOut26 happy_x_1 of { (HappyWrap26 happy_var_1) -> 
	( revert $ pure happy_var_1)}) tk
	) (\r -> happyReturn (happyIn126 r))

happyReduce_333 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_333 = happyMonadReduce 1# 101# happyReduction_333
happyReduction_333 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen ((case happyOut29 happy_x_1 of { (HappyWrap29 happy_var_1) -> 
	( revert $ pure happy_var_1)}) tk
	) (\r -> happyReturn (happyIn127 r))

happyReduce_334 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_334 = happySpecReduce_2  102# happyReduction_334
happyReduction_334 happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	happyIn128
		 (Wrapped happy_var_1 Nothing happy_var_2
	)}}

happyReduce_335 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_335 = happySpecReduce_3  102# happyReduction_335
happyReduction_335 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut173 happy_x_2 of { (HappyWrap173 happy_var_2) -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	happyIn128
		 (Wrapped happy_var_1 (Just happy_var_2) happy_var_3
	)}}}

happyReduce_336 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_336 = happySpecReduce_2  103# happyReduction_336
happyReduction_336 happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	happyIn129
		 (Wrapped happy_var_1 Nothing happy_var_2
	)}}

happyReduce_337 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_337 = happySpecReduce_3  103# happyReduction_337
happyReduction_337 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut152 happy_x_2 of { (HappyWrap152 happy_var_2) -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	happyIn129
		 (Wrapped happy_var_1 (Just happy_var_2) happy_var_3
	)}}}

happyReduce_338 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_338 = happySpecReduce_2  104# happyReduction_338
happyReduction_338 happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	happyIn130
		 (Wrapped happy_var_1 Nothing happy_var_2
	)}}

happyReduce_339 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_339 = happySpecReduce_3  104# happyReduction_339
happyReduction_339 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut174 happy_x_2 of { (HappyWrap174 happy_var_2) -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	happyIn130
		 (Wrapped happy_var_1 (Just happy_var_2) happy_var_3
	)}}}

happyReduce_340 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_340 = happySpecReduce_2  105# happyReduction_340
happyReduction_340 happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	happyIn131
		 (Wrapped happy_var_1 Nothing happy_var_2
	)}}

happyReduce_341 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_341 = happySpecReduce_3  105# happyReduction_341
happyReduction_341 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut175 happy_x_2 of { (HappyWrap175 happy_var_2) -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	happyIn131
		 (Wrapped happy_var_1 (Just happy_var_2) happy_var_3
	)}}}

happyReduce_342 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_342 = happySpecReduce_1  106# happyReduction_342
happyReduction_342 happy_x_1
	 =  case happyOut162 happy_x_1 of { (HappyWrap162 happy_var_1) -> 
	happyIn132
		 (NE.reverse happy_var_1
	)}

happyReduce_343 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_343 = happySpecReduce_1  107# happyReduction_343
happyReduction_343 happy_x_1
	 =  case happyOut163 happy_x_1 of { (HappyWrap163 happy_var_1) -> 
	happyIn133
		 (NE.reverse happy_var_1
	)}

happyReduce_344 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_344 = happySpecReduce_1  108# happyReduction_344
happyReduction_344 happy_x_1
	 =  case happyOut164 happy_x_1 of { (HappyWrap164 happy_var_1) -> 
	happyIn134
		 (NE.reverse happy_var_1
	)}

happyReduce_345 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_345 = happySpecReduce_1  109# happyReduction_345
happyReduction_345 happy_x_1
	 =  case happyOut165 happy_x_1 of { (HappyWrap165 happy_var_1) -> 
	happyIn135
		 (NE.reverse happy_var_1
	)}

happyReduce_346 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_346 = happySpecReduce_1  110# happyReduction_346
happyReduction_346 happy_x_1
	 =  case happyOut166 happy_x_1 of { (HappyWrap166 happy_var_1) -> 
	happyIn136
		 (NE.reverse happy_var_1
	)}

happyReduce_347 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_347 = happySpecReduce_1  111# happyReduction_347
happyReduction_347 happy_x_1
	 =  case happyOut167 happy_x_1 of { (HappyWrap167 happy_var_1) -> 
	happyIn137
		 (NE.reverse happy_var_1
	)}

happyReduce_348 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_348 = happySpecReduce_0  112# happyReduction_348
happyReduction_348  =  happyIn138
		 ([]
	)

happyReduce_349 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_349 = happySpecReduce_1  112# happyReduction_349
happyReduction_349 happy_x_1
	 =  case happyOut132 happy_x_1 of { (HappyWrap132 happy_var_1) -> 
	happyIn138
		 (NE.toList happy_var_1
	)}

happyReduce_350 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_350 = happySpecReduce_0  113# happyReduction_350
happyReduction_350  =  happyIn139
		 ([]
	)

happyReduce_351 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_351 = happySpecReduce_1  113# happyReduction_351
happyReduction_351 happy_x_1
	 =  case happyOut160 happy_x_1 of { (HappyWrap160 happy_var_1) -> 
	happyIn139
		 (NE.toList happy_var_1
	)}

happyReduce_352 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_352 = happySpecReduce_0  114# happyReduction_352
happyReduction_352  =  happyIn140
		 ([]
	)

happyReduce_353 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_353 = happySpecReduce_1  114# happyReduction_353
happyReduction_353 happy_x_1
	 =  case happyOut137 happy_x_1 of { (HappyWrap137 happy_var_1) -> 
	happyIn140
		 (NE.toList happy_var_1
	)}

happyReduce_354 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_354 = happySpecReduce_0  115# happyReduction_354
happyReduction_354  =  happyIn141
		 ([]
	)

happyReduce_355 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_355 = happySpecReduce_1  115# happyReduction_355
happyReduction_355 happy_x_1
	 =  case happyOut161 happy_x_1 of { (HappyWrap161 happy_var_1) -> 
	happyIn141
		 (NE.toList happy_var_1
	)}

happyReduce_356 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_356 = happySpecReduce_1  116# happyReduction_356
happyReduction_356 happy_x_1
	 =  case happyOut168 happy_x_1 of { (HappyWrap168 happy_var_1) -> 
	happyIn142
		 (NE.reverse happy_var_1
	)}

happyReduce_357 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_357 = happySpecReduce_1  117# happyReduction_357
happyReduction_357 happy_x_1
	 =  case happyOut169 happy_x_1 of { (HappyWrap169 happy_var_1) -> 
	happyIn143
		 (NE.reverse happy_var_1
	)}

happyReduce_358 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_358 = happySpecReduce_1  118# happyReduction_358
happyReduction_358 happy_x_1
	 =  case happyOut170 happy_x_1 of { (HappyWrap170 happy_var_1) -> 
	happyIn144
		 (NE.reverse happy_var_1
	)}

happyReduce_359 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_359 = happySpecReduce_1  119# happyReduction_359
happyReduction_359 happy_x_1
	 =  case happyOut171 happy_x_1 of { (HappyWrap171 happy_var_1) -> 
	happyIn145
		 (NE.reverse happy_var_1
	)}

happyReduce_360 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_360 = happySpecReduce_1  120# happyReduction_360
happyReduction_360 happy_x_1
	 =  case happyOut172 happy_x_1 of { (HappyWrap172 happy_var_1) -> 
	happyIn146
		 (NE.reverse happy_var_1
	)}

happyReduce_361 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_361 = happySpecReduce_1  121# happyReduction_361
happyReduction_361 happy_x_1
	 =  case happyOut176 happy_x_1 of { (HappyWrap176 happy_var_1) -> 
	happyIn147
		 (separated happy_var_1
	)}

happyReduce_362 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_362 = happySpecReduce_1  122# happyReduction_362
happyReduction_362 happy_x_1
	 =  case happyOut177 happy_x_1 of { (HappyWrap177 happy_var_1) -> 
	happyIn148
		 (separated happy_var_1
	)}

happyReduce_363 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_363 = happySpecReduce_1  123# happyReduction_363
happyReduction_363 happy_x_1
	 =  case happyOut178 happy_x_1 of { (HappyWrap178 happy_var_1) -> 
	happyIn149
		 (separated happy_var_1
	)}

happyReduce_364 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_364 = happySpecReduce_1  124# happyReduction_364
happyReduction_364 happy_x_1
	 =  case happyOut179 happy_x_1 of { (HappyWrap179 happy_var_1) -> 
	happyIn150
		 (separated happy_var_1
	)}

happyReduce_365 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_365 = happySpecReduce_1  125# happyReduction_365
happyReduction_365 happy_x_1
	 =  case happyOut180 happy_x_1 of { (HappyWrap180 happy_var_1) -> 
	happyIn151
		 (separated happy_var_1
	)}

happyReduce_366 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_366 = happySpecReduce_1  126# happyReduction_366
happyReduction_366 happy_x_1
	 =  case happyOut181 happy_x_1 of { (HappyWrap181 happy_var_1) -> 
	happyIn152
		 (separated happy_var_1
	)}

happyReduce_367 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_367 = happySpecReduce_1  127# happyReduction_367
happyReduction_367 happy_x_1
	 =  case happyOut182 happy_x_1 of { (HappyWrap182 happy_var_1) -> 
	happyIn153
		 (separated happy_var_1
	)}

happyReduce_368 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_368 = happySpecReduce_1  128# happyReduction_368
happyReduction_368 happy_x_1
	 =  case happyOut183 happy_x_1 of { (HappyWrap183 happy_var_1) -> 
	happyIn154
		 (separated happy_var_1
	)}

happyReduce_369 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_369 = happySpecReduce_1  129# happyReduction_369
happyReduction_369 happy_x_1
	 =  case happyOut184 happy_x_1 of { (HappyWrap184 happy_var_1) -> 
	happyIn155
		 (separated happy_var_1
	)}

happyReduce_370 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_370 = happySpecReduce_1  130# happyReduction_370
happyReduction_370 happy_x_1
	 =  case happyOut185 happy_x_1 of { (HappyWrap185 happy_var_1) -> 
	happyIn156
		 (separated happy_var_1
	)}

happyReduce_371 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_371 = happySpecReduce_1  131# happyReduction_371
happyReduction_371 happy_x_1
	 =  case happyOut186 happy_x_1 of { (HappyWrap186 happy_var_1) -> 
	happyIn157
		 (separated happy_var_1
	)}

happyReduce_372 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_372 = happySpecReduce_1  132# happyReduction_372
happyReduction_372 happy_x_1
	 =  case happyOut187 happy_x_1 of { (HappyWrap187 happy_var_1) -> 
	happyIn158
		 (separated happy_var_1
	)}

happyReduce_373 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_373 = happySpecReduce_1  133# happyReduction_373
happyReduction_373 happy_x_1
	 =  case happyOut188 happy_x_1 of { (HappyWrap188 happy_var_1) -> 
	happyIn159
		 (separated happy_var_1
	)}

happyReduce_374 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_374 = happySpecReduce_1  134# happyReduction_374
happyReduction_374 happy_x_1
	 =  case happyOut189 happy_x_1 of { (HappyWrap189 happy_var_1) -> 
	happyIn160
		 (NE.reverse happy_var_1
	)}

happyReduce_375 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_375 = happySpecReduce_1  135# happyReduction_375
happyReduction_375 happy_x_1
	 =  case happyOut190 happy_x_1 of { (HappyWrap190 happy_var_1) -> 
	happyIn161
		 (NE.reverse happy_var_1
	)}

happyReduce_376 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_376 = happySpecReduce_1  136# happyReduction_376
happyReduction_376 happy_x_1
	 =  case happyOut88 happy_x_1 of { (HappyWrap88 happy_var_1) -> 
	happyIn162
		 (pure happy_var_1
	)}

happyReduce_377 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_377 = happySpecReduce_2  136# happyReduction_377
happyReduction_377 happy_x_2
	happy_x_1
	 =  case happyOut162 happy_x_1 of { (HappyWrap162 happy_var_1) -> 
	case happyOut88 happy_x_2 of { (HappyWrap88 happy_var_2) -> 
	happyIn162
		 (NE.cons happy_var_2 happy_var_1
	)}}

happyReduce_378 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_378 = happySpecReduce_1  137# happyReduction_378
happyReduction_378 happy_x_1
	 =  case happyOut74 happy_x_1 of { (HappyWrap74 happy_var_1) -> 
	happyIn163
		 (pure happy_var_1
	)}

happyReduce_379 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_379 = happySpecReduce_2  137# happyReduction_379
happyReduction_379 happy_x_2
	happy_x_1
	 =  case happyOut163 happy_x_1 of { (HappyWrap163 happy_var_1) -> 
	case happyOut74 happy_x_2 of { (HappyWrap74 happy_var_2) -> 
	happyIn163
		 (NE.cons happy_var_2 happy_var_1
	)}}

happyReduce_380 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_380 = happySpecReduce_1  138# happyReduction_380
happyReduction_380 happy_x_1
	 =  case happyOut72 happy_x_1 of { (HappyWrap72 happy_var_1) -> 
	happyIn164
		 (pure happy_var_1
	)}

happyReduce_381 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_381 = happySpecReduce_2  138# happyReduction_381
happyReduction_381 happy_x_2
	happy_x_1
	 =  case happyOut164 happy_x_1 of { (HappyWrap164 happy_var_1) -> 
	case happyOut72 happy_x_2 of { (HappyWrap72 happy_var_2) -> 
	happyIn164
		 (NE.cons happy_var_2 happy_var_1
	)}}

happyReduce_382 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_382 = happySpecReduce_1  139# happyReduction_382
happyReduction_382 happy_x_1
	 =  case happyOut30 happy_x_1 of { (HappyWrap30 happy_var_1) -> 
	happyIn165
		 (pure happy_var_1
	)}

happyReduce_383 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_383 = happySpecReduce_2  139# happyReduction_383
happyReduction_383 happy_x_2
	happy_x_1
	 =  case happyOut165 happy_x_1 of { (HappyWrap165 happy_var_1) -> 
	case happyOut30 happy_x_2 of { (HappyWrap30 happy_var_2) -> 
	happyIn165
		 (NE.cons happy_var_2 happy_var_1
	)}}

happyReduce_384 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_384 = happySpecReduce_1  140# happyReduction_384
happyReduction_384 happy_x_1
	 =  case happyOut121 happy_x_1 of { (HappyWrap121 happy_var_1) -> 
	happyIn166
		 (pure happy_var_1
	)}

happyReduce_385 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_385 = happySpecReduce_2  140# happyReduction_385
happyReduction_385 happy_x_2
	happy_x_1
	 =  case happyOut166 happy_x_1 of { (HappyWrap166 happy_var_1) -> 
	case happyOut121 happy_x_2 of { (HappyWrap121 happy_var_2) -> 
	happyIn166
		 (NE.cons happy_var_2 happy_var_1
	)}}

happyReduce_386 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_386 = happySpecReduce_1  141# happyReduction_386
happyReduction_386 happy_x_1
	 =  case happyOut52 happy_x_1 of { (HappyWrap52 happy_var_1) -> 
	happyIn167
		 (pure happy_var_1
	)}

happyReduce_387 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_387 = happySpecReduce_2  141# happyReduction_387
happyReduction_387 happy_x_2
	happy_x_1
	 =  case happyOut167 happy_x_1 of { (HappyWrap167 happy_var_1) -> 
	case happyOut52 happy_x_2 of { (HappyWrap52 happy_var_2) -> 
	happyIn167
		 (NE.cons happy_var_2 happy_var_1
	)}}

happyReduce_388 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_388 = happySpecReduce_1  142# happyReduction_388
happyReduction_388 happy_x_1
	 =  case happyOut70 happy_x_1 of { (HappyWrap70 happy_var_1) -> 
	happyIn168
		 (pure happy_var_1
	)}

happyReduce_389 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_389 = happySpecReduce_3  142# happyReduction_389
happyReduction_389 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut168 happy_x_1 of { (HappyWrap168 happy_var_1) -> 
	case happyOut70 happy_x_3 of { (HappyWrap70 happy_var_3) -> 
	happyIn168
		 (NE.cons happy_var_3 happy_var_1
	)}}

happyReduce_390 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_390 = happySpecReduce_1  143# happyReduction_390
happyReduction_390 happy_x_1
	 =  case happyOut114 happy_x_1 of { (HappyWrap114 happy_var_1) -> 
	happyIn169
		 (pure happy_var_1
	)}

happyReduce_391 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_391 = happySpecReduce_3  143# happyReduction_391
happyReduction_391 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut169 happy_x_1 of { (HappyWrap169 happy_var_1) -> 
	case happyOut114 happy_x_3 of { (HappyWrap114 happy_var_3) -> 
	happyIn169
		 (NE.cons happy_var_3 happy_var_1
	)}}

happyReduce_392 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_392 = happySpecReduce_1  144# happyReduction_392
happyReduction_392 happy_x_1
	 =  case happyOut118 happy_x_1 of { (HappyWrap118 happy_var_1) -> 
	happyIn170
		 (pure happy_var_1
	)}

happyReduce_393 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_393 = happySpecReduce_3  144# happyReduction_393
happyReduction_393 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut170 happy_x_1 of { (HappyWrap170 happy_var_1) -> 
	case happyOut118 happy_x_3 of { (HappyWrap118 happy_var_3) -> 
	happyIn170
		 (NE.cons happy_var_3 happy_var_1
	)}}

happyReduce_394 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_394 = happySpecReduce_1  145# happyReduction_394
happyReduction_394 happy_x_1
	 =  case happyOut69 happy_x_1 of { (HappyWrap69 happy_var_1) -> 
	happyIn171
		 (pure happy_var_1
	)}

happyReduce_395 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_395 = happySpecReduce_3  145# happyReduction_395
happyReduction_395 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut171 happy_x_1 of { (HappyWrap171 happy_var_1) -> 
	case happyOut69 happy_x_3 of { (HappyWrap69 happy_var_3) -> 
	happyIn171
		 (NE.cons happy_var_3 happy_var_1
	)}}

happyReduce_396 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_396 = happySpecReduce_1  146# happyReduction_396
happyReduction_396 happy_x_1
	 =  case happyOut95 happy_x_1 of { (HappyWrap95 happy_var_1) -> 
	happyIn172
		 (pure happy_var_1
	)}

happyReduce_397 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_397 = happySpecReduce_3  146# happyReduction_397
happyReduction_397 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut172 happy_x_1 of { (HappyWrap172 happy_var_1) -> 
	case happyOut95 happy_x_3 of { (HappyWrap95 happy_var_3) -> 
	happyIn172
		 (NE.cons happy_var_3 happy_var_1
	)}}

happyReduce_398 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_398 = happySpecReduce_1  147# happyReduction_398
happyReduction_398 happy_x_1
	 =  case happyOut191 happy_x_1 of { (HappyWrap191 happy_var_1) -> 
	happyIn173
		 (separated happy_var_1
	)}

happyReduce_399 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_399 = happySpecReduce_1  148# happyReduction_399
happyReduction_399 happy_x_1
	 =  case happyOut192 happy_x_1 of { (HappyWrap192 happy_var_1) -> 
	happyIn174
		 (separated happy_var_1
	)}

happyReduce_400 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_400 = happySpecReduce_1  149# happyReduction_400
happyReduction_400 happy_x_1
	 =  case happyOut193 happy_x_1 of { (HappyWrap193 happy_var_1) -> 
	happyIn175
		 (separated happy_var_1
	)}

happyReduce_401 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_401 = happySpecReduce_1  150# happyReduction_401
happyReduction_401 happy_x_1
	 =  case happyOut86 happy_x_1 of { (HappyWrap86 happy_var_1) -> 
	happyIn176
		 ([(placeholder, happy_var_1)]
	)}

happyReduce_402 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_402 = happySpecReduce_3  150# happyReduction_402
happyReduction_402 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut176 happy_x_1 of { (HappyWrap176 happy_var_1) -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut86 happy_x_3 of { (HappyWrap86 happy_var_3) -> 
	happyIn176
		 ((happy_var_2, happy_var_3) : happy_var_1
	)}}}

happyReduce_403 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_403 = happySpecReduce_1  151# happyReduction_403
happyReduction_403 happy_x_1
	 =  case happyOut117 happy_x_1 of { (HappyWrap117 happy_var_1) -> 
	happyIn177
		 ([(placeholder, happy_var_1)]
	)}

happyReduce_404 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_404 = happySpecReduce_3  151# happyReduction_404
happyReduction_404 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut177 happy_x_1 of { (HappyWrap177 happy_var_1) -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut117 happy_x_3 of { (HappyWrap117 happy_var_3) -> 
	happyIn177
		 ((happy_var_2, happy_var_3) : happy_var_1
	)}}}

happyReduce_405 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_405 = happySpecReduce_1  152# happyReduction_405
happyReduction_405 happy_x_1
	 =  case happyOut107 happy_x_1 of { (HappyWrap107 happy_var_1) -> 
	happyIn178
		 ([(placeholder, happy_var_1)]
	)}

happyReduce_406 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_406 = happySpecReduce_3  152# happyReduction_406
happyReduction_406 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut178 happy_x_1 of { (HappyWrap178 happy_var_1) -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut107 happy_x_3 of { (HappyWrap107 happy_var_3) -> 
	happyIn178
		 ((happy_var_2, happy_var_3) : happy_var_1
	)}}}

happyReduce_407 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_407 = happySpecReduce_1  153# happyReduction_407
happyReduction_407 happy_x_1
	 =  case happyOut103 happy_x_1 of { (HappyWrap103 happy_var_1) -> 
	happyIn179
		 ([(placeholder, happy_var_1)]
	)}

happyReduce_408 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_408 = happySpecReduce_3  153# happyReduction_408
happyReduction_408 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut179 happy_x_1 of { (HappyWrap179 happy_var_1) -> 
	case happyOut96 happy_x_2 of { (HappyWrap96 happy_var_2) -> 
	case happyOut103 happy_x_3 of { (HappyWrap103 happy_var_3) -> 
	happyIn179
		 ((happy_var_2, happy_var_3) : happy_var_1
	)}}}

happyReduce_409 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_409 = happySpecReduce_1  154# happyReduction_409
happyReduction_409 happy_x_1
	 =  case happyOut98 happy_x_1 of { (HappyWrap98 happy_var_1) -> 
	happyIn180
		 ([(placeholder, happy_var_1)]
	)}

happyReduce_410 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_410 = happySpecReduce_3  154# happyReduction_410
happyReduction_410 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut180 happy_x_1 of { (HappyWrap180 happy_var_1) -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut98 happy_x_3 of { (HappyWrap98 happy_var_3) -> 
	happyIn180
		 ((happy_var_2, happy_var_3) : happy_var_1
	)}}}

happyReduce_411 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_411 = happySpecReduce_1  155# happyReduction_411
happyReduction_411 happy_x_1
	 =  case happyOut56 happy_x_1 of { (HappyWrap56 happy_var_1) -> 
	happyIn181
		 ([(placeholder, happy_var_1)]
	)}

happyReduce_412 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_412 = happySpecReduce_3  155# happyReduction_412
happyReduction_412 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut181 happy_x_1 of { (HappyWrap181 happy_var_1) -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut56 happy_x_3 of { (HappyWrap56 happy_var_3) -> 
	happyIn181
		 ((happy_var_2, happy_var_3) : happy_var_1
	)}}}

happyReduce_413 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_413 = happySpecReduce_1  156# happyReduction_413
happyReduction_413 happy_x_1
	 =  case happyOut113 happy_x_1 of { (HappyWrap113 happy_var_1) -> 
	happyIn182
		 ([(placeholder, happy_var_1)]
	)}

happyReduce_414 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_414 = happySpecReduce_3  156# happyReduction_414
happyReduction_414 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut182 happy_x_1 of { (HappyWrap182 happy_var_1) -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut113 happy_x_3 of { (HappyWrap113 happy_var_3) -> 
	happyIn182
		 ((happy_var_2, happy_var_3) : happy_var_1
	)}}}

happyReduce_415 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_415 = happySpecReduce_1  157# happyReduction_415
happyReduction_415 happy_x_1
	 =  case happyOut102 happy_x_1 of { (HappyWrap102 happy_var_1) -> 
	happyIn183
		 ([(placeholder, happy_var_1)]
	)}

happyReduce_416 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_416 = happySpecReduce_3  157# happyReduction_416
happyReduction_416 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut183 happy_x_1 of { (HappyWrap183 happy_var_1) -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut102 happy_x_3 of { (HappyWrap102 happy_var_3) -> 
	happyIn183
		 ((happy_var_2, happy_var_3) : happy_var_1
	)}}}

happyReduce_417 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_417 = happySpecReduce_1  158# happyReduction_417
happyReduction_417 happy_x_1
	 =  case happyOut35 happy_x_1 of { (HappyWrap35 happy_var_1) -> 
	happyIn184
		 ([(placeholder, happy_var_1)]
	)}

happyReduce_418 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_418 = happySpecReduce_3  158# happyReduction_418
happyReduction_418 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut184 happy_x_1 of { (HappyWrap184 happy_var_1) -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut35 happy_x_3 of { (HappyWrap35 happy_var_3) -> 
	happyIn184
		 ((happy_var_2, happy_var_3) : happy_var_1
	)}}}

happyReduce_419 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_419 = happySpecReduce_1  159# happyReduction_419
happyReduction_419 happy_x_1
	 =  case happyOut28 happy_x_1 of { (HappyWrap28 happy_var_1) -> 
	happyIn185
		 ([(placeholder, happy_var_1)]
	)}

happyReduce_420 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_420 = happySpecReduce_3  159# happyReduction_420
happyReduction_420 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut185 happy_x_1 of { (HappyWrap185 happy_var_1) -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut28 happy_x_3 of { (HappyWrap28 happy_var_3) -> 
	happyIn185
		 ((happy_var_2, happy_var_3) : happy_var_1
	)}}}

happyReduce_421 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_421 = happySpecReduce_1  160# happyReduction_421
happyReduction_421 happy_x_1
	 =  case happyOut68 happy_x_1 of { (HappyWrap68 happy_var_1) -> 
	happyIn186
		 ([(placeholder, happy_var_1)]
	)}

happyReduce_422 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_422 = happySpecReduce_3  160# happyReduction_422
happyReduction_422 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut186 happy_x_1 of { (HappyWrap186 happy_var_1) -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut68 happy_x_3 of { (HappyWrap68 happy_var_3) -> 
	happyIn186
		 ((happy_var_2, happy_var_3) : happy_var_1
	)}}}

happyReduce_423 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_423 = happySpecReduce_1  161# happyReduction_423
happyReduction_423 happy_x_1
	 =  case happyOut67 happy_x_1 of { (HappyWrap67 happy_var_1) -> 
	happyIn187
		 ([(placeholder, happy_var_1)]
	)}

happyReduce_424 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_424 = happySpecReduce_3  161# happyReduction_424
happyReduction_424 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut187 happy_x_1 of { (HappyWrap187 happy_var_1) -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut67 happy_x_3 of { (HappyWrap67 happy_var_3) -> 
	happyIn187
		 ((happy_var_2, happy_var_3) : happy_var_1
	)}}}

happyReduce_425 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_425 = happySpecReduce_1  162# happyReduction_425
happyReduction_425 happy_x_1
	 =  case happyOut51 happy_x_1 of { (HappyWrap51 happy_var_1) -> 
	happyIn188
		 ([(placeholder, happy_var_1)]
	)}

happyReduce_426 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_426 = happySpecReduce_3  162# happyReduction_426
happyReduction_426 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut188 happy_x_1 of { (HappyWrap188 happy_var_1) -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut51 happy_x_3 of { (HappyWrap51 happy_var_3) -> 
	happyIn188
		 ((happy_var_2, happy_var_3) : happy_var_1
	)}}}

happyReduce_427 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_427 = happySpecReduce_1  163# happyReduction_427
happyReduction_427 happy_x_1
	 =  case happyOut48 happy_x_1 of { (HappyWrap48 happy_var_1) -> 
	happyIn189
		 (pure happy_var_1
	)}

happyReduce_428 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_428 = happySpecReduce_2  163# happyReduction_428
happyReduction_428 happy_x_2
	happy_x_1
	 =  case happyOut189 happy_x_1 of { (HappyWrap189 happy_var_1) -> 
	case happyOut48 happy_x_2 of { (HappyWrap48 happy_var_2) -> 
	happyIn189
		 (NE.cons happy_var_2 happy_var_1
	)}}

happyReduce_429 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_429 = happySpecReduce_1  164# happyReduction_429
happyReduction_429 happy_x_1
	 =  case happyOut53 happy_x_1 of { (HappyWrap53 happy_var_1) -> 
	happyIn190
		 (pure happy_var_1
	)}

happyReduce_430 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_430 = happySpecReduce_2  164# happyReduction_430
happyReduction_430 happy_x_2
	happy_x_1
	 =  case happyOut190 happy_x_1 of { (HappyWrap190 happy_var_1) -> 
	case happyOut53 happy_x_2 of { (HappyWrap53 happy_var_2) -> 
	happyIn190
		 (NE.cons happy_var_2 happy_var_1
	)}}

happyReduce_431 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_431 = happySpecReduce_1  165# happyReduction_431
happyReduction_431 happy_x_1
	 =  case happyOut85 happy_x_1 of { (HappyWrap85 happy_var_1) -> 
	happyIn191
		 ([(placeholder, happy_var_1)]
	)}

happyReduce_432 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_432 = happySpecReduce_3  165# happyReduction_432
happyReduction_432 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut191 happy_x_1 of { (HappyWrap191 happy_var_1) -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut85 happy_x_3 of { (HappyWrap85 happy_var_3) -> 
	happyIn191
		 ((happy_var_2, happy_var_3) : happy_var_1
	)}}}

happyReduce_433 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_433 = happySpecReduce_1  166# happyReduction_433
happyReduction_433 happy_x_1
	 =  case happyOut89 happy_x_1 of { (HappyWrap89 happy_var_1) -> 
	happyIn192
		 ([(placeholder, happy_var_1)]
	)}

happyReduce_434 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_434 = happySpecReduce_3  166# happyReduction_434
happyReduction_434 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut192 happy_x_1 of { (HappyWrap192 happy_var_1) -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut89 happy_x_3 of { (HappyWrap89 happy_var_3) -> 
	happyIn192
		 ((happy_var_2, happy_var_3) : happy_var_1
	)}}}

happyReduce_435 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_435 = happySpecReduce_1  167# happyReduction_435
happyReduction_435 happy_x_1
	 =  case happyOut66 happy_x_1 of { (HappyWrap66 happy_var_1) -> 
	happyIn193
		 ([(placeholder, happy_var_1)]
	)}

happyReduce_436 :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )
happyReduce_436 = happySpecReduce_3  167# happyReduction_436
happyReduction_436 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut193 happy_x_1 of { (HappyWrap193 happy_var_1) -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut66 happy_x_3 of { (HappyWrap66 happy_var_3) -> 
	happyIn193
		 ((happy_var_2, happy_var_3) : happy_var_1
	)}}}

happyNewToken action sts stk
	= lexer(\tk -> 
	let cont i = happyDoAction i tk action sts stk in
	case tk of {
	SourceToken _ TokEof -> happyDoAction 73# tk action sts stk;
	SourceToken _ TokLeftParen -> cont 1#;
	SourceToken _ TokRightParen -> cont 2#;
	SourceToken _ TokLeftBrace -> cont 3#;
	SourceToken _ TokRightBrace -> cont 4#;
	SourceToken _ TokLeftSquare -> cont 5#;
	SourceToken _ TokRightSquare -> cont 6#;
	SourceToken _ TokLayoutStart -> cont 7#;
	SourceToken _ TokLayoutEnd -> cont 8#;
	SourceToken _ TokLayoutSep -> cont 9#;
	SourceToken _ (TokLeftArrow _) -> cont 10#;
	SourceToken _ (TokRightArrow _) -> cont 11#;
	SourceToken _ (TokOperator [] sym) | isLeftFatArrow sym -> cont 12#;
	SourceToken _ (TokRightFatArrow _) -> cont 13#;
	SourceToken _ (TokOperator [] ":") -> cont 14#;
	SourceToken _ (TokDoubleColon _) -> cont 15#;
	SourceToken _ TokEquals -> cont 16#;
	SourceToken _ TokPipe -> cont 17#;
	SourceToken _ TokTick -> cont 18#;
	SourceToken _ TokDot -> cont 19#;
	SourceToken _ TokComma -> cont 20#;
	SourceToken _ TokUnderscore -> cont 21#;
	SourceToken _ TokBackslash -> cont 22#;
	SourceToken _ (TokOperator [] "-") -> cont 23#;
	SourceToken _ (TokOperator [] "@") -> cont 24#;
	SourceToken _ (TokLowerName _ "ado") -> cont 25#;
	SourceToken _ (TokLowerName [] "as") -> cont 26#;
	SourceToken _ (TokLowerName [] "case") -> cont 27#;
	SourceToken _ (TokLowerName [] "class") -> cont 28#;
	SourceToken _ (TokLowerName [] "data") -> cont 29#;
	SourceToken _ (TokLowerName [] "derive") -> cont 30#;
	SourceToken _ (TokLowerName _ "do") -> cont 31#;
	SourceToken _ (TokLowerName [] "else") -> cont 32#;
	SourceToken _ (TokLowerName [] "false") -> cont 33#;
	SourceToken _ (TokForall ASCII) -> cont 34#;
	SourceToken _ (TokForall Unicode) -> cont 35#;
	SourceToken _ (TokLowerName [] "foreign") -> cont 36#;
	SourceToken _ (TokLowerName [] "hiding") -> cont 37#;
	SourceToken _ (TokLowerName [] "import") -> cont 38#;
	SourceToken _ (TokLowerName [] "if") -> cont 39#;
	SourceToken _ (TokLowerName [] "in") -> cont 40#;
	SourceToken _ (TokLowerName [] "infix") -> cont 41#;
	SourceToken _ (TokLowerName [] "infixl") -> cont 42#;
	SourceToken _ (TokLowerName [] "infixr") -> cont 43#;
	SourceToken _ (TokLowerName [] "instance") -> cont 44#;
	SourceToken _ (TokLowerName [] "let") -> cont 45#;
	SourceToken _ (TokLowerName [] "module") -> cont 46#;
	SourceToken _ (TokLowerName [] "newtype") -> cont 47#;
	SourceToken _ (TokLowerName [] "nominal") -> cont 48#;
	SourceToken _ (TokLowerName [] "phantom") -> cont 49#;
	SourceToken _ (TokLowerName [] "of") -> cont 50#;
	SourceToken _ (TokLowerName [] "representational") -> cont 51#;
	SourceToken _ (TokLowerName [] "role") -> cont 52#;
	SourceToken _ (TokLowerName [] "then") -> cont 53#;
	SourceToken _ (TokLowerName [] "true") -> cont 54#;
	SourceToken _ (TokLowerName [] "type") -> cont 55#;
	SourceToken _ (TokLowerName [] "where") -> cont 56#;
	SourceToken _ (TokSymbolArr _) -> cont 57#;
	SourceToken _ (TokSymbolName [] "..") -> cont 58#;
	SourceToken _ (TokLowerName [] _) -> cont 59#;
	SourceToken _ (TokLowerName _ _) -> cont 60#;
	SourceToken _ (TokUpperName [] _) -> cont 61#;
	SourceToken _ (TokUpperName _ _) -> cont 62#;
	SourceToken _ (TokSymbolName [] _) -> cont 63#;
	SourceToken _ (TokSymbolName _ _) -> cont 64#;
	SourceToken _ (TokOperator [] _) -> cont 65#;
	SourceToken _ (TokOperator _ _) -> cont 66#;
	SourceToken _ (TokHole _) -> cont 67#;
	SourceToken _ (TokChar _ _) -> cont 68#;
	SourceToken _ (TokString _ _) -> cont 69#;
	SourceToken _ (TokRawString _) -> cont 70#;
	SourceToken _ (TokInt _ _) -> cont 71#;
	SourceToken _ (TokNumber _ _) -> cont 72#;
	_ -> happyError' (tk, [])
	})

happyError_ explist 73# tk = happyError' (tk, explist)
happyError_ explist _ tk = happyError' (tk, explist)

happyThen :: () => Parser a -> (a -> Parser b) -> Parser b
happyThen = (Prelude.>>=)
happyReturn :: () => a -> Parser a
happyReturn = (Prelude.return)
happyParse :: () => Happy_GHC_Exts.Int# -> Parser (HappyAbsSyn )

happyNewToken :: () => Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )

happyDoAction :: () => Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn )

happyReduceArr :: () => Happy_Data_Array.Array Prelude.Int (Happy_GHC_Exts.Int# -> SourceToken -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> Parser (HappyAbsSyn ))

happyThen1 :: () => Parser a -> (a -> Parser b) -> Parser b
happyThen1 = happyThen
happyReturn1 :: () => a -> Parser a
happyReturn1 = happyReturn
happyError' :: () => ((SourceToken), [Prelude.String]) -> Parser a
happyError' tk = (\(tokens, _) -> parseError tokens) tk
parseType = happySomeParser where
 happySomeParser = happyThen (happyParse 0#) (\x -> happyReturn (let {(HappyWrap42 x') = happyOut42 x} in x'))

parseExpr = happySomeParser where
 happySomeParser = happyThen (happyParse 1#) (\x -> happyReturn (let {(HappyWrap56 x') = happyOut56 x} in x'))

parseIdent = happySomeParser where
 happySomeParser = happyThen (happyParse 2#) (\x -> happyReturn (let {(HappyWrap30 x') = happyOut30 x} in x'))

parseOperator = happySomeParser where
 happySomeParser = happyThen (happyParse 3#) (\x -> happyReturn (let {(HappyWrap32 x') = happyOut32 x} in x'))

parseModuleBody = happySomeParser where
 happySomeParser = happyThen (happyParse 4#) (\x -> happyReturn (let {(HappyWrap91 x') = happyOut91 x} in x'))

parseDecl = happySomeParser where
 happySomeParser = happyThen (happyParse 5#) (\x -> happyReturn (let {(HappyWrap103 x') = happyOut103 x} in x'))

parseImportDeclP = happySomeParser where
 happySomeParser = happyThen (happyParse 6#) (\x -> happyReturn (let {(HappyWrap122 x') = happyOut122 x} in x'))

parseDeclP = happySomeParser where
 happySomeParser = happyThen (happyParse 7#) (\x -> happyReturn (let {(HappyWrap123 x') = happyOut123 x} in x'))

parseExprP = happySomeParser where
 happySomeParser = happyThen (happyParse 8#) (\x -> happyReturn (let {(HappyWrap124 x') = happyOut124 x} in x'))

parseTypeP = happySomeParser where
 happySomeParser = happyThen (happyParse 9#) (\x -> happyReturn (let {(HappyWrap125 x') = happyOut125 x} in x'))

parseModuleNameP = happySomeParser where
 happySomeParser = happyThen (happyParse 10#) (\x -> happyReturn (let {(HappyWrap126 x') = happyOut126 x} in x'))

parseQualIdentP = happySomeParser where
 happySomeParser = happyThen (happyParse 11#) (\x -> happyReturn (let {(HappyWrap127 x') = happyOut127 x} in x'))

parseModuleHeader = happySomeParser where
 happySomeParser = happyThen (happyParse 12#) (\x -> happyReturn (let {(HappyWrap90 x') = happyOut90 x} in x'))

parseDoStatement = happySomeParser where
 happySomeParser = happyThen (happyParse 13#) (\x -> happyReturn (let {(HappyWrap77 x') = happyOut77 x} in x'))

parseDoExpr = happySomeParser where
 happySomeParser = happyThen (happyParse 14#) (\x -> happyReturn (let {(HappyWrap78 x') = happyOut78 x} in x'))

parseDoNext = happySomeParser where
 happySomeParser = happyThen (happyParse 15#) (\x -> happyReturn (let {(HappyWrap79 x') = happyOut79 x} in x'))

parseGuardExpr = happySomeParser where
 happySomeParser = happyThen (happyParse 16#) (\x -> happyReturn (let {(HappyWrap82 x') = happyOut82 x} in x'))

parseGuardNext = happySomeParser where
 happySomeParser = happyThen (happyParse 17#) (\x -> happyReturn (let {(HappyWrap83 x') = happyOut83 x} in x'))

parseGuardStatement = happySomeParser where
 happySomeParser = happyThen (happyParse 18#) (\x -> happyReturn (let {(HappyWrap81 x') = happyOut81 x} in x'))

parseClassSignature = happySomeParser where
 happySomeParser = happyThen (happyParse 19#) (\x -> happyReturn (let {(HappyWrap109 x') = happyOut109 x} in x'))

parseClassSuper = happySomeParser where
 happySomeParser = happyThen (happyParse 20#) (\x -> happyReturn (let {(HappyWrap110 x') = happyOut110 x} in x'))

parseClassNameAndFundeps = happySomeParser where
 happySomeParser = happyThen (happyParse 21#) (\x -> happyReturn (let {(HappyWrap111 x') = happyOut111 x} in x'))

parseBinderAndArrow = happySomeParser where
 happySomeParser = happyThen (happyParse 22#) (\x -> happyReturn (let {(HappyWrap84 x') = happyOut84 x} in x'))

happySeq = happyDontSeq


lexer :: (SourceToken -> Parser a) -> Parser a
lexer k = munch >>= k

parse :: Text -> ([ParserWarning], Either (NE.NonEmpty ParserError) (Module ()))
parse = either (([],) . Left) resFull . parseModule . lexModule

data PartialResult a = PartialResult
  { resPartial :: a
  , resFull :: ([ParserWarning], Either (NE.NonEmpty ParserError) a)
  } deriving (Functor)

parseModule :: [LexResult] -> Either (NE.NonEmpty ParserError) (PartialResult (Module ()))
parseModule toks = fmap (\header -> PartialResult header (parseFull header)) headerRes
  where
  (st, headerRes) =
    runParser (ParserState toks [] []) parseModuleHeader

  parseFull header = do
    let (ParserState _ _ warnings, res) = runParser st parseModuleBody
    (warnings, (\(decls, trailing) -> header { modDecls = decls, modTrailingComments = trailing }) <$> res)
{-# LINE 1 "templates/GenericTemplate.hs" #-}
-- $Id: GenericTemplate.hs,v 1.26 2005/01/14 14:47:22 simonmar Exp $













-- Do not remove this comment. Required to fix CPP parsing when using GCC and a clang-compiled alex.
#if __GLASGOW_HASKELL__ > 706
#define LT(n,m) ((Happy_GHC_Exts.tagToEnum# (n Happy_GHC_Exts.<# m)) :: Prelude.Bool)
#define GTE(n,m) ((Happy_GHC_Exts.tagToEnum# (n Happy_GHC_Exts.>=# m)) :: Prelude.Bool)
#define EQ(n,m) ((Happy_GHC_Exts.tagToEnum# (n Happy_GHC_Exts.==# m)) :: Prelude.Bool)
#else
#define LT(n,m) (n Happy_GHC_Exts.<# m)
#define GTE(n,m) (n Happy_GHC_Exts.>=# m)
#define EQ(n,m) (n Happy_GHC_Exts.==# m)
#endif



















data Happy_IntList = HappyCons Happy_GHC_Exts.Int# Happy_IntList








































infixr 9 `HappyStk`
data HappyStk a = HappyStk a (HappyStk a)

-----------------------------------------------------------------------------
-- starting the parse

happyParse start_state = happyNewToken start_state notHappyAtAll notHappyAtAll

-----------------------------------------------------------------------------
-- Accepting the parse

-- If the current token is ERROR_TOK, it means we've just accepted a partial
-- parse (a %partial parser).  We must ignore the saved token on the top of
-- the stack in this case.
happyAccept 0# tk st sts (_ `HappyStk` ans `HappyStk` _) =
        happyReturn1 ans
happyAccept j tk st sts (HappyStk ans _) = 
        (happyTcHack j (happyTcHack st)) (happyReturn1 ans)

-----------------------------------------------------------------------------
-- Arrays only: do the next action



happyDoAction i tk st
        = {- nothing -}
          case action of
                0#           -> {- nothing -}
                                     happyFail (happyExpListPerState ((Happy_GHC_Exts.I# (st)) :: Prelude.Int)) i tk st
                -1#          -> {- nothing -}
                                     happyAccept i tk st
                n | LT(n,(0# :: Happy_GHC_Exts.Int#)) -> {- nothing -}
                                                   (happyReduceArr Happy_Data_Array.! rule) i tk st
                                                   where rule = (Happy_GHC_Exts.I# ((Happy_GHC_Exts.negateInt# ((n Happy_GHC_Exts.+# (1# :: Happy_GHC_Exts.Int#))))))
                n                 -> {- nothing -}
                                     happyShift new_state i tk st
                                     where new_state = (n Happy_GHC_Exts.-# (1# :: Happy_GHC_Exts.Int#))
   where off    = happyAdjustOffset (indexShortOffAddr happyActOffsets st)
         off_i  = (off Happy_GHC_Exts.+# i)
         check  = if GTE(off_i,(0# :: Happy_GHC_Exts.Int#))
                  then EQ(indexShortOffAddr happyCheck off_i, i)
                  else Prelude.False
         action
          | check     = indexShortOffAddr happyTable off_i
          | Prelude.otherwise = indexShortOffAddr happyDefActions st




indexShortOffAddr (HappyA# arr) off =
        Happy_GHC_Exts.narrow16Int# i
  where
        i = Happy_GHC_Exts.word2Int# (Happy_GHC_Exts.or# (Happy_GHC_Exts.uncheckedShiftL# high 8#) low)
        high = Happy_GHC_Exts.int2Word# (Happy_GHC_Exts.ord# (Happy_GHC_Exts.indexCharOffAddr# arr (off' Happy_GHC_Exts.+# 1#)))
        low  = Happy_GHC_Exts.int2Word# (Happy_GHC_Exts.ord# (Happy_GHC_Exts.indexCharOffAddr# arr off'))
        off' = off Happy_GHC_Exts.*# 2#




{-# INLINE happyLt #-}
happyLt x y = LT(x,y)


readArrayBit arr bit =
    Bits.testBit (Happy_GHC_Exts.I# (indexShortOffAddr arr ((unbox_int bit) `Happy_GHC_Exts.iShiftRA#` 4#))) (bit `Prelude.mod` 16)
  where unbox_int (Happy_GHC_Exts.I# x) = x






data HappyAddr = HappyA# Happy_GHC_Exts.Addr#


-----------------------------------------------------------------------------
-- HappyState data type (not arrays)













-----------------------------------------------------------------------------
-- Shifting a token

happyShift new_state 0# tk st sts stk@(x `HappyStk` _) =
     let i = (case Happy_GHC_Exts.unsafeCoerce# x of { (Happy_GHC_Exts.I# (i)) -> i }) in
--     trace "shifting the error token" $
     happyDoAction i tk new_state (HappyCons (st) (sts)) (stk)

happyShift new_state i tk st sts stk =
     happyNewToken new_state (HappyCons (st) (sts)) ((happyInTok (tk))`HappyStk`stk)

-- happyReduce is specialised for the common cases.

happySpecReduce_0 i fn 0# tk st sts stk
     = happyFail [] 0# tk st sts stk
happySpecReduce_0 nt fn j tk st@((action)) sts stk
     = happyGoto nt j tk st (HappyCons (st) (sts)) (fn `HappyStk` stk)

happySpecReduce_1 i fn 0# tk st sts stk
     = happyFail [] 0# tk st sts stk
happySpecReduce_1 nt fn j tk _ sts@((HappyCons (st@(action)) (_))) (v1`HappyStk`stk')
     = let r = fn v1 in
       happySeq r (happyGoto nt j tk st sts (r `HappyStk` stk'))

happySpecReduce_2 i fn 0# tk st sts stk
     = happyFail [] 0# tk st sts stk
happySpecReduce_2 nt fn j tk _ (HappyCons (_) (sts@((HappyCons (st@(action)) (_))))) (v1`HappyStk`v2`HappyStk`stk')
     = let r = fn v1 v2 in
       happySeq r (happyGoto nt j tk st sts (r `HappyStk` stk'))

happySpecReduce_3 i fn 0# tk st sts stk
     = happyFail [] 0# tk st sts stk
happySpecReduce_3 nt fn j tk _ (HappyCons (_) ((HappyCons (_) (sts@((HappyCons (st@(action)) (_))))))) (v1`HappyStk`v2`HappyStk`v3`HappyStk`stk')
     = let r = fn v1 v2 v3 in
       happySeq r (happyGoto nt j tk st sts (r `HappyStk` stk'))

happyReduce k i fn 0# tk st sts stk
     = happyFail [] 0# tk st sts stk
happyReduce k nt fn j tk st sts stk
     = case happyDrop (k Happy_GHC_Exts.-# (1# :: Happy_GHC_Exts.Int#)) sts of
         sts1@((HappyCons (st1@(action)) (_))) ->
                let r = fn stk in  -- it doesn't hurt to always seq here...
                happyDoSeq r (happyGoto nt j tk st1 sts1 r)

happyMonadReduce k nt fn 0# tk st sts stk
     = happyFail [] 0# tk st sts stk
happyMonadReduce k nt fn j tk st sts stk =
      case happyDrop k (HappyCons (st) (sts)) of
        sts1@((HappyCons (st1@(action)) (_))) ->
          let drop_stk = happyDropStk k stk in
          happyThen1 (fn stk tk) (\r -> happyGoto nt j tk st1 sts1 (r `HappyStk` drop_stk))

happyMonad2Reduce k nt fn 0# tk st sts stk
     = happyFail [] 0# tk st sts stk
happyMonad2Reduce k nt fn j tk st sts stk =
      case happyDrop k (HappyCons (st) (sts)) of
        sts1@((HappyCons (st1@(action)) (_))) ->
         let drop_stk = happyDropStk k stk

             off = happyAdjustOffset (indexShortOffAddr happyGotoOffsets st1)
             off_i = (off Happy_GHC_Exts.+# nt)
             new_state = indexShortOffAddr happyTable off_i




          in
          happyThen1 (fn stk tk) (\r -> happyNewToken new_state sts1 (r `HappyStk` drop_stk))

happyDrop 0# l = l
happyDrop n (HappyCons (_) (t)) = happyDrop (n Happy_GHC_Exts.-# (1# :: Happy_GHC_Exts.Int#)) t

happyDropStk 0# l = l
happyDropStk n (x `HappyStk` xs) = happyDropStk (n Happy_GHC_Exts.-# (1#::Happy_GHC_Exts.Int#)) xs

-----------------------------------------------------------------------------
-- Moving to a new state after a reduction


happyGoto nt j tk st = 
   {- nothing -}
   happyDoAction j tk new_state
   where off = happyAdjustOffset (indexShortOffAddr happyGotoOffsets st)
         off_i = (off Happy_GHC_Exts.+# nt)
         new_state = indexShortOffAddr happyTable off_i




-----------------------------------------------------------------------------
-- Error recovery (ERROR_TOK is the error token)

-- parse error if we are in recovery and we fail again
happyFail explist 0# tk old_st _ stk@(x `HappyStk` _) =
     let i = (case Happy_GHC_Exts.unsafeCoerce# x of { (Happy_GHC_Exts.I# (i)) -> i }) in
--      trace "failing" $ 
        happyError_ explist i tk

{-  We don't need state discarding for our restricted implementation of
    "error".  In fact, it can cause some bogus parses, so I've disabled it
    for now --SDM

-- discard a state
happyFail  ERROR_TOK tk old_st CONS(HAPPYSTATE(action),sts) 
                                                (saved_tok `HappyStk` _ `HappyStk` stk) =
--      trace ("discarding state, depth " ++ show (length stk))  $
        DO_ACTION(action,ERROR_TOK,tk,sts,(saved_tok`HappyStk`stk))
-}

-- Enter error recovery: generate an error token,
--                       save the old token and carry on.
happyFail explist i tk (action) sts stk =
--      trace "entering error recovery" $
        happyDoAction 0# tk action sts ((Happy_GHC_Exts.unsafeCoerce# (Happy_GHC_Exts.I# (i))) `HappyStk` stk)

-- Internal happy errors:

notHappyAtAll :: a
notHappyAtAll = Prelude.error "Internal Happy error\n"

-----------------------------------------------------------------------------
-- Hack to get the typechecker to accept our action functions


happyTcHack :: Happy_GHC_Exts.Int# -> a -> a
happyTcHack x y = y
{-# INLINE happyTcHack #-}


-----------------------------------------------------------------------------
-- Seq-ing.  If the --strict flag is given, then Happy emits 
--      happySeq = happyDoSeq
-- otherwise it emits
--      happySeq = happyDontSeq

happyDoSeq, happyDontSeq :: a -> b -> b
happyDoSeq   a b = a `Prelude.seq` b
happyDontSeq a b = b

-----------------------------------------------------------------------------
-- Don't inline any functions from the template.  GHC has a nasty habit
-- of deciding to inline happyGoto everywhere, which increases the size of
-- the generated parser quite a bit.


{-# NOINLINE happyDoAction #-}
{-# NOINLINE happyTable #-}
{-# NOINLINE happyCheck #-}
{-# NOINLINE happyActOffsets #-}
{-# NOINLINE happyGotoOffsets #-}
{-# NOINLINE happyDefActions #-}

{-# NOINLINE happyShift #-}
{-# NOINLINE happySpecReduce_0 #-}
{-# NOINLINE happySpecReduce_1 #-}
{-# NOINLINE happySpecReduce_2 #-}
{-# NOINLINE happySpecReduce_3 #-}
{-# NOINLINE happyReduce #-}
{-# NOINLINE happyMonadReduce #-}
{-# NOINLINE happyGoto #-}
{-# NOINLINE happyFail #-}

-- end of Happy Template.
